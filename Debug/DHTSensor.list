
DHTSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08005ff8  08005ff8  00006ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d0  080063d0  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d8  080063d8  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d8  080063d8  000073d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063dc  080063dc  000073dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080063e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  080065b4  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  080065b4  0000838c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000896c  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180b  00000000  00000000  00010b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00012380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c4  00000000  00000000  00012b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c53  00000000  00000000  000130dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099b8  00000000  00000000  00034d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca371  00000000  00000000  0003e6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108a58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f4c  00000000  00000000  00108a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fdc 	.word	0x08005fdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08005fdc 	.word	0x08005fdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <DWT_Init>:

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void DWT_Init(void) {
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <DWT_Init+0x38>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10e      	bne.n	8000f06 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // トレース機能を有効にする
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <DWT_Init+0x38>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <DWT_Init+0x38>)
 8000eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ef2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;                                // サイクルカウンタをリセット
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <DWT_Init+0x3c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // サイクルカウンタを有効にする
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <DWT_Init+0x3c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <DWT_Init+0x3c>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6013      	str	r3, [r2, #0]
    }
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000edf0 	.word	0xe000edf0
 8000f14:	e0001000 	.word	0xe0001000

08000f18 <debugPrint>:

void debugPrint(UART_HandleTypeDef *huart, char *message) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *) message, strlen(message),
 8000f22:	6838      	ldr	r0, [r7, #0]
 8000f24:	f7ff f9c4 	bl	80002b0 <strlen>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f001 fe4e 	bl	8002bd4 <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <delay_us>:

void delay_us(uint16_t micros) {
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
    uint32_t cycles = (SystemCoreClock / 1000000) * micros; // クロックサイクル数を計算
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <delay_us+0x44>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f88 <delay_us+0x48>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	0c9b      	lsrs	r3, r3, #18
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <delay_us+0x4c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	60bb      	str	r3, [r7, #8]

    // サイクル数が加算された後の値がオーバーフローするかどうかをチェックし、適切に処理
    while ((DWT->CYCCNT - start) < cycles);
 8000f64:	bf00      	nop
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <delay_us+0x4c>)
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f8      	bhi.n	8000f66 <delay_us+0x26>
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000000 	.word	0x20000000
 8000f88:	431bde83 	.word	0x431bde83
 8000f8c:	e0001000 	.word	0xe0001000

08000f90 <GPIO_SetMode>:

void GPIO_SetMode(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t Mode,
                  uint32_t Pull, uint32_t Speed) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	817b      	strh	r3, [r7, #10]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_Pin;
 8000fb0:	897b      	ldrh	r3, [r7, #10]
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = Mode;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = Pull;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = Speed;
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fbe:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 fe06 	bl	8001bd8 <HAL_GPIO_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	@ 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <send_start_signal>:

void send_start_signal(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af02      	add	r7, sp, #8
    // ピンを出力モードに設定
    GPIO_SetMode(DHT22_GPIO_PORT, DHT22_GPIO_PIN, GPIO_MODE_OUTPUT_PP,
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	481b      	ldr	r0, [pc, #108]	@ (8001054 <send_start_signal+0x80>)
 8000fe6:	f7ff ffd3 	bl	8000f90 <GPIO_SetMode>
                 GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);

    HAL_GPIO_WritePin(DHT22_GPIO_PORT, DHT22_GPIO_PIN, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4819      	ldr	r0, [pc, #100]	@ (8001054 <send_start_signal+0x80>)
 8000ff0:	f000 ff9e 	bl	8001f30 <HAL_GPIO_WritePin>
    delay_us(1000); // 1 ms
 8000ff4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff8:	f7ff ffa2 	bl	8000f40 <delay_us>

    HAL_GPIO_WritePin(DHT22_GPIO_PORT, DHT22_GPIO_PIN, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4814      	ldr	r0, [pc, #80]	@ (8001054 <send_start_signal+0x80>)
 8001002:	f000 ff95 	bl	8001f30 <HAL_GPIO_WritePin>
    delay_us(30); // 20-40 us
 8001006:	201e      	movs	r0, #30
 8001008:	f7ff ff9a 	bl	8000f40 <delay_us>

    // ピンを入力モードに設定
    GPIO_SetMode(
 800100c:	2300      	movs	r3, #0
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2300      	movs	r3, #0
 8001012:	2200      	movs	r2, #0
 8001014:	2101      	movs	r1, #1
 8001016:	480f      	ldr	r0, [pc, #60]	@ (8001054 <send_start_signal+0x80>)
 8001018:	f7ff ffba 	bl	8000f90 <GPIO_SetMode>
            GPIO_MODE_INPUT,
            GPIO_NOPULL,
            GPIO_SPEED_FREQ_LOW);

    // wait while pin high
    while (HAL_GPIO_ReadPin(DHT22_GPIO_PORT, DHT22_GPIO_PIN) == GPIO_PIN_SET);
 800101c:	bf00      	nop
 800101e:	2101      	movs	r1, #1
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <send_start_signal+0x80>)
 8001022:	f000 ff6d 	bl	8001f00 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d0f8      	beq.n	800101e <send_start_signal+0x4a>
    //wait while pin low
    while (HAL_GPIO_ReadPin(DHT22_GPIO_PORT, DHT22_GPIO_PIN) == GPIO_PIN_RESET);
 800102c:	bf00      	nop
 800102e:	2101      	movs	r1, #1
 8001030:	4808      	ldr	r0, [pc, #32]	@ (8001054 <send_start_signal+0x80>)
 8001032:	f000 ff65 	bl	8001f00 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f8      	beq.n	800102e <send_start_signal+0x5a>
    //wait while pin high
    while (HAL_GPIO_ReadPin(DHT22_GPIO_PORT, DHT22_GPIO_PIN) == GPIO_PIN_SET);
 800103c:	bf00      	nop
 800103e:	2101      	movs	r1, #1
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <send_start_signal+0x80>)
 8001042:	f000 ff5d 	bl	8001f00 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d0f8      	beq.n	800103e <send_start_signal+0x6a>
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020000 	.word	0x40020000

08001058 <bitsToByte>:

// Utility function to convert bit array to byte
static uint8_t bitsToByte(bool bits[8]) {
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    uint8_t byte = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 8; i++) {
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	e014      	b.n	8001094 <bitsToByte+0x3c>
        if (bits[i]) {
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <bitsToByte+0x36>
            byte |= (1 << (7 - i));
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	f1c3 0307 	rsb	r3, r3, #7
 800107c:	2201      	movs	r2, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	b25a      	sxtb	r2, r3
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	4313      	orrs	r3, r2
 800108a:	b25b      	sxtb	r3, r3
 800108c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 8; i++) {
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b07      	cmp	r3, #7
 8001098:	dde7      	ble.n	800106a <bitsToByte+0x12>
        }
    }
    return byte;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <decodeData>:

// Calculate the actual values and perform checksum validation
static void decodeData(DHT22_DataTypeDef *result, bool bits[40]) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	@ 0x40
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
    bool rh_integral_bits[8], rh_decimal_bits[8], t_integral_bits[8], t_decimal_bits[8], checksum_bits[8];
    memcpy(rh_integral_bits, &bits[0], 8);
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b8:	6810      	ldr	r0, [r2, #0]
 80010ba:	6851      	ldr	r1, [r2, #4]
 80010bc:	c303      	stmia	r3!, {r0, r1}
    memcpy(rh_decimal_bits, &bits[8], 8);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f103 0208 	add.w	r2, r3, #8
 80010c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c8:	6810      	ldr	r0, [r2, #0]
 80010ca:	6851      	ldr	r1, [r2, #4]
 80010cc:	c303      	stmia	r3!, {r0, r1}
    memcpy(t_integral_bits, &bits[16], 8);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f103 0210 	add.w	r2, r3, #16
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	6851      	ldr	r1, [r2, #4]
 80010dc:	c303      	stmia	r3!, {r0, r1}
    memcpy(t_decimal_bits, &bits[24], 8);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f103 0218 	add.w	r2, r3, #24
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	6810      	ldr	r0, [r2, #0]
 80010ea:	6851      	ldr	r1, [r2, #4]
 80010ec:	c303      	stmia	r3!, {r0, r1}
    memcpy(checksum_bits, &bits[32], 8);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	f103 0220 	add.w	r2, r3, #32
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	6810      	ldr	r0, [r2, #0]
 80010fa:	6851      	ldr	r1, [r2, #4]
 80010fc:	c303      	stmia	r3!, {r0, r1}

    uint8_t rh_integral = bitsToByte(rh_integral_bits);
 80010fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffa8 	bl	8001058 <bitsToByte>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t rh_decimal = bitsToByte(rh_decimal_bits);
 800110e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffa0 	bl	8001058 <bitsToByte>
 8001118:	4603      	mov	r3, r0
 800111a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    uint8_t t_integral = bitsToByte(t_integral_bits);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff98 	bl	8001058 <bitsToByte>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    uint8_t t_decimal = bitsToByte(t_decimal_bits);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff90 	bl	8001058 <bitsToByte>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    uint8_t checksum_received = bitsToByte(checksum_bits);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff88 	bl	8001058 <bitsToByte>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    uint8_t checksum_calculated = rh_integral + rh_decimal + t_integral + t_decimal;
 800114e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001152:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001156:	4413      	add	r3, r2
 8001158:	b2da      	uxtb	r2, r3
 800115a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800115e:	4413      	add	r3, r2
 8001160:	b2da      	uxtb	r2, r3
 8001162:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001166:	4413      	add	r3, r2
 8001168:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    // Calculate humidity and temperature correctly
    result->humidity = (rh_integral * 256 + rh_decimal) / 10.0f;
 800116c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001170:	021a      	lsls	r2, r3, #8
 8001172:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001176:	4413      	add	r3, r2
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001180:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a01 	vstr	s15, [r3, #4]
    float temp = (t_integral * 256 + t_decimal) / 10.0f;
 800118e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001192:	021a      	lsls	r2, r3, #8
 8001194:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001198:	4413      	add	r3, r2
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    result->temperature = (bits[16] ? -temp : temp); // Adjust sign based on the highest bit of the temperature data
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3310      	adds	r3, #16
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <decodeData+0x11a>
 80011b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011bc:	eef1 7a67 	vneg.f32	s15, s15
 80011c0:	e001      	b.n	80011c6 <decodeData+0x11e>
 80011c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a00 	vstr	s15, [r3]

    // Checksum validation
    if (checksum_received != checksum_calculated) {
 80011cc:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80011d0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d003      	beq.n	80011e0 <decodeData+0x138>
        debugPrint(&huart2, "Checksum error!\r\n");
 80011d8:	4903      	ldr	r1, [pc, #12]	@ (80011e8 <decodeData+0x140>)
 80011da:	4804      	ldr	r0, [pc, #16]	@ (80011ec <decodeData+0x144>)
 80011dc:	f7ff fe9c 	bl	8000f18 <debugPrint>
    }
}
 80011e0:	bf00      	nop
 80011e2:	3740      	adds	r7, #64	@ 0x40
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08005ff8 	.word	0x08005ff8
 80011ec:	200001f0 	.word	0x200001f0

080011f0 <DHT22_ReadData>:


// Main data reading function
DHT22_DataTypeDef DHT22_ReadData(void) {
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b09c      	sub	sp, #112	@ 0x70
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    bool allBits[40];
    DHT22_DataTypeDef result = {0.0f, 0.0f, {false}};
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2230      	movs	r2, #48	@ 0x30
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fddd 	bl	8003dc0 <memset>

    send_start_signal();
 8001206:	f7ff fee5 	bl	8000fd4 <send_start_signal>

    for (int i = 0; i < 40; i++) {
 800120a:	2300      	movs	r3, #0
 800120c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800120e:	e03f      	b.n	8001290 <DHT22_ReadData+0xa0>
        // Wait for signal LOW period
        while (HAL_GPIO_ReadPin(DHT22_GPIO_PORT, DHT22_GPIO_PIN) == GPIO_PIN_RESET);
 8001210:	bf00      	nop
 8001212:	2101      	movs	r1, #1
 8001214:	4832      	ldr	r0, [pc, #200]	@ (80012e0 <DHT22_ReadData+0xf0>)
 8001216:	f000 fe73 	bl	8001f00 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f8      	beq.n	8001212 <DHT22_ReadData+0x22>

        // Measure the length of the HIGH period
        uint32_t start = DWT->CYCCNT;
 8001220:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <DHT22_ReadData+0xf4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	66bb      	str	r3, [r7, #104]	@ 0x68
        while (HAL_GPIO_ReadPin(DHT22_GPIO_PORT, DHT22_GPIO_PIN) == GPIO_PIN_SET);
 8001226:	bf00      	nop
 8001228:	2101      	movs	r1, #1
 800122a:	482d      	ldr	r0, [pc, #180]	@ (80012e0 <DHT22_ReadData+0xf0>)
 800122c:	f000 fe68 	bl	8001f00 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d0f8      	beq.n	8001228 <DHT22_ReadData+0x38>
        uint32_t cycles = DWT->CYCCNT - start;
 8001236:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <DHT22_ReadData+0xf4>)
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	667b      	str	r3, [r7, #100]	@ 0x64

        float spentUs = cycles * (1000000.0f / SystemCoreClock);
 8001240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800124a:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <DHT22_ReadData+0xf8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001256:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 80012ec <DHT22_ReadData+0xfc>
 800125a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800125e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001262:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        allBits[i] = (spentUs > 40); // Determine if the bit is '0' or '1'
 8001266:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800126a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80012f0 <DHT22_ReadData+0x100>
 800126e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	bfcc      	ite	gt
 8001278:	2301      	movgt	r3, #1
 800127a:	2300      	movle	r3, #0
 800127c:	b2d9      	uxtb	r1, r3
 800127e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 40; i++) {
 800128a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800128c:	3301      	adds	r3, #1
 800128e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001292:	2b27      	cmp	r3, #39	@ 0x27
 8001294:	ddbc      	ble.n	8001210 <DHT22_ReadData+0x20>
    }

    decodeData(&result, allBits);
 8001296:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff01 	bl	80010a8 <decodeData>
    memcpy(result.allBits, allBits, sizeof(allBits));
 80012a6:	f107 0410 	add.w	r4, r7, #16
 80012aa:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ba:	e884 0003 	stmia.w	r4, {r0, r1}

    return result;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	461d      	mov	r5, r3
 80012c2:	f107 0408 	add.w	r4, r7, #8
 80012c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	3770      	adds	r7, #112	@ 0x70
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020000 	.word	0x40020000
 80012e4:	e0001000 	.word	0xe0001000
 80012e8:	20000000 	.word	0x20000000
 80012ec:	49742400 	.word	0x49742400
 80012f0:	42200000 	.word	0x42200000

080012f4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b0a8      	sub	sp, #160	@ 0xa0
 80012f8:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80012fa:	f000 faf1 	bl	80018e0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80012fe:	f000 f835 	bl	800136c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    DWT_Init();
 8001302:	f7ff fde9 	bl	8000ed8 <DWT_Init>

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001306:	f000 f8c9 	bl	800149c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800130a:	f000 f89d 	bl	8001448 <MX_USART2_UART_Init>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        // センサーからデータを読み取る
        DHT22_DataTypeDef sensor_data;
        sensor_data = DHT22_ReadData();
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff6d 	bl	80011f0 <DHT22_ReadData>
//		debugPrint(&huart2, bitsString);
//		debugPrint(&huart2, "\r\n");

        char buffer[100];
        sprintf(buffer, "Temperature: %.2f C, Humidity: %.2f %%\r\n",
                sensor_data.temperature, sensor_data.humidity);
 8001316:	687b      	ldr	r3, [r7, #4]
        sprintf(buffer, "Temperature: %.2f C, Humidity: %.2f %%\r\n",
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f935 	bl	8000588 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
                sensor_data.temperature, sensor_data.humidity);
 8001322:	68bb      	ldr	r3, [r7, #8]
        sprintf(buffer, "Temperature: %.2f C, Humidity: %.2f %%\r\n",
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f92f 	bl	8000588 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001332:	e9cd 2300 	strd	r2, r3, [sp]
 8001336:	4622      	mov	r2, r4
 8001338:	462b      	mov	r3, r5
 800133a:	4909      	ldr	r1, [pc, #36]	@ (8001360 <main+0x6c>)
 800133c:	f002 fc5e 	bl	8003bfc <siprintf>
        debugPrint(&huart2, buffer);
 8001340:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001344:	4619      	mov	r1, r3
 8001346:	4807      	ldr	r0, [pc, #28]	@ (8001364 <main+0x70>)
 8001348:	f7ff fde6 	bl	8000f18 <debugPrint>

        debugPrint(&huart2, "Continue...\r\n");
 800134c:	4906      	ldr	r1, [pc, #24]	@ (8001368 <main+0x74>)
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <main+0x70>)
 8001350:	f7ff fde2 	bl	8000f18 <debugPrint>
        // 次のデータ読み取りまでの間隔
        HAL_Delay(4000);
 8001354:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001358:	f000 fb34 	bl	80019c4 <HAL_Delay>
    while (1) {
 800135c:	bf00      	nop
 800135e:	e7d6      	b.n	800130e <main+0x1a>
 8001360:	0800600c 	.word	0x0800600c
 8001364:	200001f0 	.word	0x200001f0
 8001368:	08006038 	.word	0x08006038

0800136c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	2234      	movs	r2, #52	@ 0x34
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fd20 	bl	8003dc0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <SystemClock_Config+0xd4>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <SystemClock_Config+0xd4>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139e:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <SystemClock_Config+0xd4>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <SystemClock_Config+0xd8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013b8:	4a22      	ldr	r2, [pc, #136]	@ (8001444 <SystemClock_Config+0xd8>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <SystemClock_Config+0xd8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d4:	2310      	movs	r3, #16
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 80013e0:	2310      	movs	r3, #16
 80013e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 80013e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013e8:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ea:	2304      	movs	r3, #4
 80013ec:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f8fc 	bl	80025f8 <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x9e>
        Error_Handler();
 8001406:	f000 f8c3 	bl	8001590 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800140a:	230f      	movs	r3, #15
 800140c:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140e:	2302      	movs	r3, #2
 8001410:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	2102      	movs	r1, #2
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fd9c 	bl	8001f64 <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xca>
        Error_Handler();
 8001432:	f000 f8ad 	bl	8001590 <Error_Handler>
    }
}
 8001436:	bf00      	nop
 8001438:	3750      	adds	r7, #80	@ 0x50
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_USART2_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001480:	f001 fb58 	bl	8002b34 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x46>
        Error_Handler();
 800148a:	f000 f881 	bl	8001590 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001f0 	.word	0x200001f0
 8001498:	40004400 	.word	0x40004400

0800149c <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b33      	ldr	r3, [pc, #204]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a32      	ldr	r2, [pc, #200]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_GPIO_Init+0xe8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_GPIO_Init+0xe8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a1d      	ldr	r2, [pc, #116]	@ (8001584 <MX_GPIO_Init+0xe8>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <MX_GPIO_Init+0xe8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	4818      	ldr	r0, [pc, #96]	@ (8001588 <MX_GPIO_Init+0xec>)
 8001528:	f000 fd02 	bl	8001f30 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800152c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001532:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4812      	ldr	r0, [pc, #72]	@ (800158c <MX_GPIO_Init+0xf0>)
 8001544:	f000 fb48 	bl	8001bd8 <HAL_GPIO_Init>

    /*Configure GPIO pin : DHT22_Input_Pin */
    GPIO_InitStruct.Pin = DHT22_Input_Pin;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DHT22_Input_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	@ (8001588 <MX_GPIO_Init+0xec>)
 800155c:	f000 fb3c 	bl	8001bd8 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8001560:	2320      	movs	r3, #32
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_GPIO_Init+0xec>)
 8001578:	f000 fb2e 	bl	8001bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020800 	.word	0x40020800

08001590 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <Error_Handler+0x8>

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015da:	2007      	movs	r0, #7
 80015dc:	f000 fac8 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <HAL_UART_MspInit+0x84>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12b      	bne.n	8001666 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161c:	6413      	str	r3, [r2, #64]	@ 0x40
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_UART_MspInit+0x88>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001646:	230c      	movs	r3, #12
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001656:	2307      	movs	r3, #7
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_UART_MspInit+0x8c>)
 8001662:	f000 fab9 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	@ 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40004400 	.word	0x40004400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <NMI_Handler+0x4>

08001684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <MemManage_Handler+0x4>

08001694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d2:	f000 f957 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}

080016da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  return 1;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_kill>:

int _kill(int pid, int sig)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f4:	f002 fb70 	bl	8003dd8 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2216      	movs	r2, #22
 80016fc:	601a      	str	r2, [r3, #0]
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_exit>:

void _exit (int status)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001712:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffe7 	bl	80016ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
  }

  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
  }
  return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ba:	605a      	str	r2, [r3, #4]
  return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_isatty>:

int _isatty(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f002 fad4 	bl	8003dd8 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20020000 	.word	0x20020000
 800185c:	00000400 	.word	0x00000400
 8001860:	20000238 	.word	0x20000238
 8001864:	20000390 	.word	0x20000390

08001868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001890:	f7ff ffea 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001896:	490d      	ldr	r1, [pc, #52]	@ (80018cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ac:	4c0a      	ldr	r4, [pc, #40]	@ (80018d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f002 fa93 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff fd19 	bl	80012f4 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018d0:	080063e0 	.word	0x080063e0
  ldr r2, =_sbss
 80018d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018d8:	2000038c 	.word	0x2000038c

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>
	...

080018e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_Init+0x40>)
 80018ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <HAL_Init+0x40>)
 80018f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <HAL_Init+0x40>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f931 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7ff fe42 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f93b 	bl	8001bbe <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001960:	f000 f911 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000000 	.word	0x20000000
 800197c:	20000008 	.word	0x20000008
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	2000023c 	.word	0x2000023c

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000023c 	.word	0x2000023c

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ea:	bf00      	nop
 80019ec:	f7ff ffde 	bl	80019ac <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff47 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff5c 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffb0 	bl	8001b2c <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e165      	b.n	8001ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8154 	bne.w	8001eba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d005      	beq.n	8001c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d130      	bne.n	8001c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 0201 	and.w	r2, r3, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d017      	beq.n	8001cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d123      	bne.n	8001d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80ae 	beq.w	8001eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7a:	4a58      	ldr	r2, [pc, #352]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee0 <HAL_GPIO_Init+0x308>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d025      	beq.n	8001df2 <HAL_GPIO_Init+0x21a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee4 <HAL_GPIO_Init+0x30c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <HAL_GPIO_Init+0x216>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <HAL_GPIO_Init+0x310>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d019      	beq.n	8001dea <HAL_GPIO_Init+0x212>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	@ (8001eec <HAL_GPIO_Init+0x314>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0x20e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef0 <HAL_GPIO_Init+0x318>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00d      	beq.n	8001de2 <HAL_GPIO_Init+0x20a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef4 <HAL_GPIO_Init+0x31c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x206>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	@ (8001ef8 <HAL_GPIO_Init+0x320>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_GPIO_Init+0x202>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00c      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00a      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a31      	ldr	r2, [pc, #196]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a11      	ldr	r2, [pc, #68]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f ae96 	bls.w	8001bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40021400 	.word	0x40021400
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0cc      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b68      	ldr	r3, [pc, #416]	@ (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d90c      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b65      	ldr	r3, [pc, #404]	@ (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	@ (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b50      	ldr	r3, [pc, #320]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494d      	ldr	r1, [pc, #308]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d044      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d119      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d003      	beq.n	8002022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	2b03      	cmp	r3, #3
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e067      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b37      	ldr	r3, [pc, #220]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4934      	ldr	r1, [pc, #208]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7ff fcaa 	bl	80019ac <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff fca6 	bl	80019ac <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e04f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2b      	ldr	r3, [pc, #172]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d20c      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b22      	ldr	r3, [pc, #136]	@ (800211c <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e032      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4916      	ldr	r1, [pc, #88]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490e      	ldr	r1, [pc, #56]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f855 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490a      	ldr	r1, [pc, #40]	@ (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc0a 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00
 8002120:	40023800 	.word	0x40023800
 8002124:	08006048 	.word	0x08006048
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <HAL_RCC_GetHCLKFreq+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800214c:	f7ff fff0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	@ (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	08006058 	.word	0x08006058

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002174:	f7ff ffdc 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0b5b      	lsrs	r3, r3, #13
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	@ (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	08006058 	.word	0x08006058

08002198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800219c:	b0ae      	sub	sp, #184	@ 0xb8
 800219e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021be:	4bcb      	ldr	r3, [pc, #812]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	f200 8206 	bhi.w	80025d8 <HAL_RCC_GetSysClockFreq+0x440>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	08002209 	.word	0x08002209
 80021d8:	080025d9 	.word	0x080025d9
 80021dc:	080025d9 	.word	0x080025d9
 80021e0:	080025d9 	.word	0x080025d9
 80021e4:	08002211 	.word	0x08002211
 80021e8:	080025d9 	.word	0x080025d9
 80021ec:	080025d9 	.word	0x080025d9
 80021f0:	080025d9 	.word	0x080025d9
 80021f4:	08002219 	.word	0x08002219
 80021f8:	080025d9 	.word	0x080025d9
 80021fc:	080025d9 	.word	0x080025d9
 8002200:	080025d9 	.word	0x080025d9
 8002204:	08002409 	.word	0x08002409
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4bb9      	ldr	r3, [pc, #740]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800220a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800220e:	e1e7      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002210:	4bb8      	ldr	r3, [pc, #736]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002216:	e1e3      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002218:	4bb4      	ldr	r3, [pc, #720]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002224:	4bb1      	ldr	r3, [pc, #708]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d071      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002230:	4bae      	ldr	r3, [pc, #696]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	2200      	movs	r2, #0
 8002238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800223c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002248:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002256:	4622      	mov	r2, r4
 8002258:	462b      	mov	r3, r5
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	0159      	lsls	r1, r3, #5
 8002264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002268:	0150      	lsls	r0, r2, #5
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4621      	mov	r1, r4
 8002270:	1a51      	subs	r1, r2, r1
 8002272:	6439      	str	r1, [r7, #64]	@ 0x40
 8002274:	4629      	mov	r1, r5
 8002276:	eb63 0301 	sbc.w	r3, r3, r1
 800227a:	647b      	str	r3, [r7, #68]	@ 0x44
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002288:	4649      	mov	r1, r9
 800228a:	018b      	lsls	r3, r1, #6
 800228c:	4641      	mov	r1, r8
 800228e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002292:	4641      	mov	r1, r8
 8002294:	018a      	lsls	r2, r1, #6
 8002296:	4641      	mov	r1, r8
 8002298:	1a51      	subs	r1, r2, r1
 800229a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800229c:	4649      	mov	r1, r9
 800229e:	eb63 0301 	sbc.w	r3, r3, r1
 80022a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80022b0:	4649      	mov	r1, r9
 80022b2:	00cb      	lsls	r3, r1, #3
 80022b4:	4641      	mov	r1, r8
 80022b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ba:	4641      	mov	r1, r8
 80022bc:	00ca      	lsls	r2, r1, #3
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	4622      	mov	r2, r4
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022ca:	462b      	mov	r3, r5
 80022cc:	460a      	mov	r2, r1
 80022ce:	eb42 0303 	adc.w	r3, r2, r3
 80022d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022e0:	4629      	mov	r1, r5
 80022e2:	024b      	lsls	r3, r1, #9
 80022e4:	4621      	mov	r1, r4
 80022e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022ea:	4621      	mov	r1, r4
 80022ec:	024a      	lsls	r2, r1, #9
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022f6:	2200      	movs	r2, #0
 80022f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002300:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002304:	f7fe fc70 	bl	8000be8 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002312:	e067      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002314:	4b75      	ldr	r3, [pc, #468]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	2200      	movs	r2, #0
 800231c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002320:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800232e:	2300      	movs	r3, #0
 8002330:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002332:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002348:	0150      	lsls	r0, r2, #5
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4621      	mov	r1, r4
 8002350:	1a51      	subs	r1, r2, r1
 8002352:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002354:	4629      	mov	r1, r5
 8002356:	eb63 0301 	sbc.w	r3, r3, r1
 800235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002368:	4649      	mov	r1, r9
 800236a:	018b      	lsls	r3, r1, #6
 800236c:	4641      	mov	r1, r8
 800236e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002372:	4641      	mov	r1, r8
 8002374:	018a      	lsls	r2, r1, #6
 8002376:	4641      	mov	r1, r8
 8002378:	ebb2 0a01 	subs.w	sl, r2, r1
 800237c:	4649      	mov	r1, r9
 800237e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800238e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002396:	4692      	mov	sl, r2
 8002398:	469b      	mov	fp, r3
 800239a:	4623      	mov	r3, r4
 800239c:	eb1a 0303 	adds.w	r3, sl, r3
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	462b      	mov	r3, r5
 80023a4:	eb4b 0303 	adc.w	r3, fp, r3
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023b6:	4629      	mov	r1, r5
 80023b8:	028b      	lsls	r3, r1, #10
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c0:	4621      	mov	r1, r4
 80023c2:	028a      	lsls	r2, r1, #10
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023cc:	2200      	movs	r2, #0
 80023ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80023d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80023d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80023d6:	f7fe fc07 	bl	8000be8 <__aeabi_uldivmod>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4613      	mov	r3, r2
 80023e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e4:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80023f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002406:	e0eb      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002408:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002414:	4b35      	ldr	r3, [pc, #212]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d06b      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002420:	4b32      	ldr	r3, [pc, #200]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	2200      	movs	r2, #0
 8002428:	66bb      	str	r3, [r7, #104]	@ 0x68
 800242a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800242c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002432:	663b      	str	r3, [r7, #96]	@ 0x60
 8002434:	2300      	movs	r3, #0
 8002436:	667b      	str	r3, [r7, #100]	@ 0x64
 8002438:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800243c:	4622      	mov	r2, r4
 800243e:	462b      	mov	r3, r5
 8002440:	f04f 0000 	mov.w	r0, #0
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	0159      	lsls	r1, r3, #5
 800244a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244e:	0150      	lsls	r0, r2, #5
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4621      	mov	r1, r4
 8002456:	1a51      	subs	r1, r2, r1
 8002458:	61b9      	str	r1, [r7, #24]
 800245a:	4629      	mov	r1, r5
 800245c:	eb63 0301 	sbc.w	r3, r3, r1
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800246e:	4659      	mov	r1, fp
 8002470:	018b      	lsls	r3, r1, #6
 8002472:	4651      	mov	r1, sl
 8002474:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002478:	4651      	mov	r1, sl
 800247a:	018a      	lsls	r2, r1, #6
 800247c:	4651      	mov	r1, sl
 800247e:	ebb2 0801 	subs.w	r8, r2, r1
 8002482:	4659      	mov	r1, fp
 8002484:	eb63 0901 	sbc.w	r9, r3, r1
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002494:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002498:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800249c:	4690      	mov	r8, r2
 800249e:	4699      	mov	r9, r3
 80024a0:	4623      	mov	r3, r4
 80024a2:	eb18 0303 	adds.w	r3, r8, r3
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	462b      	mov	r3, r5
 80024aa:	eb49 0303 	adc.w	r3, r9, r3
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024bc:	4629      	mov	r1, r5
 80024be:	024b      	lsls	r3, r1, #9
 80024c0:	4621      	mov	r1, r4
 80024c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c6:	4621      	mov	r1, r4
 80024c8:	024a      	lsls	r2, r1, #9
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d2:	2200      	movs	r2, #0
 80024d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024dc:	f7fe fb84 	bl	8000be8 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ea:	e065      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x420>
 80024ec:	40023800 	.word	0x40023800
 80024f0:	00f42400 	.word	0x00f42400
 80024f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f8:	4b3d      	ldr	r3, [pc, #244]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	2200      	movs	r2, #0
 8002500:	4618      	mov	r0, r3
 8002502:	4611      	mov	r1, r2
 8002504:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002508:	653b      	str	r3, [r7, #80]	@ 0x50
 800250a:	2300      	movs	r3, #0
 800250c:	657b      	str	r3, [r7, #84]	@ 0x54
 800250e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002512:	4642      	mov	r2, r8
 8002514:	464b      	mov	r3, r9
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002524:	0150      	lsls	r0, r2, #5
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4641      	mov	r1, r8
 800252c:	1a51      	subs	r1, r2, r1
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	4649      	mov	r1, r9
 8002532:	eb63 0301 	sbc.w	r3, r3, r1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002544:	4659      	mov	r1, fp
 8002546:	018b      	lsls	r3, r1, #6
 8002548:	4651      	mov	r1, sl
 800254a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254e:	4651      	mov	r1, sl
 8002550:	018a      	lsls	r2, r1, #6
 8002552:	4651      	mov	r1, sl
 8002554:	1a54      	subs	r4, r2, r1
 8002556:	4659      	mov	r1, fp
 8002558:	eb63 0501 	sbc.w	r5, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	00eb      	lsls	r3, r5, #3
 8002566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800256a:	00e2      	lsls	r2, r4, #3
 800256c:	4614      	mov	r4, r2
 800256e:	461d      	mov	r5, r3
 8002570:	4643      	mov	r3, r8
 8002572:	18e3      	adds	r3, r4, r3
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	464b      	mov	r3, r9
 8002578:	eb45 0303 	adc.w	r3, r5, r3
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800258a:	4629      	mov	r1, r5
 800258c:	028b      	lsls	r3, r1, #10
 800258e:	4621      	mov	r1, r4
 8002590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002594:	4621      	mov	r1, r4
 8002596:	028a      	lsls	r2, r1, #10
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025a0:	2200      	movs	r2, #0
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025aa:	f7fe fb1d 	bl	8000be8 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4613      	mov	r3, r2
 80025b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025b8:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0f1b      	lsrs	r3, r3, #28
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80025c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025d6:	e003      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	37b8      	adds	r7, #184	@ 0xb8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	00f42400 	.word	0x00f42400

080025f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e28d      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8083 	beq.w	800271e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002618:	4b94      	ldr	r3, [pc, #592]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b04      	cmp	r3, #4
 8002622:	d019      	beq.n	8002658 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002624:	4b91      	ldr	r3, [pc, #580]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800262c:	2b08      	cmp	r3, #8
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002630:	4b8e      	ldr	r3, [pc, #568]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800263c:	d00c      	beq.n	8002658 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4b8b      	ldr	r3, [pc, #556]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d112      	bne.n	8002670 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b88      	ldr	r3, [pc, #544]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002656:	d10b      	bne.n	8002670 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b84      	ldr	r3, [pc, #528]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05b      	beq.n	800271c <HAL_RCC_OscConfig+0x124>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d157      	bne.n	800271c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e25a      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x90>
 800267a:	4b7c      	ldr	r3, [pc, #496]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7b      	ldr	r2, [pc, #492]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e01d      	b.n	80026c4 <HAL_RCC_OscConfig+0xcc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0xb4>
 8002692:	4b76      	ldr	r3, [pc, #472]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b73      	ldr	r3, [pc, #460]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a72      	ldr	r2, [pc, #456]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0xcc>
 80026ac:	4b6f      	ldr	r3, [pc, #444]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a6e      	ldr	r2, [pc, #440]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b6c      	ldr	r3, [pc, #432]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6b      	ldr	r2, [pc, #428]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f96e 	bl	80019ac <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff f96a 	bl	80019ac <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e21f      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b61      	ldr	r3, [pc, #388]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0xdc>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff f95a 	bl	80019ac <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff f956 	bl	80019ac <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e20b      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	4b57      	ldr	r3, [pc, #348]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x104>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d06f      	beq.n	800280a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800272a:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b00      	cmp	r3, #0
 8002734:	d017      	beq.n	8002766 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002736:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800273e:	2b08      	cmp	r3, #8
 8002740:	d105      	bne.n	800274e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002742:	4b4a      	ldr	r3, [pc, #296]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	4b44      	ldr	r3, [pc, #272]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x186>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e1d3      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b3b      	ldr	r3, [pc, #236]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4937      	ldr	r1, [pc, #220]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_RCC_OscConfig+0x278>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7ff f903 	bl	80019ac <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027aa:	f7ff f8ff 	bl	80019ac <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1b4      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b2b      	ldr	r3, [pc, #172]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b28      	ldr	r3, [pc, #160]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4925      	ldr	r1, [pc, #148]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCC_OscConfig+0x278>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7ff f8e2 	bl	80019ac <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f7ff f8de 	bl	80019ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e193      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d036      	beq.n	8002884 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_RCC_OscConfig+0x27c>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7ff f8c2 	bl	80019ac <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7ff f8be 	bl	80019ac <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e173      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x234>
 800284a:	e01b      	b.n	8002884 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_OscConfig+0x27c>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7ff f8ab 	bl	80019ac <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	e00e      	b.n	8002878 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285a:	f7ff f8a7 	bl	80019ac <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d907      	bls.n	8002878 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e15c      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
 800286c:	40023800 	.word	0x40023800
 8002870:	42470000 	.word	0x42470000
 8002874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002878:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 800287a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ea      	bne.n	800285a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8097 	beq.w	80029c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002896:	4b83      	ldr	r3, [pc, #524]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b79      	ldr	r3, [pc, #484]	@ (8002aa8 <HAL_RCC_OscConfig+0x4b0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b76      	ldr	r3, [pc, #472]	@ (8002aa8 <HAL_RCC_OscConfig+0x4b0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	@ (8002aa8 <HAL_RCC_OscConfig+0x4b0>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7ff f867 	bl	80019ac <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7ff f863 	bl	80019ac <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e118      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa8 <HAL_RCC_OscConfig+0x4b0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x31e>
 8002908:	4b66      	ldr	r3, [pc, #408]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a65      	ldr	r2, [pc, #404]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	@ 0x70
 8002914:	e01c      	b.n	8002950 <HAL_RCC_OscConfig+0x358>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x340>
 800291e:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	4a60      	ldr	r2, [pc, #384]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6713      	str	r3, [r2, #112]	@ 0x70
 800292a:	4b5e      	ldr	r3, [pc, #376]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292e:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	@ 0x70
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0x358>
 8002938:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	4a59      	ldr	r2, [pc, #356]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	@ 0x70
 8002944:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	4a56      	ldr	r2, [pc, #344]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7ff f828 	bl	80019ac <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7ff f824 	bl	80019ac <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0d7      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ee      	beq.n	8002960 <HAL_RCC_OscConfig+0x368>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7ff f812 	bl	80019ac <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7ff f80e 	bl	80019ac <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0c1      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a2:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ee      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	4a3a      	ldr	r2, [pc, #232]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80ad 	beq.w	8002b24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ca:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d060      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d145      	bne.n	8002a6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <HAL_RCC_OscConfig+0x4b4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe ffe2 	bl	80019ac <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe ffde 	bl	80019ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e093      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	071b      	lsls	r3, r3, #28
 8002a36:	491b      	ldr	r1, [pc, #108]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x4b4>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe ffb3 	bl	80019ac <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe ffaf 	bl	80019ac <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e064      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x452>
 8002a68:	e05c      	b.n	8002b24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <HAL_RCC_OscConfig+0x4b4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe ff9c 	bl	80019ac <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe ff98 	bl	80019ac <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e04d      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x480>
 8002a96:	e045      	b.n	8002b24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e040      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b30 <HAL_RCC_OscConfig+0x538>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d030      	beq.n	8002b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d129      	bne.n	8002b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d122      	bne.n	8002b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d119      	bne.n	8002b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d10f      	bne.n	8002b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800

08002b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e042      	b.n	8002bcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fd46 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	@ 0x24
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f973 	bl	8002e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d175      	bne.n	8002ce0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_UART_Transmit+0x2c>
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e06e      	b.n	8002ce2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2221      	movs	r2, #33	@ 0x21
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c12:	f7fe fecb 	bl	80019ac <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2c:	d108      	bne.n	8002c40 <HAL_UART_Transmit+0x6c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e003      	b.n	8002c48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c48:	e02e      	b.n	8002ca8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	2180      	movs	r1, #128	@ 0x80
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f848 	bl	8002cea <UART_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e03a      	b.n	8002ce2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	3302      	adds	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e007      	b.n	8002c9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1cb      	bne.n	8002c4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2140      	movs	r1, #64	@ 0x40
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f814 	bl	8002cea <UART_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e006      	b.n	8002ce2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfa:	e03b      	b.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d02:	d037      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe fe52 	bl	80019ac <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	6a3a      	ldr	r2, [r7, #32]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e03a      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b80      	cmp	r3, #128	@ 0x80
 8002d30:	d020      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b40      	cmp	r3, #64	@ 0x40
 8002d36:	d01d      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d116      	bne.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f81d 	bl	8002d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2208      	movs	r2, #8
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e00f      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d0b4      	beq.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b095      	sub	sp, #84	@ 0x54
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dc4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e5      	bne.n	8002da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3314      	adds	r3, #20
 8002df6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e5      	bne.n	8002dd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d119      	bne.n	8002e48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 0310 	bic.w	r3, r3, #16
 8002e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e34:	61ba      	str	r2, [r7, #24]
 8002e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e38:	6979      	ldr	r1, [r7, #20]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	613b      	str	r3, [r7, #16]
   return(result);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e5      	bne.n	8002e14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e56:	bf00      	nop
 8002e58:	3754      	adds	r7, #84	@ 0x54
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b0c0      	sub	sp, #256	@ 0x100
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	68d9      	ldr	r1, [r3, #12]
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	ea40 0301 	orr.w	r3, r0, r1
 8002e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ebc:	f021 010c 	bic.w	r1, r1, #12
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ede:	6999      	ldr	r1, [r3, #24]
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	ea40 0301 	orr.w	r3, r0, r1
 8002eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8003130 <UART_SetConfig+0x2cc>)
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d005      	beq.n	8002f04 <UART_SetConfig+0xa0>
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b8d      	ldr	r3, [pc, #564]	@ (8003134 <UART_SetConfig+0x2d0>)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d104      	bne.n	8002f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f04:	f7ff f934 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8002f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f0c:	e003      	b.n	8002f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f0e:	f7ff f91b 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8002f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f20:	f040 810c 	bne.w	800313c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f46:	4621      	mov	r1, r4
 8002f48:	eb12 0801 	adds.w	r8, r2, r1
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	eb43 0901 	adc.w	r9, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f66:	4690      	mov	r8, r2
 8002f68:	4699      	mov	r9, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb18 0303 	adds.w	r3, r8, r3
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f74:	462b      	mov	r3, r5
 8002f76:	eb49 0303 	adc.w	r3, r9, r3
 8002f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f92:	460b      	mov	r3, r1
 8002f94:	18db      	adds	r3, r3, r3
 8002f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f98:	4613      	mov	r3, r2
 8002f9a:	eb42 0303 	adc.w	r3, r2, r3
 8002f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fa8:	f7fd fe1e 	bl	8000be8 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <UART_SetConfig+0x2d4>)
 8002fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	011c      	lsls	r4, r3, #4
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	1891      	adds	r1, r2, r2
 8002fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fdc:	4641      	mov	r1, r8
 8002fde:	eb12 0a01 	adds.w	sl, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffc:	4692      	mov	sl, r2
 8002ffe:	469b      	mov	fp, r3
 8003000:	4643      	mov	r3, r8
 8003002:	eb1a 0303 	adds.w	r3, sl, r3
 8003006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800300a:	464b      	mov	r3, r9
 800300c:	eb4b 0303 	adc.w	r3, fp, r3
 8003010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003028:	460b      	mov	r3, r1
 800302a:	18db      	adds	r3, r3, r3
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
 800302e:	4613      	mov	r3, r2
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	647b      	str	r3, [r7, #68]	@ 0x44
 8003036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800303a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800303e:	f7fd fdd3 	bl	8000be8 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4611      	mov	r1, r2
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <UART_SetConfig+0x2d4>)
 800304a:	fba3 2301 	umull	r2, r3, r3, r1
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2264      	movs	r2, #100	@ 0x64
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	1acb      	subs	r3, r1, r3
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800305e:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003060:	fba3 2302 	umull	r2, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800307c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	1891      	adds	r1, r2, r2
 8003086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003088:	415b      	adcs	r3, r3
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003090:	4641      	mov	r1, r8
 8003092:	1851      	adds	r1, r2, r1
 8003094:	6339      	str	r1, [r7, #48]	@ 0x30
 8003096:	4649      	mov	r1, r9
 8003098:	414b      	adcs	r3, r1
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030a8:	4659      	mov	r1, fp
 80030aa:	00cb      	lsls	r3, r1, #3
 80030ac:	4651      	mov	r1, sl
 80030ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b2:	4651      	mov	r1, sl
 80030b4:	00ca      	lsls	r2, r1, #3
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	4642      	mov	r2, r8
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c4:	464b      	mov	r3, r9
 80030c6:	460a      	mov	r2, r1
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030e4:	460b      	mov	r3, r1
 80030e6:	18db      	adds	r3, r3, r3
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ea:	4613      	mov	r3, r2
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030fa:	f7fd fd75 	bl	8000be8 <__aeabi_uldivmod>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003104:	fba3 1302 	umull	r1, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2164      	movs	r1, #100	@ 0x64
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	@ 0x32
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <UART_SetConfig+0x2d4>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4422      	add	r2, r4
 800312a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800312c:	e106      	b.n	800333c <UART_SetConfig+0x4d8>
 800312e:	bf00      	nop
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800314a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800314e:	4642      	mov	r2, r8
 8003150:	464b      	mov	r3, r9
 8003152:	1891      	adds	r1, r2, r2
 8003154:	6239      	str	r1, [r7, #32]
 8003156:	415b      	adcs	r3, r3
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
 800315a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315e:	4641      	mov	r1, r8
 8003160:	1854      	adds	r4, r2, r1
 8003162:	4649      	mov	r1, r9
 8003164:	eb43 0501 	adc.w	r5, r3, r1
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	00eb      	lsls	r3, r5, #3
 8003172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003176:	00e2      	lsls	r2, r4, #3
 8003178:	4614      	mov	r4, r2
 800317a:	461d      	mov	r5, r3
 800317c:	4643      	mov	r3, r8
 800317e:	18e3      	adds	r3, r4, r3
 8003180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003184:	464b      	mov	r3, r9
 8003186:	eb45 0303 	adc.w	r3, r5, r3
 800318a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800319a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031aa:	4629      	mov	r1, r5
 80031ac:	008b      	lsls	r3, r1, #2
 80031ae:	4621      	mov	r1, r4
 80031b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b4:	4621      	mov	r1, r4
 80031b6:	008a      	lsls	r2, r1, #2
 80031b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031bc:	f7fd fd14 	bl	8000be8 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <UART_SetConfig+0x4e4>)
 80031c6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	011c      	lsls	r4, r3, #4
 80031ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031e0:	4642      	mov	r2, r8
 80031e2:	464b      	mov	r3, r9
 80031e4:	1891      	adds	r1, r2, r2
 80031e6:	61b9      	str	r1, [r7, #24]
 80031e8:	415b      	adcs	r3, r3
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f0:	4641      	mov	r1, r8
 80031f2:	1851      	adds	r1, r2, r1
 80031f4:	6139      	str	r1, [r7, #16]
 80031f6:	4649      	mov	r1, r9
 80031f8:	414b      	adcs	r3, r1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003208:	4659      	mov	r1, fp
 800320a:	00cb      	lsls	r3, r1, #3
 800320c:	4651      	mov	r1, sl
 800320e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003212:	4651      	mov	r1, sl
 8003214:	00ca      	lsls	r2, r1, #3
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	4603      	mov	r3, r0
 800321c:	4642      	mov	r2, r8
 800321e:	189b      	adds	r3, r3, r2
 8003220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003224:	464b      	mov	r3, r9
 8003226:	460a      	mov	r2, r1
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800323a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003248:	4649      	mov	r1, r9
 800324a:	008b      	lsls	r3, r1, #2
 800324c:	4641      	mov	r1, r8
 800324e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003252:	4641      	mov	r1, r8
 8003254:	008a      	lsls	r2, r1, #2
 8003256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800325a:	f7fd fcc5 	bl	8000be8 <__aeabi_uldivmod>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4611      	mov	r1, r2
 8003264:	4b38      	ldr	r3, [pc, #224]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003266:	fba3 2301 	umull	r2, r3, r3, r1
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2264      	movs	r2, #100	@ 0x64
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	1acb      	subs	r3, r1, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	@ 0x32
 8003278:	4a33      	ldr	r2, [pc, #204]	@ (8003348 <UART_SetConfig+0x4e4>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003284:	441c      	add	r4, r3
 8003286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800328a:	2200      	movs	r2, #0
 800328c:	673b      	str	r3, [r7, #112]	@ 0x70
 800328e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	1891      	adds	r1, r2, r2
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	415b      	adcs	r3, r3
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a4:	4641      	mov	r1, r8
 80032a6:	1851      	adds	r1, r2, r1
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	4649      	mov	r1, r9
 80032ac:	414b      	adcs	r3, r1
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032bc:	4659      	mov	r1, fp
 80032be:	00cb      	lsls	r3, r1, #3
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c6:	4651      	mov	r1, sl
 80032c8:	00ca      	lsls	r2, r1, #3
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	4642      	mov	r2, r8
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032d6:	464b      	mov	r3, r9
 80032d8:	460a      	mov	r2, r1
 80032da:	eb42 0303 	adc.w	r3, r2, r3
 80032de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032f8:	4649      	mov	r1, r9
 80032fa:	008b      	lsls	r3, r1, #2
 80032fc:	4641      	mov	r1, r8
 80032fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003302:	4641      	mov	r1, r8
 8003304:	008a      	lsls	r2, r1, #2
 8003306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800330a:	f7fd fc6d 	bl	8000be8 <__aeabi_uldivmod>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003314:	fba3 1302 	umull	r1, r3, r3, r2
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	2164      	movs	r1, #100	@ 0x64
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	3332      	adds	r3, #50	@ 0x32
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <UART_SetConfig+0x4e4>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4422      	add	r2, r4
 800333a:	609a      	str	r2, [r3, #8]
}
 800333c:	bf00      	nop
 800333e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003342:	46bd      	mov	sp, r7
 8003344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003348:	51eb851f 	.word	0x51eb851f

0800334c <__cvt>:
 800334c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003350:	ec57 6b10 	vmov	r6, r7, d0
 8003354:	2f00      	cmp	r7, #0
 8003356:	460c      	mov	r4, r1
 8003358:	4619      	mov	r1, r3
 800335a:	463b      	mov	r3, r7
 800335c:	bfbb      	ittet	lt
 800335e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003362:	461f      	movlt	r7, r3
 8003364:	2300      	movge	r3, #0
 8003366:	232d      	movlt	r3, #45	@ 0x2d
 8003368:	700b      	strb	r3, [r1, #0]
 800336a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800336c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003370:	4691      	mov	r9, r2
 8003372:	f023 0820 	bic.w	r8, r3, #32
 8003376:	bfbc      	itt	lt
 8003378:	4632      	movlt	r2, r6
 800337a:	4616      	movlt	r6, r2
 800337c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003380:	d005      	beq.n	800338e <__cvt+0x42>
 8003382:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003386:	d100      	bne.n	800338a <__cvt+0x3e>
 8003388:	3401      	adds	r4, #1
 800338a:	2102      	movs	r1, #2
 800338c:	e000      	b.n	8003390 <__cvt+0x44>
 800338e:	2103      	movs	r1, #3
 8003390:	ab03      	add	r3, sp, #12
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	ab02      	add	r3, sp, #8
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	ec47 6b10 	vmov	d0, r6, r7
 800339c:	4653      	mov	r3, sl
 800339e:	4622      	mov	r2, r4
 80033a0:	f000 fdd2 	bl	8003f48 <_dtoa_r>
 80033a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033a8:	4605      	mov	r5, r0
 80033aa:	d119      	bne.n	80033e0 <__cvt+0x94>
 80033ac:	f019 0f01 	tst.w	r9, #1
 80033b0:	d00e      	beq.n	80033d0 <__cvt+0x84>
 80033b2:	eb00 0904 	add.w	r9, r0, r4
 80033b6:	2200      	movs	r2, #0
 80033b8:	2300      	movs	r3, #0
 80033ba:	4630      	mov	r0, r6
 80033bc:	4639      	mov	r1, r7
 80033be:	f7fd fba3 	bl	8000b08 <__aeabi_dcmpeq>
 80033c2:	b108      	cbz	r0, 80033c8 <__cvt+0x7c>
 80033c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80033c8:	2230      	movs	r2, #48	@ 0x30
 80033ca:	9b03      	ldr	r3, [sp, #12]
 80033cc:	454b      	cmp	r3, r9
 80033ce:	d31e      	bcc.n	800340e <__cvt+0xc2>
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033d4:	1b5b      	subs	r3, r3, r5
 80033d6:	4628      	mov	r0, r5
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	b004      	add	sp, #16
 80033dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033e4:	eb00 0904 	add.w	r9, r0, r4
 80033e8:	d1e5      	bne.n	80033b6 <__cvt+0x6a>
 80033ea:	7803      	ldrb	r3, [r0, #0]
 80033ec:	2b30      	cmp	r3, #48	@ 0x30
 80033ee:	d10a      	bne.n	8003406 <__cvt+0xba>
 80033f0:	2200      	movs	r2, #0
 80033f2:	2300      	movs	r3, #0
 80033f4:	4630      	mov	r0, r6
 80033f6:	4639      	mov	r1, r7
 80033f8:	f7fd fb86 	bl	8000b08 <__aeabi_dcmpeq>
 80033fc:	b918      	cbnz	r0, 8003406 <__cvt+0xba>
 80033fe:	f1c4 0401 	rsb	r4, r4, #1
 8003402:	f8ca 4000 	str.w	r4, [sl]
 8003406:	f8da 3000 	ldr.w	r3, [sl]
 800340a:	4499      	add	r9, r3
 800340c:	e7d3      	b.n	80033b6 <__cvt+0x6a>
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	9103      	str	r1, [sp, #12]
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e7d9      	b.n	80033ca <__cvt+0x7e>

08003416 <__exponent>:
 8003416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003418:	2900      	cmp	r1, #0
 800341a:	bfba      	itte	lt
 800341c:	4249      	neglt	r1, r1
 800341e:	232d      	movlt	r3, #45	@ 0x2d
 8003420:	232b      	movge	r3, #43	@ 0x2b
 8003422:	2909      	cmp	r1, #9
 8003424:	7002      	strb	r2, [r0, #0]
 8003426:	7043      	strb	r3, [r0, #1]
 8003428:	dd29      	ble.n	800347e <__exponent+0x68>
 800342a:	f10d 0307 	add.w	r3, sp, #7
 800342e:	461d      	mov	r5, r3
 8003430:	270a      	movs	r7, #10
 8003432:	461a      	mov	r2, r3
 8003434:	fbb1 f6f7 	udiv	r6, r1, r7
 8003438:	fb07 1416 	mls	r4, r7, r6, r1
 800343c:	3430      	adds	r4, #48	@ 0x30
 800343e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003442:	460c      	mov	r4, r1
 8003444:	2c63      	cmp	r4, #99	@ 0x63
 8003446:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800344a:	4631      	mov	r1, r6
 800344c:	dcf1      	bgt.n	8003432 <__exponent+0x1c>
 800344e:	3130      	adds	r1, #48	@ 0x30
 8003450:	1e94      	subs	r4, r2, #2
 8003452:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003456:	1c41      	adds	r1, r0, #1
 8003458:	4623      	mov	r3, r4
 800345a:	42ab      	cmp	r3, r5
 800345c:	d30a      	bcc.n	8003474 <__exponent+0x5e>
 800345e:	f10d 0309 	add.w	r3, sp, #9
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	42ac      	cmp	r4, r5
 8003466:	bf88      	it	hi
 8003468:	2300      	movhi	r3, #0
 800346a:	3302      	adds	r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	1a18      	subs	r0, r3, r0
 8003470:	b003      	add	sp, #12
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003474:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003478:	f801 6f01 	strb.w	r6, [r1, #1]!
 800347c:	e7ed      	b.n	800345a <__exponent+0x44>
 800347e:	2330      	movs	r3, #48	@ 0x30
 8003480:	3130      	adds	r1, #48	@ 0x30
 8003482:	7083      	strb	r3, [r0, #2]
 8003484:	70c1      	strb	r1, [r0, #3]
 8003486:	1d03      	adds	r3, r0, #4
 8003488:	e7f1      	b.n	800346e <__exponent+0x58>
	...

0800348c <_printf_float>:
 800348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	b08d      	sub	sp, #52	@ 0x34
 8003492:	460c      	mov	r4, r1
 8003494:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003498:	4616      	mov	r6, r2
 800349a:	461f      	mov	r7, r3
 800349c:	4605      	mov	r5, r0
 800349e:	f000 fc97 	bl	8003dd0 <_localeconv_r>
 80034a2:	6803      	ldr	r3, [r0, #0]
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc ff02 	bl	80002b0 <strlen>
 80034ac:	2300      	movs	r3, #0
 80034ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80034b0:	f8d8 3000 	ldr.w	r3, [r8]
 80034b4:	9005      	str	r0, [sp, #20]
 80034b6:	3307      	adds	r3, #7
 80034b8:	f023 0307 	bic.w	r3, r3, #7
 80034bc:	f103 0208 	add.w	r2, r3, #8
 80034c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80034c4:	f8d4 b000 	ldr.w	fp, [r4]
 80034c8:	f8c8 2000 	str.w	r2, [r8]
 80034cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80034d4:	9307      	str	r3, [sp, #28]
 80034d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80034da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80034de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003754 <_printf_float+0x2c8>)
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034e8:	f7fd fb40 	bl	8000b6c <__aeabi_dcmpun>
 80034ec:	bb70      	cbnz	r0, 800354c <_printf_float+0xc0>
 80034ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034f2:	4b98      	ldr	r3, [pc, #608]	@ (8003754 <_printf_float+0x2c8>)
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034f8:	f7fd fb1a 	bl	8000b30 <__aeabi_dcmple>
 80034fc:	bb30      	cbnz	r0, 800354c <_printf_float+0xc0>
 80034fe:	2200      	movs	r2, #0
 8003500:	2300      	movs	r3, #0
 8003502:	4640      	mov	r0, r8
 8003504:	4649      	mov	r1, r9
 8003506:	f7fd fb09 	bl	8000b1c <__aeabi_dcmplt>
 800350a:	b110      	cbz	r0, 8003512 <_printf_float+0x86>
 800350c:	232d      	movs	r3, #45	@ 0x2d
 800350e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003512:	4a91      	ldr	r2, [pc, #580]	@ (8003758 <_printf_float+0x2cc>)
 8003514:	4b91      	ldr	r3, [pc, #580]	@ (800375c <_printf_float+0x2d0>)
 8003516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800351a:	bf94      	ite	ls
 800351c:	4690      	movls	r8, r2
 800351e:	4698      	movhi	r8, r3
 8003520:	2303      	movs	r3, #3
 8003522:	6123      	str	r3, [r4, #16]
 8003524:	f02b 0304 	bic.w	r3, fp, #4
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	f04f 0900 	mov.w	r9, #0
 800352e:	9700      	str	r7, [sp, #0]
 8003530:	4633      	mov	r3, r6
 8003532:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003534:	4621      	mov	r1, r4
 8003536:	4628      	mov	r0, r5
 8003538:	f000 f9d2 	bl	80038e0 <_printf_common>
 800353c:	3001      	adds	r0, #1
 800353e:	f040 808d 	bne.w	800365c <_printf_float+0x1d0>
 8003542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003546:	b00d      	add	sp, #52	@ 0x34
 8003548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	4640      	mov	r0, r8
 8003552:	4649      	mov	r1, r9
 8003554:	f7fd fb0a 	bl	8000b6c <__aeabi_dcmpun>
 8003558:	b140      	cbz	r0, 800356c <_printf_float+0xe0>
 800355a:	464b      	mov	r3, r9
 800355c:	2b00      	cmp	r3, #0
 800355e:	bfbc      	itt	lt
 8003560:	232d      	movlt	r3, #45	@ 0x2d
 8003562:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003566:	4a7e      	ldr	r2, [pc, #504]	@ (8003760 <_printf_float+0x2d4>)
 8003568:	4b7e      	ldr	r3, [pc, #504]	@ (8003764 <_printf_float+0x2d8>)
 800356a:	e7d4      	b.n	8003516 <_printf_float+0x8a>
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003572:	9206      	str	r2, [sp, #24]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	d13b      	bne.n	80035f0 <_printf_float+0x164>
 8003578:	2306      	movs	r3, #6
 800357a:	6063      	str	r3, [r4, #4]
 800357c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003580:	2300      	movs	r3, #0
 8003582:	6022      	str	r2, [r4, #0]
 8003584:	9303      	str	r3, [sp, #12]
 8003586:	ab0a      	add	r3, sp, #40	@ 0x28
 8003588:	e9cd a301 	strd	sl, r3, [sp, #4]
 800358c:	ab09      	add	r3, sp, #36	@ 0x24
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	6861      	ldr	r1, [r4, #4]
 8003592:	ec49 8b10 	vmov	d0, r8, r9
 8003596:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800359a:	4628      	mov	r0, r5
 800359c:	f7ff fed6 	bl	800334c <__cvt>
 80035a0:	9b06      	ldr	r3, [sp, #24]
 80035a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80035a4:	2b47      	cmp	r3, #71	@ 0x47
 80035a6:	4680      	mov	r8, r0
 80035a8:	d129      	bne.n	80035fe <_printf_float+0x172>
 80035aa:	1cc8      	adds	r0, r1, #3
 80035ac:	db02      	blt.n	80035b4 <_printf_float+0x128>
 80035ae:	6863      	ldr	r3, [r4, #4]
 80035b0:	4299      	cmp	r1, r3
 80035b2:	dd41      	ble.n	8003638 <_printf_float+0x1ac>
 80035b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80035b8:	fa5f fa8a 	uxtb.w	sl, sl
 80035bc:	3901      	subs	r1, #1
 80035be:	4652      	mov	r2, sl
 80035c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80035c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80035c6:	f7ff ff26 	bl	8003416 <__exponent>
 80035ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035cc:	1813      	adds	r3, r2, r0
 80035ce:	2a01      	cmp	r2, #1
 80035d0:	4681      	mov	r9, r0
 80035d2:	6123      	str	r3, [r4, #16]
 80035d4:	dc02      	bgt.n	80035dc <_printf_float+0x150>
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	07d2      	lsls	r2, r2, #31
 80035da:	d501      	bpl.n	80035e0 <_printf_float+0x154>
 80035dc:	3301      	adds	r3, #1
 80035de:	6123      	str	r3, [r4, #16]
 80035e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0a2      	beq.n	800352e <_printf_float+0xa2>
 80035e8:	232d      	movs	r3, #45	@ 0x2d
 80035ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035ee:	e79e      	b.n	800352e <_printf_float+0xa2>
 80035f0:	9a06      	ldr	r2, [sp, #24]
 80035f2:	2a47      	cmp	r2, #71	@ 0x47
 80035f4:	d1c2      	bne.n	800357c <_printf_float+0xf0>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1c0      	bne.n	800357c <_printf_float+0xf0>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e7bd      	b.n	800357a <_printf_float+0xee>
 80035fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003602:	d9db      	bls.n	80035bc <_printf_float+0x130>
 8003604:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003608:	d118      	bne.n	800363c <_printf_float+0x1b0>
 800360a:	2900      	cmp	r1, #0
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	dd0b      	ble.n	8003628 <_printf_float+0x19c>
 8003610:	6121      	str	r1, [r4, #16]
 8003612:	b913      	cbnz	r3, 800361a <_printf_float+0x18e>
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	07d0      	lsls	r0, r2, #31
 8003618:	d502      	bpl.n	8003620 <_printf_float+0x194>
 800361a:	3301      	adds	r3, #1
 800361c:	440b      	add	r3, r1
 800361e:	6123      	str	r3, [r4, #16]
 8003620:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003622:	f04f 0900 	mov.w	r9, #0
 8003626:	e7db      	b.n	80035e0 <_printf_float+0x154>
 8003628:	b913      	cbnz	r3, 8003630 <_printf_float+0x1a4>
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	07d2      	lsls	r2, r2, #31
 800362e:	d501      	bpl.n	8003634 <_printf_float+0x1a8>
 8003630:	3302      	adds	r3, #2
 8003632:	e7f4      	b.n	800361e <_printf_float+0x192>
 8003634:	2301      	movs	r3, #1
 8003636:	e7f2      	b.n	800361e <_printf_float+0x192>
 8003638:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800363c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800363e:	4299      	cmp	r1, r3
 8003640:	db05      	blt.n	800364e <_printf_float+0x1c2>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	6121      	str	r1, [r4, #16]
 8003646:	07d8      	lsls	r0, r3, #31
 8003648:	d5ea      	bpl.n	8003620 <_printf_float+0x194>
 800364a:	1c4b      	adds	r3, r1, #1
 800364c:	e7e7      	b.n	800361e <_printf_float+0x192>
 800364e:	2900      	cmp	r1, #0
 8003650:	bfd4      	ite	le
 8003652:	f1c1 0202 	rsble	r2, r1, #2
 8003656:	2201      	movgt	r2, #1
 8003658:	4413      	add	r3, r2
 800365a:	e7e0      	b.n	800361e <_printf_float+0x192>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	055a      	lsls	r2, r3, #21
 8003660:	d407      	bmi.n	8003672 <_printf_float+0x1e6>
 8003662:	6923      	ldr	r3, [r4, #16]
 8003664:	4642      	mov	r2, r8
 8003666:	4631      	mov	r1, r6
 8003668:	4628      	mov	r0, r5
 800366a:	47b8      	blx	r7
 800366c:	3001      	adds	r0, #1
 800366e:	d12b      	bne.n	80036c8 <_printf_float+0x23c>
 8003670:	e767      	b.n	8003542 <_printf_float+0xb6>
 8003672:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003676:	f240 80dd 	bls.w	8003834 <_printf_float+0x3a8>
 800367a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800367e:	2200      	movs	r2, #0
 8003680:	2300      	movs	r3, #0
 8003682:	f7fd fa41 	bl	8000b08 <__aeabi_dcmpeq>
 8003686:	2800      	cmp	r0, #0
 8003688:	d033      	beq.n	80036f2 <_printf_float+0x266>
 800368a:	4a37      	ldr	r2, [pc, #220]	@ (8003768 <_printf_float+0x2dc>)
 800368c:	2301      	movs	r3, #1
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	f43f af54 	beq.w	8003542 <_printf_float+0xb6>
 800369a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800369e:	4543      	cmp	r3, r8
 80036a0:	db02      	blt.n	80036a8 <_printf_float+0x21c>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	07d8      	lsls	r0, r3, #31
 80036a6:	d50f      	bpl.n	80036c8 <_printf_float+0x23c>
 80036a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036ac:	4631      	mov	r1, r6
 80036ae:	4628      	mov	r0, r5
 80036b0:	47b8      	blx	r7
 80036b2:	3001      	adds	r0, #1
 80036b4:	f43f af45 	beq.w	8003542 <_printf_float+0xb6>
 80036b8:	f04f 0900 	mov.w	r9, #0
 80036bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80036c0:	f104 0a1a 	add.w	sl, r4, #26
 80036c4:	45c8      	cmp	r8, r9
 80036c6:	dc09      	bgt.n	80036dc <_printf_float+0x250>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	079b      	lsls	r3, r3, #30
 80036cc:	f100 8103 	bmi.w	80038d6 <_printf_float+0x44a>
 80036d0:	68e0      	ldr	r0, [r4, #12]
 80036d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036d4:	4298      	cmp	r0, r3
 80036d6:	bfb8      	it	lt
 80036d8:	4618      	movlt	r0, r3
 80036da:	e734      	b.n	8003546 <_printf_float+0xba>
 80036dc:	2301      	movs	r3, #1
 80036de:	4652      	mov	r2, sl
 80036e0:	4631      	mov	r1, r6
 80036e2:	4628      	mov	r0, r5
 80036e4:	47b8      	blx	r7
 80036e6:	3001      	adds	r0, #1
 80036e8:	f43f af2b 	beq.w	8003542 <_printf_float+0xb6>
 80036ec:	f109 0901 	add.w	r9, r9, #1
 80036f0:	e7e8      	b.n	80036c4 <_printf_float+0x238>
 80036f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dc39      	bgt.n	800376c <_printf_float+0x2e0>
 80036f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <_printf_float+0x2dc>)
 80036fa:	2301      	movs	r3, #1
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	47b8      	blx	r7
 8003702:	3001      	adds	r0, #1
 8003704:	f43f af1d 	beq.w	8003542 <_printf_float+0xb6>
 8003708:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800370c:	ea59 0303 	orrs.w	r3, r9, r3
 8003710:	d102      	bne.n	8003718 <_printf_float+0x28c>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	07d9      	lsls	r1, r3, #31
 8003716:	d5d7      	bpl.n	80036c8 <_printf_float+0x23c>
 8003718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800371c:	4631      	mov	r1, r6
 800371e:	4628      	mov	r0, r5
 8003720:	47b8      	blx	r7
 8003722:	3001      	adds	r0, #1
 8003724:	f43f af0d 	beq.w	8003542 <_printf_float+0xb6>
 8003728:	f04f 0a00 	mov.w	sl, #0
 800372c:	f104 0b1a 	add.w	fp, r4, #26
 8003730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003732:	425b      	negs	r3, r3
 8003734:	4553      	cmp	r3, sl
 8003736:	dc01      	bgt.n	800373c <_printf_float+0x2b0>
 8003738:	464b      	mov	r3, r9
 800373a:	e793      	b.n	8003664 <_printf_float+0x1d8>
 800373c:	2301      	movs	r3, #1
 800373e:	465a      	mov	r2, fp
 8003740:	4631      	mov	r1, r6
 8003742:	4628      	mov	r0, r5
 8003744:	47b8      	blx	r7
 8003746:	3001      	adds	r0, #1
 8003748:	f43f aefb 	beq.w	8003542 <_printf_float+0xb6>
 800374c:	f10a 0a01 	add.w	sl, sl, #1
 8003750:	e7ee      	b.n	8003730 <_printf_float+0x2a4>
 8003752:	bf00      	nop
 8003754:	7fefffff 	.word	0x7fefffff
 8003758:	08006060 	.word	0x08006060
 800375c:	08006064 	.word	0x08006064
 8003760:	08006068 	.word	0x08006068
 8003764:	0800606c 	.word	0x0800606c
 8003768:	08006070 	.word	0x08006070
 800376c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800376e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003772:	4553      	cmp	r3, sl
 8003774:	bfa8      	it	ge
 8003776:	4653      	movge	r3, sl
 8003778:	2b00      	cmp	r3, #0
 800377a:	4699      	mov	r9, r3
 800377c:	dc36      	bgt.n	80037ec <_printf_float+0x360>
 800377e:	f04f 0b00 	mov.w	fp, #0
 8003782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003786:	f104 021a 	add.w	r2, r4, #26
 800378a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800378c:	9306      	str	r3, [sp, #24]
 800378e:	eba3 0309 	sub.w	r3, r3, r9
 8003792:	455b      	cmp	r3, fp
 8003794:	dc31      	bgt.n	80037fa <_printf_float+0x36e>
 8003796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003798:	459a      	cmp	sl, r3
 800379a:	dc3a      	bgt.n	8003812 <_printf_float+0x386>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	07da      	lsls	r2, r3, #31
 80037a0:	d437      	bmi.n	8003812 <_printf_float+0x386>
 80037a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037a4:	ebaa 0903 	sub.w	r9, sl, r3
 80037a8:	9b06      	ldr	r3, [sp, #24]
 80037aa:	ebaa 0303 	sub.w	r3, sl, r3
 80037ae:	4599      	cmp	r9, r3
 80037b0:	bfa8      	it	ge
 80037b2:	4699      	movge	r9, r3
 80037b4:	f1b9 0f00 	cmp.w	r9, #0
 80037b8:	dc33      	bgt.n	8003822 <_printf_float+0x396>
 80037ba:	f04f 0800 	mov.w	r8, #0
 80037be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037c2:	f104 0b1a 	add.w	fp, r4, #26
 80037c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037c8:	ebaa 0303 	sub.w	r3, sl, r3
 80037cc:	eba3 0309 	sub.w	r3, r3, r9
 80037d0:	4543      	cmp	r3, r8
 80037d2:	f77f af79 	ble.w	80036c8 <_printf_float+0x23c>
 80037d6:	2301      	movs	r3, #1
 80037d8:	465a      	mov	r2, fp
 80037da:	4631      	mov	r1, r6
 80037dc:	4628      	mov	r0, r5
 80037de:	47b8      	blx	r7
 80037e0:	3001      	adds	r0, #1
 80037e2:	f43f aeae 	beq.w	8003542 <_printf_float+0xb6>
 80037e6:	f108 0801 	add.w	r8, r8, #1
 80037ea:	e7ec      	b.n	80037c6 <_printf_float+0x33a>
 80037ec:	4642      	mov	r2, r8
 80037ee:	4631      	mov	r1, r6
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b8      	blx	r7
 80037f4:	3001      	adds	r0, #1
 80037f6:	d1c2      	bne.n	800377e <_printf_float+0x2f2>
 80037f8:	e6a3      	b.n	8003542 <_printf_float+0xb6>
 80037fa:	2301      	movs	r3, #1
 80037fc:	4631      	mov	r1, r6
 80037fe:	4628      	mov	r0, r5
 8003800:	9206      	str	r2, [sp, #24]
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	f43f ae9c 	beq.w	8003542 <_printf_float+0xb6>
 800380a:	9a06      	ldr	r2, [sp, #24]
 800380c:	f10b 0b01 	add.w	fp, fp, #1
 8003810:	e7bb      	b.n	800378a <_printf_float+0x2fe>
 8003812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003816:	4631      	mov	r1, r6
 8003818:	4628      	mov	r0, r5
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	d1c0      	bne.n	80037a2 <_printf_float+0x316>
 8003820:	e68f      	b.n	8003542 <_printf_float+0xb6>
 8003822:	9a06      	ldr	r2, [sp, #24]
 8003824:	464b      	mov	r3, r9
 8003826:	4442      	add	r2, r8
 8003828:	4631      	mov	r1, r6
 800382a:	4628      	mov	r0, r5
 800382c:	47b8      	blx	r7
 800382e:	3001      	adds	r0, #1
 8003830:	d1c3      	bne.n	80037ba <_printf_float+0x32e>
 8003832:	e686      	b.n	8003542 <_printf_float+0xb6>
 8003834:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003838:	f1ba 0f01 	cmp.w	sl, #1
 800383c:	dc01      	bgt.n	8003842 <_printf_float+0x3b6>
 800383e:	07db      	lsls	r3, r3, #31
 8003840:	d536      	bpl.n	80038b0 <_printf_float+0x424>
 8003842:	2301      	movs	r3, #1
 8003844:	4642      	mov	r2, r8
 8003846:	4631      	mov	r1, r6
 8003848:	4628      	mov	r0, r5
 800384a:	47b8      	blx	r7
 800384c:	3001      	adds	r0, #1
 800384e:	f43f ae78 	beq.w	8003542 <_printf_float+0xb6>
 8003852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003856:	4631      	mov	r1, r6
 8003858:	4628      	mov	r0, r5
 800385a:	47b8      	blx	r7
 800385c:	3001      	adds	r0, #1
 800385e:	f43f ae70 	beq.w	8003542 <_printf_float+0xb6>
 8003862:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003866:	2200      	movs	r2, #0
 8003868:	2300      	movs	r3, #0
 800386a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800386e:	f7fd f94b 	bl	8000b08 <__aeabi_dcmpeq>
 8003872:	b9c0      	cbnz	r0, 80038a6 <_printf_float+0x41a>
 8003874:	4653      	mov	r3, sl
 8003876:	f108 0201 	add.w	r2, r8, #1
 800387a:	4631      	mov	r1, r6
 800387c:	4628      	mov	r0, r5
 800387e:	47b8      	blx	r7
 8003880:	3001      	adds	r0, #1
 8003882:	d10c      	bne.n	800389e <_printf_float+0x412>
 8003884:	e65d      	b.n	8003542 <_printf_float+0xb6>
 8003886:	2301      	movs	r3, #1
 8003888:	465a      	mov	r2, fp
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	f43f ae56 	beq.w	8003542 <_printf_float+0xb6>
 8003896:	f108 0801 	add.w	r8, r8, #1
 800389a:	45d0      	cmp	r8, sl
 800389c:	dbf3      	blt.n	8003886 <_printf_float+0x3fa>
 800389e:	464b      	mov	r3, r9
 80038a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038a4:	e6df      	b.n	8003666 <_printf_float+0x1da>
 80038a6:	f04f 0800 	mov.w	r8, #0
 80038aa:	f104 0b1a 	add.w	fp, r4, #26
 80038ae:	e7f4      	b.n	800389a <_printf_float+0x40e>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4642      	mov	r2, r8
 80038b4:	e7e1      	b.n	800387a <_printf_float+0x3ee>
 80038b6:	2301      	movs	r3, #1
 80038b8:	464a      	mov	r2, r9
 80038ba:	4631      	mov	r1, r6
 80038bc:	4628      	mov	r0, r5
 80038be:	47b8      	blx	r7
 80038c0:	3001      	adds	r0, #1
 80038c2:	f43f ae3e 	beq.w	8003542 <_printf_float+0xb6>
 80038c6:	f108 0801 	add.w	r8, r8, #1
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80038ce:	1a5b      	subs	r3, r3, r1
 80038d0:	4543      	cmp	r3, r8
 80038d2:	dcf0      	bgt.n	80038b6 <_printf_float+0x42a>
 80038d4:	e6fc      	b.n	80036d0 <_printf_float+0x244>
 80038d6:	f04f 0800 	mov.w	r8, #0
 80038da:	f104 0919 	add.w	r9, r4, #25
 80038de:	e7f4      	b.n	80038ca <_printf_float+0x43e>

080038e0 <_printf_common>:
 80038e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	4616      	mov	r6, r2
 80038e6:	4698      	mov	r8, r3
 80038e8:	688a      	ldr	r2, [r1, #8]
 80038ea:	690b      	ldr	r3, [r1, #16]
 80038ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	bfb8      	it	lt
 80038f4:	4613      	movlt	r3, r2
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038fc:	4607      	mov	r7, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	b10a      	cbz	r2, 8003906 <_printf_common+0x26>
 8003902:	3301      	adds	r3, #1
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	0699      	lsls	r1, r3, #26
 800390a:	bf42      	ittt	mi
 800390c:	6833      	ldrmi	r3, [r6, #0]
 800390e:	3302      	addmi	r3, #2
 8003910:	6033      	strmi	r3, [r6, #0]
 8003912:	6825      	ldr	r5, [r4, #0]
 8003914:	f015 0506 	ands.w	r5, r5, #6
 8003918:	d106      	bne.n	8003928 <_printf_common+0x48>
 800391a:	f104 0a19 	add.w	sl, r4, #25
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	6832      	ldr	r2, [r6, #0]
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	42ab      	cmp	r3, r5
 8003926:	dc26      	bgt.n	8003976 <_printf_common+0x96>
 8003928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800392c:	6822      	ldr	r2, [r4, #0]
 800392e:	3b00      	subs	r3, #0
 8003930:	bf18      	it	ne
 8003932:	2301      	movne	r3, #1
 8003934:	0692      	lsls	r2, r2, #26
 8003936:	d42b      	bmi.n	8003990 <_printf_common+0xb0>
 8003938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800393c:	4641      	mov	r1, r8
 800393e:	4638      	mov	r0, r7
 8003940:	47c8      	blx	r9
 8003942:	3001      	adds	r0, #1
 8003944:	d01e      	beq.n	8003984 <_printf_common+0xa4>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	6922      	ldr	r2, [r4, #16]
 800394a:	f003 0306 	and.w	r3, r3, #6
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf02      	ittt	eq
 8003952:	68e5      	ldreq	r5, [r4, #12]
 8003954:	6833      	ldreq	r3, [r6, #0]
 8003956:	1aed      	subeq	r5, r5, r3
 8003958:	68a3      	ldr	r3, [r4, #8]
 800395a:	bf0c      	ite	eq
 800395c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003960:	2500      	movne	r5, #0
 8003962:	4293      	cmp	r3, r2
 8003964:	bfc4      	itt	gt
 8003966:	1a9b      	subgt	r3, r3, r2
 8003968:	18ed      	addgt	r5, r5, r3
 800396a:	2600      	movs	r6, #0
 800396c:	341a      	adds	r4, #26
 800396e:	42b5      	cmp	r5, r6
 8003970:	d11a      	bne.n	80039a8 <_printf_common+0xc8>
 8003972:	2000      	movs	r0, #0
 8003974:	e008      	b.n	8003988 <_printf_common+0xa8>
 8003976:	2301      	movs	r3, #1
 8003978:	4652      	mov	r2, sl
 800397a:	4641      	mov	r1, r8
 800397c:	4638      	mov	r0, r7
 800397e:	47c8      	blx	r9
 8003980:	3001      	adds	r0, #1
 8003982:	d103      	bne.n	800398c <_printf_common+0xac>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398c:	3501      	adds	r5, #1
 800398e:	e7c6      	b.n	800391e <_printf_common+0x3e>
 8003990:	18e1      	adds	r1, r4, r3
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	2030      	movs	r0, #48	@ 0x30
 8003996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800399a:	4422      	add	r2, r4
 800399c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039a4:	3302      	adds	r3, #2
 80039a6:	e7c7      	b.n	8003938 <_printf_common+0x58>
 80039a8:	2301      	movs	r3, #1
 80039aa:	4622      	mov	r2, r4
 80039ac:	4641      	mov	r1, r8
 80039ae:	4638      	mov	r0, r7
 80039b0:	47c8      	blx	r9
 80039b2:	3001      	adds	r0, #1
 80039b4:	d0e6      	beq.n	8003984 <_printf_common+0xa4>
 80039b6:	3601      	adds	r6, #1
 80039b8:	e7d9      	b.n	800396e <_printf_common+0x8e>
	...

080039bc <_printf_i>:
 80039bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c0:	7e0f      	ldrb	r7, [r1, #24]
 80039c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039c4:	2f78      	cmp	r7, #120	@ 0x78
 80039c6:	4691      	mov	r9, r2
 80039c8:	4680      	mov	r8, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	469a      	mov	sl, r3
 80039ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039d2:	d807      	bhi.n	80039e4 <_printf_i+0x28>
 80039d4:	2f62      	cmp	r7, #98	@ 0x62
 80039d6:	d80a      	bhi.n	80039ee <_printf_i+0x32>
 80039d8:	2f00      	cmp	r7, #0
 80039da:	f000 80d2 	beq.w	8003b82 <_printf_i+0x1c6>
 80039de:	2f58      	cmp	r7, #88	@ 0x58
 80039e0:	f000 80b9 	beq.w	8003b56 <_printf_i+0x19a>
 80039e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039ec:	e03a      	b.n	8003a64 <_printf_i+0xa8>
 80039ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039f2:	2b15      	cmp	r3, #21
 80039f4:	d8f6      	bhi.n	80039e4 <_printf_i+0x28>
 80039f6:	a101      	add	r1, pc, #4	@ (adr r1, 80039fc <_printf_i+0x40>)
 80039f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a69 	.word	0x08003a69
 8003a04:	080039e5 	.word	0x080039e5
 8003a08:	080039e5 	.word	0x080039e5
 8003a0c:	080039e5 	.word	0x080039e5
 8003a10:	080039e5 	.word	0x080039e5
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	080039e5 	.word	0x080039e5
 8003a1c:	080039e5 	.word	0x080039e5
 8003a20:	080039e5 	.word	0x080039e5
 8003a24:	080039e5 	.word	0x080039e5
 8003a28:	08003b69 	.word	0x08003b69
 8003a2c:	08003a93 	.word	0x08003a93
 8003a30:	08003b23 	.word	0x08003b23
 8003a34:	080039e5 	.word	0x080039e5
 8003a38:	080039e5 	.word	0x080039e5
 8003a3c:	08003b8b 	.word	0x08003b8b
 8003a40:	080039e5 	.word	0x080039e5
 8003a44:	08003a93 	.word	0x08003a93
 8003a48:	080039e5 	.word	0x080039e5
 8003a4c:	080039e5 	.word	0x080039e5
 8003a50:	08003b2b 	.word	0x08003b2b
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6032      	str	r2, [r6, #0]
 8003a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09d      	b.n	8003ba4 <_printf_i+0x1e8>
 8003a68:	6833      	ldr	r3, [r6, #0]
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	1d19      	adds	r1, r3, #4
 8003a6e:	6031      	str	r1, [r6, #0]
 8003a70:	0606      	lsls	r6, r0, #24
 8003a72:	d501      	bpl.n	8003a78 <_printf_i+0xbc>
 8003a74:	681d      	ldr	r5, [r3, #0]
 8003a76:	e003      	b.n	8003a80 <_printf_i+0xc4>
 8003a78:	0645      	lsls	r5, r0, #25
 8003a7a:	d5fb      	bpl.n	8003a74 <_printf_i+0xb8>
 8003a7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	da03      	bge.n	8003a8c <_printf_i+0xd0>
 8003a84:	232d      	movs	r3, #45	@ 0x2d
 8003a86:	426d      	negs	r5, r5
 8003a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a8c:	4859      	ldr	r0, [pc, #356]	@ (8003bf4 <_printf_i+0x238>)
 8003a8e:	230a      	movs	r3, #10
 8003a90:	e011      	b.n	8003ab6 <_printf_i+0xfa>
 8003a92:	6821      	ldr	r1, [r4, #0]
 8003a94:	6833      	ldr	r3, [r6, #0]
 8003a96:	0608      	lsls	r0, r1, #24
 8003a98:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a9c:	d402      	bmi.n	8003aa4 <_printf_i+0xe8>
 8003a9e:	0649      	lsls	r1, r1, #25
 8003aa0:	bf48      	it	mi
 8003aa2:	b2ad      	uxthmi	r5, r5
 8003aa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003aa6:	4853      	ldr	r0, [pc, #332]	@ (8003bf4 <_printf_i+0x238>)
 8003aa8:	6033      	str	r3, [r6, #0]
 8003aaa:	bf14      	ite	ne
 8003aac:	230a      	movne	r3, #10
 8003aae:	2308      	moveq	r3, #8
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ab6:	6866      	ldr	r6, [r4, #4]
 8003ab8:	60a6      	str	r6, [r4, #8]
 8003aba:	2e00      	cmp	r6, #0
 8003abc:	bfa2      	ittt	ge
 8003abe:	6821      	ldrge	r1, [r4, #0]
 8003ac0:	f021 0104 	bicge.w	r1, r1, #4
 8003ac4:	6021      	strge	r1, [r4, #0]
 8003ac6:	b90d      	cbnz	r5, 8003acc <_printf_i+0x110>
 8003ac8:	2e00      	cmp	r6, #0
 8003aca:	d04b      	beq.n	8003b64 <_printf_i+0x1a8>
 8003acc:	4616      	mov	r6, r2
 8003ace:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ad2:	fb03 5711 	mls	r7, r3, r1, r5
 8003ad6:	5dc7      	ldrb	r7, [r0, r7]
 8003ad8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003adc:	462f      	mov	r7, r5
 8003ade:	42bb      	cmp	r3, r7
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	d9f4      	bls.n	8003ace <_printf_i+0x112>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d10b      	bne.n	8003b00 <_printf_i+0x144>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	07df      	lsls	r7, r3, #31
 8003aec:	d508      	bpl.n	8003b00 <_printf_i+0x144>
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	6861      	ldr	r1, [r4, #4]
 8003af2:	4299      	cmp	r1, r3
 8003af4:	bfde      	ittt	le
 8003af6:	2330      	movle	r3, #48	@ 0x30
 8003af8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003afc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003b00:	1b92      	subs	r2, r2, r6
 8003b02:	6122      	str	r2, [r4, #16]
 8003b04:	f8cd a000 	str.w	sl, [sp]
 8003b08:	464b      	mov	r3, r9
 8003b0a:	aa03      	add	r2, sp, #12
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f7ff fee6 	bl	80038e0 <_printf_common>
 8003b14:	3001      	adds	r0, #1
 8003b16:	d14a      	bne.n	8003bae <_printf_i+0x1f2>
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b1c:	b004      	add	sp, #16
 8003b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	f043 0320 	orr.w	r3, r3, #32
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	4833      	ldr	r0, [pc, #204]	@ (8003bf8 <_printf_i+0x23c>)
 8003b2c:	2778      	movs	r7, #120	@ 0x78
 8003b2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	6831      	ldr	r1, [r6, #0]
 8003b36:	061f      	lsls	r7, r3, #24
 8003b38:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b3c:	d402      	bmi.n	8003b44 <_printf_i+0x188>
 8003b3e:	065f      	lsls	r7, r3, #25
 8003b40:	bf48      	it	mi
 8003b42:	b2ad      	uxthmi	r5, r5
 8003b44:	6031      	str	r1, [r6, #0]
 8003b46:	07d9      	lsls	r1, r3, #31
 8003b48:	bf44      	itt	mi
 8003b4a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b4e:	6023      	strmi	r3, [r4, #0]
 8003b50:	b11d      	cbz	r5, 8003b5a <_printf_i+0x19e>
 8003b52:	2310      	movs	r3, #16
 8003b54:	e7ac      	b.n	8003ab0 <_printf_i+0xf4>
 8003b56:	4827      	ldr	r0, [pc, #156]	@ (8003bf4 <_printf_i+0x238>)
 8003b58:	e7e9      	b.n	8003b2e <_printf_i+0x172>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	f023 0320 	bic.w	r3, r3, #32
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	e7f6      	b.n	8003b52 <_printf_i+0x196>
 8003b64:	4616      	mov	r6, r2
 8003b66:	e7bd      	b.n	8003ae4 <_printf_i+0x128>
 8003b68:	6833      	ldr	r3, [r6, #0]
 8003b6a:	6825      	ldr	r5, [r4, #0]
 8003b6c:	6961      	ldr	r1, [r4, #20]
 8003b6e:	1d18      	adds	r0, r3, #4
 8003b70:	6030      	str	r0, [r6, #0]
 8003b72:	062e      	lsls	r6, r5, #24
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	d501      	bpl.n	8003b7c <_printf_i+0x1c0>
 8003b78:	6019      	str	r1, [r3, #0]
 8003b7a:	e002      	b.n	8003b82 <_printf_i+0x1c6>
 8003b7c:	0668      	lsls	r0, r5, #25
 8003b7e:	d5fb      	bpl.n	8003b78 <_printf_i+0x1bc>
 8003b80:	8019      	strh	r1, [r3, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	6123      	str	r3, [r4, #16]
 8003b86:	4616      	mov	r6, r2
 8003b88:	e7bc      	b.n	8003b04 <_printf_i+0x148>
 8003b8a:	6833      	ldr	r3, [r6, #0]
 8003b8c:	1d1a      	adds	r2, r3, #4
 8003b8e:	6032      	str	r2, [r6, #0]
 8003b90:	681e      	ldr	r6, [r3, #0]
 8003b92:	6862      	ldr	r2, [r4, #4]
 8003b94:	2100      	movs	r1, #0
 8003b96:	4630      	mov	r0, r6
 8003b98:	f7fc fb3a 	bl	8000210 <memchr>
 8003b9c:	b108      	cbz	r0, 8003ba2 <_printf_i+0x1e6>
 8003b9e:	1b80      	subs	r0, r0, r6
 8003ba0:	6060      	str	r0, [r4, #4]
 8003ba2:	6863      	ldr	r3, [r4, #4]
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bac:	e7aa      	b.n	8003b04 <_printf_i+0x148>
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	47d0      	blx	sl
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d0ad      	beq.n	8003b18 <_printf_i+0x15c>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	079b      	lsls	r3, r3, #30
 8003bc0:	d413      	bmi.n	8003bea <_printf_i+0x22e>
 8003bc2:	68e0      	ldr	r0, [r4, #12]
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	4298      	cmp	r0, r3
 8003bc8:	bfb8      	it	lt
 8003bca:	4618      	movlt	r0, r3
 8003bcc:	e7a6      	b.n	8003b1c <_printf_i+0x160>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	4632      	mov	r2, r6
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	47d0      	blx	sl
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d09d      	beq.n	8003b18 <_printf_i+0x15c>
 8003bdc:	3501      	adds	r5, #1
 8003bde:	68e3      	ldr	r3, [r4, #12]
 8003be0:	9903      	ldr	r1, [sp, #12]
 8003be2:	1a5b      	subs	r3, r3, r1
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	dcf2      	bgt.n	8003bce <_printf_i+0x212>
 8003be8:	e7eb      	b.n	8003bc2 <_printf_i+0x206>
 8003bea:	2500      	movs	r5, #0
 8003bec:	f104 0619 	add.w	r6, r4, #25
 8003bf0:	e7f5      	b.n	8003bde <_printf_i+0x222>
 8003bf2:	bf00      	nop
 8003bf4:	08006072 	.word	0x08006072
 8003bf8:	08006083 	.word	0x08006083

08003bfc <siprintf>:
 8003bfc:	b40e      	push	{r1, r2, r3}
 8003bfe:	b500      	push	{lr}
 8003c00:	b09c      	sub	sp, #112	@ 0x70
 8003c02:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c04:	9002      	str	r0, [sp, #8]
 8003c06:	9006      	str	r0, [sp, #24]
 8003c08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c0c:	4809      	ldr	r0, [pc, #36]	@ (8003c34 <siprintf+0x38>)
 8003c0e:	9107      	str	r1, [sp, #28]
 8003c10:	9104      	str	r1, [sp, #16]
 8003c12:	4909      	ldr	r1, [pc, #36]	@ (8003c38 <siprintf+0x3c>)
 8003c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c18:	9105      	str	r1, [sp, #20]
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	a902      	add	r1, sp, #8
 8003c20:	f000 ffb2 	bl	8004b88 <_svfiprintf_r>
 8003c24:	9b02      	ldr	r3, [sp, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	b01c      	add	sp, #112	@ 0x70
 8003c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c30:	b003      	add	sp, #12
 8003c32:	4770      	bx	lr
 8003c34:	20000018 	.word	0x20000018
 8003c38:	ffff0208 	.word	0xffff0208

08003c3c <std>:
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	e9c0 3300 	strd	r3, r3, [r0]
 8003c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4a:	6083      	str	r3, [r0, #8]
 8003c4c:	8181      	strh	r1, [r0, #12]
 8003c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c50:	81c2      	strh	r2, [r0, #14]
 8003c52:	6183      	str	r3, [r0, #24]
 8003c54:	4619      	mov	r1, r3
 8003c56:	2208      	movs	r2, #8
 8003c58:	305c      	adds	r0, #92	@ 0x5c
 8003c5a:	f000 f8b1 	bl	8003dc0 <memset>
 8003c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <std+0x58>)
 8003c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <std+0x5c>)
 8003c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c66:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <std+0x60>)
 8003c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <std+0x64>)
 8003c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <std+0x68>)
 8003c70:	6224      	str	r4, [r4, #32]
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d006      	beq.n	8003c84 <std+0x48>
 8003c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c7a:	4294      	cmp	r4, r2
 8003c7c:	d002      	beq.n	8003c84 <std+0x48>
 8003c7e:	33d0      	adds	r3, #208	@ 0xd0
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d105      	bne.n	8003c90 <std+0x54>
 8003c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8c:	f000 b8ce 	b.w	8003e2c <__retarget_lock_init_recursive>
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	08005749 	.word	0x08005749
 8003c98:	0800576b 	.word	0x0800576b
 8003c9c:	080057a3 	.word	0x080057a3
 8003ca0:	080057c7 	.word	0x080057c7
 8003ca4:	20000240 	.word	0x20000240

08003ca8 <stdio_exit_handler>:
 8003ca8:	4a02      	ldr	r2, [pc, #8]	@ (8003cb4 <stdio_exit_handler+0xc>)
 8003caa:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <stdio_exit_handler+0x10>)
 8003cac:	4803      	ldr	r0, [pc, #12]	@ (8003cbc <stdio_exit_handler+0x14>)
 8003cae:	f000 b869 	b.w	8003d84 <_fwalk_sglue>
 8003cb2:	bf00      	nop
 8003cb4:	2000000c 	.word	0x2000000c
 8003cb8:	08004fdd 	.word	0x08004fdd
 8003cbc:	2000001c 	.word	0x2000001c

08003cc0 <cleanup_stdio>:
 8003cc0:	6841      	ldr	r1, [r0, #4]
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <cleanup_stdio+0x34>)
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	4604      	mov	r4, r0
 8003cca:	d001      	beq.n	8003cd0 <cleanup_stdio+0x10>
 8003ccc:	f001 f986 	bl	8004fdc <_fflush_r>
 8003cd0:	68a1      	ldr	r1, [r4, #8]
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <cleanup_stdio+0x38>)
 8003cd4:	4299      	cmp	r1, r3
 8003cd6:	d002      	beq.n	8003cde <cleanup_stdio+0x1e>
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f001 f97f 	bl	8004fdc <_fflush_r>
 8003cde:	68e1      	ldr	r1, [r4, #12]
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <cleanup_stdio+0x3c>)
 8003ce2:	4299      	cmp	r1, r3
 8003ce4:	d004      	beq.n	8003cf0 <cleanup_stdio+0x30>
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cec:	f001 b976 	b.w	8004fdc <_fflush_r>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000240 	.word	0x20000240
 8003cf8:	200002a8 	.word	0x200002a8
 8003cfc:	20000310 	.word	0x20000310

08003d00 <global_stdio_init.part.0>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <global_stdio_init.part.0+0x30>)
 8003d04:	4c0b      	ldr	r4, [pc, #44]	@ (8003d34 <global_stdio_init.part.0+0x34>)
 8003d06:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <global_stdio_init.part.0+0x38>)
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2104      	movs	r1, #4
 8003d10:	f7ff ff94 	bl	8003c3c <std>
 8003d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2109      	movs	r1, #9
 8003d1c:	f7ff ff8e 	bl	8003c3c <std>
 8003d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d24:	2202      	movs	r2, #2
 8003d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d2a:	2112      	movs	r1, #18
 8003d2c:	f7ff bf86 	b.w	8003c3c <std>
 8003d30:	20000378 	.word	0x20000378
 8003d34:	20000240 	.word	0x20000240
 8003d38:	08003ca9 	.word	0x08003ca9

08003d3c <__sfp_lock_acquire>:
 8003d3c:	4801      	ldr	r0, [pc, #4]	@ (8003d44 <__sfp_lock_acquire+0x8>)
 8003d3e:	f000 b876 	b.w	8003e2e <__retarget_lock_acquire_recursive>
 8003d42:	bf00      	nop
 8003d44:	2000037d 	.word	0x2000037d

08003d48 <__sfp_lock_release>:
 8003d48:	4801      	ldr	r0, [pc, #4]	@ (8003d50 <__sfp_lock_release+0x8>)
 8003d4a:	f000 b871 	b.w	8003e30 <__retarget_lock_release_recursive>
 8003d4e:	bf00      	nop
 8003d50:	2000037d 	.word	0x2000037d

08003d54 <__sinit>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4604      	mov	r4, r0
 8003d58:	f7ff fff0 	bl	8003d3c <__sfp_lock_acquire>
 8003d5c:	6a23      	ldr	r3, [r4, #32]
 8003d5e:	b11b      	cbz	r3, 8003d68 <__sinit+0x14>
 8003d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d64:	f7ff bff0 	b.w	8003d48 <__sfp_lock_release>
 8003d68:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <__sinit+0x28>)
 8003d6a:	6223      	str	r3, [r4, #32]
 8003d6c:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <__sinit+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f5      	bne.n	8003d60 <__sinit+0xc>
 8003d74:	f7ff ffc4 	bl	8003d00 <global_stdio_init.part.0>
 8003d78:	e7f2      	b.n	8003d60 <__sinit+0xc>
 8003d7a:	bf00      	nop
 8003d7c:	08003cc1 	.word	0x08003cc1
 8003d80:	20000378 	.word	0x20000378

08003d84 <_fwalk_sglue>:
 8003d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d88:	4607      	mov	r7, r0
 8003d8a:	4688      	mov	r8, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	2600      	movs	r6, #0
 8003d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d94:	f1b9 0901 	subs.w	r9, r9, #1
 8003d98:	d505      	bpl.n	8003da6 <_fwalk_sglue+0x22>
 8003d9a:	6824      	ldr	r4, [r4, #0]
 8003d9c:	2c00      	cmp	r4, #0
 8003d9e:	d1f7      	bne.n	8003d90 <_fwalk_sglue+0xc>
 8003da0:	4630      	mov	r0, r6
 8003da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d907      	bls.n	8003dbc <_fwalk_sglue+0x38>
 8003dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003db0:	3301      	adds	r3, #1
 8003db2:	d003      	beq.n	8003dbc <_fwalk_sglue+0x38>
 8003db4:	4629      	mov	r1, r5
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c0      	blx	r8
 8003dba:	4306      	orrs	r6, r0
 8003dbc:	3568      	adds	r5, #104	@ 0x68
 8003dbe:	e7e9      	b.n	8003d94 <_fwalk_sglue+0x10>

08003dc0 <memset>:
 8003dc0:	4402      	add	r2, r0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d100      	bne.n	8003dca <memset+0xa>
 8003dc8:	4770      	bx	lr
 8003dca:	f803 1b01 	strb.w	r1, [r3], #1
 8003dce:	e7f9      	b.n	8003dc4 <memset+0x4>

08003dd0 <_localeconv_r>:
 8003dd0:	4800      	ldr	r0, [pc, #0]	@ (8003dd4 <_localeconv_r+0x4>)
 8003dd2:	4770      	bx	lr
 8003dd4:	20000158 	.word	0x20000158

08003dd8 <__errno>:
 8003dd8:	4b01      	ldr	r3, [pc, #4]	@ (8003de0 <__errno+0x8>)
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000018 	.word	0x20000018

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4d0d      	ldr	r5, [pc, #52]	@ (8003e1c <__libc_init_array+0x38>)
 8003de8:	4c0d      	ldr	r4, [pc, #52]	@ (8003e20 <__libc_init_array+0x3c>)
 8003dea:	1b64      	subs	r4, r4, r5
 8003dec:	10a4      	asrs	r4, r4, #2
 8003dee:	2600      	movs	r6, #0
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	4d0b      	ldr	r5, [pc, #44]	@ (8003e24 <__libc_init_array+0x40>)
 8003df6:	4c0c      	ldr	r4, [pc, #48]	@ (8003e28 <__libc_init_array+0x44>)
 8003df8:	f002 f8f0 	bl	8005fdc <_init>
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	2600      	movs	r6, #0
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	080063d8 	.word	0x080063d8
 8003e20:	080063d8 	.word	0x080063d8
 8003e24:	080063d8 	.word	0x080063d8
 8003e28:	080063dc 	.word	0x080063dc

08003e2c <__retarget_lock_init_recursive>:
 8003e2c:	4770      	bx	lr

08003e2e <__retarget_lock_acquire_recursive>:
 8003e2e:	4770      	bx	lr

08003e30 <__retarget_lock_release_recursive>:
 8003e30:	4770      	bx	lr

08003e32 <quorem>:
 8003e32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e36:	6903      	ldr	r3, [r0, #16]
 8003e38:	690c      	ldr	r4, [r1, #16]
 8003e3a:	42a3      	cmp	r3, r4
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	db7e      	blt.n	8003f3e <quorem+0x10c>
 8003e40:	3c01      	subs	r4, #1
 8003e42:	f101 0814 	add.w	r8, r1, #20
 8003e46:	00a3      	lsls	r3, r4, #2
 8003e48:	f100 0514 	add.w	r5, r0, #20
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e64:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e68:	d32e      	bcc.n	8003ec8 <quorem+0x96>
 8003e6a:	f04f 0a00 	mov.w	sl, #0
 8003e6e:	46c4      	mov	ip, r8
 8003e70:	46ae      	mov	lr, r5
 8003e72:	46d3      	mov	fp, sl
 8003e74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e78:	b298      	uxth	r0, r3
 8003e7a:	fb06 a000 	mla	r0, r6, r0, sl
 8003e7e:	0c02      	lsrs	r2, r0, #16
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	fb06 2303 	mla	r3, r6, r3, r2
 8003e86:	f8de 2000 	ldr.w	r2, [lr]
 8003e8a:	b280      	uxth	r0, r0
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	1a12      	subs	r2, r2, r0
 8003e90:	445a      	add	r2, fp
 8003e92:	f8de 0000 	ldr.w	r0, [lr]
 8003e96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003ea0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ea4:	b292      	uxth	r2, r2
 8003ea6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003eaa:	45e1      	cmp	r9, ip
 8003eac:	f84e 2b04 	str.w	r2, [lr], #4
 8003eb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003eb4:	d2de      	bcs.n	8003e74 <quorem+0x42>
 8003eb6:	9b00      	ldr	r3, [sp, #0]
 8003eb8:	58eb      	ldr	r3, [r5, r3]
 8003eba:	b92b      	cbnz	r3, 8003ec8 <quorem+0x96>
 8003ebc:	9b01      	ldr	r3, [sp, #4]
 8003ebe:	3b04      	subs	r3, #4
 8003ec0:	429d      	cmp	r5, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	d32f      	bcc.n	8003f26 <quorem+0xf4>
 8003ec6:	613c      	str	r4, [r7, #16]
 8003ec8:	4638      	mov	r0, r7
 8003eca:	f001 fb35 	bl	8005538 <__mcmp>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	db25      	blt.n	8003f1e <quorem+0xec>
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f858 2b04 	ldr.w	r2, [r8], #4
 8003eda:	f8d1 c000 	ldr.w	ip, [r1]
 8003ede:	fa1f fe82 	uxth.w	lr, r2
 8003ee2:	fa1f f38c 	uxth.w	r3, ip
 8003ee6:	eba3 030e 	sub.w	r3, r3, lr
 8003eea:	4403      	add	r3, r0
 8003eec:	0c12      	lsrs	r2, r2, #16
 8003eee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003ef2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003efc:	45c1      	cmp	r9, r8
 8003efe:	f841 3b04 	str.w	r3, [r1], #4
 8003f02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f06:	d2e6      	bcs.n	8003ed6 <quorem+0xa4>
 8003f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f10:	b922      	cbnz	r2, 8003f1c <quorem+0xea>
 8003f12:	3b04      	subs	r3, #4
 8003f14:	429d      	cmp	r5, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	d30b      	bcc.n	8003f32 <quorem+0x100>
 8003f1a:	613c      	str	r4, [r7, #16]
 8003f1c:	3601      	adds	r6, #1
 8003f1e:	4630      	mov	r0, r6
 8003f20:	b003      	add	sp, #12
 8003f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	3b04      	subs	r3, #4
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	d1cb      	bne.n	8003ec6 <quorem+0x94>
 8003f2e:	3c01      	subs	r4, #1
 8003f30:	e7c6      	b.n	8003ec0 <quorem+0x8e>
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	3b04      	subs	r3, #4
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d1ef      	bne.n	8003f1a <quorem+0xe8>
 8003f3a:	3c01      	subs	r4, #1
 8003f3c:	e7ea      	b.n	8003f14 <quorem+0xe2>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e7ee      	b.n	8003f20 <quorem+0xee>
 8003f42:	0000      	movs	r0, r0
 8003f44:	0000      	movs	r0, r0
	...

08003f48 <_dtoa_r>:
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	69c7      	ldr	r7, [r0, #28]
 8003f4e:	b099      	sub	sp, #100	@ 0x64
 8003f50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003f54:	ec55 4b10 	vmov	r4, r5, d0
 8003f58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003f5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f5c:	4683      	mov	fp, r0
 8003f5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f62:	b97f      	cbnz	r7, 8003f84 <_dtoa_r+0x3c>
 8003f64:	2010      	movs	r0, #16
 8003f66:	f000 ff0b 	bl	8004d80 <malloc>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8003f70:	b920      	cbnz	r0, 8003f7c <_dtoa_r+0x34>
 8003f72:	4ba7      	ldr	r3, [pc, #668]	@ (8004210 <_dtoa_r+0x2c8>)
 8003f74:	21ef      	movs	r1, #239	@ 0xef
 8003f76:	48a7      	ldr	r0, [pc, #668]	@ (8004214 <_dtoa_r+0x2cc>)
 8003f78:	f001 fcd6 	bl	8005928 <__assert_func>
 8003f7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003f80:	6007      	str	r7, [r0, #0]
 8003f82:	60c7      	str	r7, [r0, #12]
 8003f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	b159      	cbz	r1, 8003fa4 <_dtoa_r+0x5c>
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	604a      	str	r2, [r1, #4]
 8003f90:	2301      	movs	r3, #1
 8003f92:	4093      	lsls	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
 8003f96:	4658      	mov	r0, fp
 8003f98:	f001 f894 	bl	80050c4 <_Bfree>
 8003f9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	1e2b      	subs	r3, r5, #0
 8003fa6:	bfb9      	ittee	lt
 8003fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003fac:	9303      	strlt	r3, [sp, #12]
 8003fae:	2300      	movge	r3, #0
 8003fb0:	6033      	strge	r3, [r6, #0]
 8003fb2:	9f03      	ldr	r7, [sp, #12]
 8003fb4:	4b98      	ldr	r3, [pc, #608]	@ (8004218 <_dtoa_r+0x2d0>)
 8003fb6:	bfbc      	itt	lt
 8003fb8:	2201      	movlt	r2, #1
 8003fba:	6032      	strlt	r2, [r6, #0]
 8003fbc:	43bb      	bics	r3, r7
 8003fbe:	d112      	bne.n	8003fe6 <_dtoa_r+0x9e>
 8003fc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003fc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003fcc:	4323      	orrs	r3, r4
 8003fce:	f000 854d 	beq.w	8004a6c <_dtoa_r+0xb24>
 8003fd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003fd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800422c <_dtoa_r+0x2e4>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 854f 	beq.w	8004a7c <_dtoa_r+0xb34>
 8003fde:	f10a 0303 	add.w	r3, sl, #3
 8003fe2:	f000 bd49 	b.w	8004a78 <_dtoa_r+0xb30>
 8003fe6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	ec51 0b17 	vmov	r0, r1, d7
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003ff6:	f7fc fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8003ffa:	4680      	mov	r8, r0
 8003ffc:	b158      	cbz	r0, 8004016 <_dtoa_r+0xce>
 8003ffe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004000:	2301      	movs	r3, #1
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004006:	b113      	cbz	r3, 800400e <_dtoa_r+0xc6>
 8004008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800400a:	4b84      	ldr	r3, [pc, #528]	@ (800421c <_dtoa_r+0x2d4>)
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004230 <_dtoa_r+0x2e8>
 8004012:	f000 bd33 	b.w	8004a7c <_dtoa_r+0xb34>
 8004016:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800401a:	aa16      	add	r2, sp, #88	@ 0x58
 800401c:	a917      	add	r1, sp, #92	@ 0x5c
 800401e:	4658      	mov	r0, fp
 8004020:	f001 fb3a 	bl	8005698 <__d2b>
 8004024:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004028:	4681      	mov	r9, r0
 800402a:	2e00      	cmp	r6, #0
 800402c:	d077      	beq.n	800411e <_dtoa_r+0x1d6>
 800402e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004030:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800403c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004040:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004044:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004048:	4619      	mov	r1, r3
 800404a:	2200      	movs	r2, #0
 800404c:	4b74      	ldr	r3, [pc, #464]	@ (8004220 <_dtoa_r+0x2d8>)
 800404e:	f7fc f93b 	bl	80002c8 <__aeabi_dsub>
 8004052:	a369      	add	r3, pc, #420	@ (adr r3, 80041f8 <_dtoa_r+0x2b0>)
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f7fc faee 	bl	8000638 <__aeabi_dmul>
 800405c:	a368      	add	r3, pc, #416	@ (adr r3, 8004200 <_dtoa_r+0x2b8>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc f933 	bl	80002cc <__adddf3>
 8004066:	4604      	mov	r4, r0
 8004068:	4630      	mov	r0, r6
 800406a:	460d      	mov	r5, r1
 800406c:	f7fc fa7a 	bl	8000564 <__aeabi_i2d>
 8004070:	a365      	add	r3, pc, #404	@ (adr r3, 8004208 <_dtoa_r+0x2c0>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f7fc fadf 	bl	8000638 <__aeabi_dmul>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f7fc f923 	bl	80002cc <__adddf3>
 8004086:	4604      	mov	r4, r0
 8004088:	460d      	mov	r5, r1
 800408a:	f7fc fd85 	bl	8000b98 <__aeabi_d2iz>
 800408e:	2200      	movs	r2, #0
 8004090:	4607      	mov	r7, r0
 8004092:	2300      	movs	r3, #0
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc fd40 	bl	8000b1c <__aeabi_dcmplt>
 800409c:	b140      	cbz	r0, 80040b0 <_dtoa_r+0x168>
 800409e:	4638      	mov	r0, r7
 80040a0:	f7fc fa60 	bl	8000564 <__aeabi_i2d>
 80040a4:	4622      	mov	r2, r4
 80040a6:	462b      	mov	r3, r5
 80040a8:	f7fc fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 80040ac:	b900      	cbnz	r0, 80040b0 <_dtoa_r+0x168>
 80040ae:	3f01      	subs	r7, #1
 80040b0:	2f16      	cmp	r7, #22
 80040b2:	d851      	bhi.n	8004158 <_dtoa_r+0x210>
 80040b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004224 <_dtoa_r+0x2dc>)
 80040b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040c2:	f7fc fd2b 	bl	8000b1c <__aeabi_dcmplt>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d048      	beq.n	800415c <_dtoa_r+0x214>
 80040ca:	3f01      	subs	r7, #1
 80040cc:	2300      	movs	r3, #0
 80040ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80040d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80040d2:	1b9b      	subs	r3, r3, r6
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	bf44      	itt	mi
 80040d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80040dc:	2300      	movmi	r3, #0
 80040de:	9208      	str	r2, [sp, #32]
 80040e0:	bf54      	ite	pl
 80040e2:	f04f 0800 	movpl.w	r8, #0
 80040e6:	9308      	strmi	r3, [sp, #32]
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	db39      	blt.n	8004160 <_dtoa_r+0x218>
 80040ec:	9b08      	ldr	r3, [sp, #32]
 80040ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80040f0:	443b      	add	r3, r7
 80040f2:	9308      	str	r3, [sp, #32]
 80040f4:	2300      	movs	r3, #0
 80040f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80040f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040fa:	2b09      	cmp	r3, #9
 80040fc:	d864      	bhi.n	80041c8 <_dtoa_r+0x280>
 80040fe:	2b05      	cmp	r3, #5
 8004100:	bfc4      	itt	gt
 8004102:	3b04      	subgt	r3, #4
 8004104:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004108:	f1a3 0302 	sub.w	r3, r3, #2
 800410c:	bfcc      	ite	gt
 800410e:	2400      	movgt	r4, #0
 8004110:	2401      	movle	r4, #1
 8004112:	2b03      	cmp	r3, #3
 8004114:	d863      	bhi.n	80041de <_dtoa_r+0x296>
 8004116:	e8df f003 	tbb	[pc, r3]
 800411a:	372a      	.short	0x372a
 800411c:	5535      	.short	0x5535
 800411e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004122:	441e      	add	r6, r3
 8004124:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004128:	2b20      	cmp	r3, #32
 800412a:	bfc1      	itttt	gt
 800412c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004130:	409f      	lslgt	r7, r3
 8004132:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004136:	fa24 f303 	lsrgt.w	r3, r4, r3
 800413a:	bfd6      	itet	le
 800413c:	f1c3 0320 	rsble	r3, r3, #32
 8004140:	ea47 0003 	orrgt.w	r0, r7, r3
 8004144:	fa04 f003 	lslle.w	r0, r4, r3
 8004148:	f7fc f9fc 	bl	8000544 <__aeabi_ui2d>
 800414c:	2201      	movs	r2, #1
 800414e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004152:	3e01      	subs	r6, #1
 8004154:	9214      	str	r2, [sp, #80]	@ 0x50
 8004156:	e777      	b.n	8004048 <_dtoa_r+0x100>
 8004158:	2301      	movs	r3, #1
 800415a:	e7b8      	b.n	80040ce <_dtoa_r+0x186>
 800415c:	9012      	str	r0, [sp, #72]	@ 0x48
 800415e:	e7b7      	b.n	80040d0 <_dtoa_r+0x188>
 8004160:	427b      	negs	r3, r7
 8004162:	930a      	str	r3, [sp, #40]	@ 0x28
 8004164:	2300      	movs	r3, #0
 8004166:	eba8 0807 	sub.w	r8, r8, r7
 800416a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800416c:	e7c4      	b.n	80040f8 <_dtoa_r+0x1b0>
 800416e:	2300      	movs	r3, #0
 8004170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004174:	2b00      	cmp	r3, #0
 8004176:	dc35      	bgt.n	80041e4 <_dtoa_r+0x29c>
 8004178:	2301      	movs	r3, #1
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	9307      	str	r3, [sp, #28]
 800417e:	461a      	mov	r2, r3
 8004180:	920e      	str	r2, [sp, #56]	@ 0x38
 8004182:	e00b      	b.n	800419c <_dtoa_r+0x254>
 8004184:	2301      	movs	r3, #1
 8004186:	e7f3      	b.n	8004170 <_dtoa_r+0x228>
 8004188:	2300      	movs	r3, #0
 800418a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800418c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	9307      	str	r3, [sp, #28]
 8004198:	bfb8      	it	lt
 800419a:	2301      	movlt	r3, #1
 800419c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80041a0:	2100      	movs	r1, #0
 80041a2:	2204      	movs	r2, #4
 80041a4:	f102 0514 	add.w	r5, r2, #20
 80041a8:	429d      	cmp	r5, r3
 80041aa:	d91f      	bls.n	80041ec <_dtoa_r+0x2a4>
 80041ac:	6041      	str	r1, [r0, #4]
 80041ae:	4658      	mov	r0, fp
 80041b0:	f000 ff48 	bl	8005044 <_Balloc>
 80041b4:	4682      	mov	sl, r0
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d13c      	bne.n	8004234 <_dtoa_r+0x2ec>
 80041ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <_dtoa_r+0x2e0>)
 80041bc:	4602      	mov	r2, r0
 80041be:	f240 11af 	movw	r1, #431	@ 0x1af
 80041c2:	e6d8      	b.n	8003f76 <_dtoa_r+0x2e>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e7e0      	b.n	800418a <_dtoa_r+0x242>
 80041c8:	2401      	movs	r4, #1
 80041ca:	2300      	movs	r3, #0
 80041cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	2200      	movs	r2, #0
 80041da:	2312      	movs	r3, #18
 80041dc:	e7d0      	b.n	8004180 <_dtoa_r+0x238>
 80041de:	2301      	movs	r3, #1
 80041e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041e2:	e7f5      	b.n	80041d0 <_dtoa_r+0x288>
 80041e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	9307      	str	r3, [sp, #28]
 80041ea:	e7d7      	b.n	800419c <_dtoa_r+0x254>
 80041ec:	3101      	adds	r1, #1
 80041ee:	0052      	lsls	r2, r2, #1
 80041f0:	e7d8      	b.n	80041a4 <_dtoa_r+0x25c>
 80041f2:	bf00      	nop
 80041f4:	f3af 8000 	nop.w
 80041f8:	636f4361 	.word	0x636f4361
 80041fc:	3fd287a7 	.word	0x3fd287a7
 8004200:	8b60c8b3 	.word	0x8b60c8b3
 8004204:	3fc68a28 	.word	0x3fc68a28
 8004208:	509f79fb 	.word	0x509f79fb
 800420c:	3fd34413 	.word	0x3fd34413
 8004210:	080060a1 	.word	0x080060a1
 8004214:	080060b8 	.word	0x080060b8
 8004218:	7ff00000 	.word	0x7ff00000
 800421c:	08006071 	.word	0x08006071
 8004220:	3ff80000 	.word	0x3ff80000
 8004224:	080061c0 	.word	0x080061c0
 8004228:	08006110 	.word	0x08006110
 800422c:	0800609d 	.word	0x0800609d
 8004230:	08006070 	.word	0x08006070
 8004234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004238:	6018      	str	r0, [r3, #0]
 800423a:	9b07      	ldr	r3, [sp, #28]
 800423c:	2b0e      	cmp	r3, #14
 800423e:	f200 80a4 	bhi.w	800438a <_dtoa_r+0x442>
 8004242:	2c00      	cmp	r4, #0
 8004244:	f000 80a1 	beq.w	800438a <_dtoa_r+0x442>
 8004248:	2f00      	cmp	r7, #0
 800424a:	dd33      	ble.n	80042b4 <_dtoa_r+0x36c>
 800424c:	4bad      	ldr	r3, [pc, #692]	@ (8004504 <_dtoa_r+0x5bc>)
 800424e:	f007 020f 	and.w	r2, r7, #15
 8004252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004256:	ed93 7b00 	vldr	d7, [r3]
 800425a:	05f8      	lsls	r0, r7, #23
 800425c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004260:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004264:	d516      	bpl.n	8004294 <_dtoa_r+0x34c>
 8004266:	4ba8      	ldr	r3, [pc, #672]	@ (8004508 <_dtoa_r+0x5c0>)
 8004268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800426c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004270:	f7fc fb0c 	bl	800088c <__aeabi_ddiv>
 8004274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004278:	f004 040f 	and.w	r4, r4, #15
 800427c:	2603      	movs	r6, #3
 800427e:	4da2      	ldr	r5, [pc, #648]	@ (8004508 <_dtoa_r+0x5c0>)
 8004280:	b954      	cbnz	r4, 8004298 <_dtoa_r+0x350>
 8004282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800428a:	f7fc faff 	bl	800088c <__aeabi_ddiv>
 800428e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004292:	e028      	b.n	80042e6 <_dtoa_r+0x39e>
 8004294:	2602      	movs	r6, #2
 8004296:	e7f2      	b.n	800427e <_dtoa_r+0x336>
 8004298:	07e1      	lsls	r1, r4, #31
 800429a:	d508      	bpl.n	80042ae <_dtoa_r+0x366>
 800429c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042a4:	f7fc f9c8 	bl	8000638 <__aeabi_dmul>
 80042a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042ac:	3601      	adds	r6, #1
 80042ae:	1064      	asrs	r4, r4, #1
 80042b0:	3508      	adds	r5, #8
 80042b2:	e7e5      	b.n	8004280 <_dtoa_r+0x338>
 80042b4:	f000 80d2 	beq.w	800445c <_dtoa_r+0x514>
 80042b8:	427c      	negs	r4, r7
 80042ba:	4b92      	ldr	r3, [pc, #584]	@ (8004504 <_dtoa_r+0x5bc>)
 80042bc:	4d92      	ldr	r5, [pc, #584]	@ (8004508 <_dtoa_r+0x5c0>)
 80042be:	f004 020f 	and.w	r2, r4, #15
 80042c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042ce:	f7fc f9b3 	bl	8000638 <__aeabi_dmul>
 80042d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042d6:	1124      	asrs	r4, r4, #4
 80042d8:	2300      	movs	r3, #0
 80042da:	2602      	movs	r6, #2
 80042dc:	2c00      	cmp	r4, #0
 80042de:	f040 80b2 	bne.w	8004446 <_dtoa_r+0x4fe>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1d3      	bne.n	800428e <_dtoa_r+0x346>
 80042e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80042e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80b7 	beq.w	8004460 <_dtoa_r+0x518>
 80042f2:	4b86      	ldr	r3, [pc, #536]	@ (800450c <_dtoa_r+0x5c4>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	4620      	mov	r0, r4
 80042f8:	4629      	mov	r1, r5
 80042fa:	f7fc fc0f 	bl	8000b1c <__aeabi_dcmplt>
 80042fe:	2800      	cmp	r0, #0
 8004300:	f000 80ae 	beq.w	8004460 <_dtoa_r+0x518>
 8004304:	9b07      	ldr	r3, [sp, #28]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80aa 	beq.w	8004460 <_dtoa_r+0x518>
 800430c:	9b00      	ldr	r3, [sp, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	dd37      	ble.n	8004382 <_dtoa_r+0x43a>
 8004312:	1e7b      	subs	r3, r7, #1
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	4620      	mov	r0, r4
 8004318:	4b7d      	ldr	r3, [pc, #500]	@ (8004510 <_dtoa_r+0x5c8>)
 800431a:	2200      	movs	r2, #0
 800431c:	4629      	mov	r1, r5
 800431e:	f7fc f98b 	bl	8000638 <__aeabi_dmul>
 8004322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004326:	9c00      	ldr	r4, [sp, #0]
 8004328:	3601      	adds	r6, #1
 800432a:	4630      	mov	r0, r6
 800432c:	f7fc f91a 	bl	8000564 <__aeabi_i2d>
 8004330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004334:	f7fc f980 	bl	8000638 <__aeabi_dmul>
 8004338:	4b76      	ldr	r3, [pc, #472]	@ (8004514 <_dtoa_r+0x5cc>)
 800433a:	2200      	movs	r2, #0
 800433c:	f7fb ffc6 	bl	80002cc <__adddf3>
 8004340:	4605      	mov	r5, r0
 8004342:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004346:	2c00      	cmp	r4, #0
 8004348:	f040 808d 	bne.w	8004466 <_dtoa_r+0x51e>
 800434c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004350:	4b71      	ldr	r3, [pc, #452]	@ (8004518 <_dtoa_r+0x5d0>)
 8004352:	2200      	movs	r2, #0
 8004354:	f7fb ffb8 	bl	80002c8 <__aeabi_dsub>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004360:	462a      	mov	r2, r5
 8004362:	4633      	mov	r3, r6
 8004364:	f7fc fbf8 	bl	8000b58 <__aeabi_dcmpgt>
 8004368:	2800      	cmp	r0, #0
 800436a:	f040 828b 	bne.w	8004884 <_dtoa_r+0x93c>
 800436e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004372:	462a      	mov	r2, r5
 8004374:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004378:	f7fc fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800437c:	2800      	cmp	r0, #0
 800437e:	f040 8128 	bne.w	80045d2 <_dtoa_r+0x68a>
 8004382:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004386:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800438a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800438c:	2b00      	cmp	r3, #0
 800438e:	f2c0 815a 	blt.w	8004646 <_dtoa_r+0x6fe>
 8004392:	2f0e      	cmp	r7, #14
 8004394:	f300 8157 	bgt.w	8004646 <_dtoa_r+0x6fe>
 8004398:	4b5a      	ldr	r3, [pc, #360]	@ (8004504 <_dtoa_r+0x5bc>)
 800439a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800439e:	ed93 7b00 	vldr	d7, [r3]
 80043a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	ed8d 7b00 	vstr	d7, [sp]
 80043aa:	da03      	bge.n	80043b4 <_dtoa_r+0x46c>
 80043ac:	9b07      	ldr	r3, [sp, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f340 8101 	ble.w	80045b6 <_dtoa_r+0x66e>
 80043b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80043b8:	4656      	mov	r6, sl
 80043ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f7fc fa63 	bl	800088c <__aeabi_ddiv>
 80043c6:	f7fc fbe7 	bl	8000b98 <__aeabi_d2iz>
 80043ca:	4680      	mov	r8, r0
 80043cc:	f7fc f8ca 	bl	8000564 <__aeabi_i2d>
 80043d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043d4:	f7fc f930 	bl	8000638 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80043e4:	f7fb ff70 	bl	80002c8 <__aeabi_dsub>
 80043e8:	f806 4b01 	strb.w	r4, [r6], #1
 80043ec:	9d07      	ldr	r5, [sp, #28]
 80043ee:	eba6 040a 	sub.w	r4, r6, sl
 80043f2:	42a5      	cmp	r5, r4
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	f040 8117 	bne.w	800462a <_dtoa_r+0x6e2>
 80043fc:	f7fb ff66 	bl	80002cc <__adddf3>
 8004400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004404:	4604      	mov	r4, r0
 8004406:	460d      	mov	r5, r1
 8004408:	f7fc fba6 	bl	8000b58 <__aeabi_dcmpgt>
 800440c:	2800      	cmp	r0, #0
 800440e:	f040 80f9 	bne.w	8004604 <_dtoa_r+0x6bc>
 8004412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004416:	4620      	mov	r0, r4
 8004418:	4629      	mov	r1, r5
 800441a:	f7fc fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800441e:	b118      	cbz	r0, 8004428 <_dtoa_r+0x4e0>
 8004420:	f018 0f01 	tst.w	r8, #1
 8004424:	f040 80ee 	bne.w	8004604 <_dtoa_r+0x6bc>
 8004428:	4649      	mov	r1, r9
 800442a:	4658      	mov	r0, fp
 800442c:	f000 fe4a 	bl	80050c4 <_Bfree>
 8004430:	2300      	movs	r3, #0
 8004432:	7033      	strb	r3, [r6, #0]
 8004434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004436:	3701      	adds	r7, #1
 8004438:	601f      	str	r7, [r3, #0]
 800443a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 831d 	beq.w	8004a7c <_dtoa_r+0xb34>
 8004442:	601e      	str	r6, [r3, #0]
 8004444:	e31a      	b.n	8004a7c <_dtoa_r+0xb34>
 8004446:	07e2      	lsls	r2, r4, #31
 8004448:	d505      	bpl.n	8004456 <_dtoa_r+0x50e>
 800444a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800444e:	f7fc f8f3 	bl	8000638 <__aeabi_dmul>
 8004452:	3601      	adds	r6, #1
 8004454:	2301      	movs	r3, #1
 8004456:	1064      	asrs	r4, r4, #1
 8004458:	3508      	adds	r5, #8
 800445a:	e73f      	b.n	80042dc <_dtoa_r+0x394>
 800445c:	2602      	movs	r6, #2
 800445e:	e742      	b.n	80042e6 <_dtoa_r+0x39e>
 8004460:	9c07      	ldr	r4, [sp, #28]
 8004462:	9704      	str	r7, [sp, #16]
 8004464:	e761      	b.n	800432a <_dtoa_r+0x3e2>
 8004466:	4b27      	ldr	r3, [pc, #156]	@ (8004504 <_dtoa_r+0x5bc>)
 8004468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800446a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800446e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004472:	4454      	add	r4, sl
 8004474:	2900      	cmp	r1, #0
 8004476:	d053      	beq.n	8004520 <_dtoa_r+0x5d8>
 8004478:	4928      	ldr	r1, [pc, #160]	@ (800451c <_dtoa_r+0x5d4>)
 800447a:	2000      	movs	r0, #0
 800447c:	f7fc fa06 	bl	800088c <__aeabi_ddiv>
 8004480:	4633      	mov	r3, r6
 8004482:	462a      	mov	r2, r5
 8004484:	f7fb ff20 	bl	80002c8 <__aeabi_dsub>
 8004488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800448c:	4656      	mov	r6, sl
 800448e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004492:	f7fc fb81 	bl	8000b98 <__aeabi_d2iz>
 8004496:	4605      	mov	r5, r0
 8004498:	f7fc f864 	bl	8000564 <__aeabi_i2d>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a4:	f7fb ff10 	bl	80002c8 <__aeabi_dsub>
 80044a8:	3530      	adds	r5, #48	@ 0x30
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044b2:	f806 5b01 	strb.w	r5, [r6], #1
 80044b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80044ba:	f7fc fb2f 	bl	8000b1c <__aeabi_dcmplt>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d171      	bne.n	80045a6 <_dtoa_r+0x65e>
 80044c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044c6:	4911      	ldr	r1, [pc, #68]	@ (800450c <_dtoa_r+0x5c4>)
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7fb fefd 	bl	80002c8 <__aeabi_dsub>
 80044ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80044d2:	f7fc fb23 	bl	8000b1c <__aeabi_dcmplt>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	f040 8095 	bne.w	8004606 <_dtoa_r+0x6be>
 80044dc:	42a6      	cmp	r6, r4
 80044de:	f43f af50 	beq.w	8004382 <_dtoa_r+0x43a>
 80044e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80044e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <_dtoa_r+0x5c8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	f7fc f8a5 	bl	8000638 <__aeabi_dmul>
 80044ee:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <_dtoa_r+0x5c8>)
 80044f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044f4:	2200      	movs	r2, #0
 80044f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044fa:	f7fc f89d 	bl	8000638 <__aeabi_dmul>
 80044fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004502:	e7c4      	b.n	800448e <_dtoa_r+0x546>
 8004504:	080061c0 	.word	0x080061c0
 8004508:	08006198 	.word	0x08006198
 800450c:	3ff00000 	.word	0x3ff00000
 8004510:	40240000 	.word	0x40240000
 8004514:	401c0000 	.word	0x401c0000
 8004518:	40140000 	.word	0x40140000
 800451c:	3fe00000 	.word	0x3fe00000
 8004520:	4631      	mov	r1, r6
 8004522:	4628      	mov	r0, r5
 8004524:	f7fc f888 	bl	8000638 <__aeabi_dmul>
 8004528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800452c:	9415      	str	r4, [sp, #84]	@ 0x54
 800452e:	4656      	mov	r6, sl
 8004530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004534:	f7fc fb30 	bl	8000b98 <__aeabi_d2iz>
 8004538:	4605      	mov	r5, r0
 800453a:	f7fc f813 	bl	8000564 <__aeabi_i2d>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004546:	f7fb febf 	bl	80002c8 <__aeabi_dsub>
 800454a:	3530      	adds	r5, #48	@ 0x30
 800454c:	f806 5b01 	strb.w	r5, [r6], #1
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	42a6      	cmp	r6, r4
 8004556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	d124      	bne.n	80045aa <_dtoa_r+0x662>
 8004560:	4bac      	ldr	r3, [pc, #688]	@ (8004814 <_dtoa_r+0x8cc>)
 8004562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004566:	f7fb feb1 	bl	80002cc <__adddf3>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004572:	f7fc faf1 	bl	8000b58 <__aeabi_dcmpgt>
 8004576:	2800      	cmp	r0, #0
 8004578:	d145      	bne.n	8004606 <_dtoa_r+0x6be>
 800457a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800457e:	49a5      	ldr	r1, [pc, #660]	@ (8004814 <_dtoa_r+0x8cc>)
 8004580:	2000      	movs	r0, #0
 8004582:	f7fb fea1 	bl	80002c8 <__aeabi_dsub>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800458e:	f7fc fac5 	bl	8000b1c <__aeabi_dcmplt>
 8004592:	2800      	cmp	r0, #0
 8004594:	f43f aef5 	beq.w	8004382 <_dtoa_r+0x43a>
 8004598:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800459a:	1e73      	subs	r3, r6, #1
 800459c:	9315      	str	r3, [sp, #84]	@ 0x54
 800459e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80045a2:	2b30      	cmp	r3, #48	@ 0x30
 80045a4:	d0f8      	beq.n	8004598 <_dtoa_r+0x650>
 80045a6:	9f04      	ldr	r7, [sp, #16]
 80045a8:	e73e      	b.n	8004428 <_dtoa_r+0x4e0>
 80045aa:	4b9b      	ldr	r3, [pc, #620]	@ (8004818 <_dtoa_r+0x8d0>)
 80045ac:	f7fc f844 	bl	8000638 <__aeabi_dmul>
 80045b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045b4:	e7bc      	b.n	8004530 <_dtoa_r+0x5e8>
 80045b6:	d10c      	bne.n	80045d2 <_dtoa_r+0x68a>
 80045b8:	4b98      	ldr	r3, [pc, #608]	@ (800481c <_dtoa_r+0x8d4>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045c0:	f7fc f83a 	bl	8000638 <__aeabi_dmul>
 80045c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045c8:	f7fc fabc 	bl	8000b44 <__aeabi_dcmpge>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	f000 8157 	beq.w	8004880 <_dtoa_r+0x938>
 80045d2:	2400      	movs	r4, #0
 80045d4:	4625      	mov	r5, r4
 80045d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045d8:	43db      	mvns	r3, r3
 80045da:	9304      	str	r3, [sp, #16]
 80045dc:	4656      	mov	r6, sl
 80045de:	2700      	movs	r7, #0
 80045e0:	4621      	mov	r1, r4
 80045e2:	4658      	mov	r0, fp
 80045e4:	f000 fd6e 	bl	80050c4 <_Bfree>
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	d0dc      	beq.n	80045a6 <_dtoa_r+0x65e>
 80045ec:	b12f      	cbz	r7, 80045fa <_dtoa_r+0x6b2>
 80045ee:	42af      	cmp	r7, r5
 80045f0:	d003      	beq.n	80045fa <_dtoa_r+0x6b2>
 80045f2:	4639      	mov	r1, r7
 80045f4:	4658      	mov	r0, fp
 80045f6:	f000 fd65 	bl	80050c4 <_Bfree>
 80045fa:	4629      	mov	r1, r5
 80045fc:	4658      	mov	r0, fp
 80045fe:	f000 fd61 	bl	80050c4 <_Bfree>
 8004602:	e7d0      	b.n	80045a6 <_dtoa_r+0x65e>
 8004604:	9704      	str	r7, [sp, #16]
 8004606:	4633      	mov	r3, r6
 8004608:	461e      	mov	r6, r3
 800460a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800460e:	2a39      	cmp	r2, #57	@ 0x39
 8004610:	d107      	bne.n	8004622 <_dtoa_r+0x6da>
 8004612:	459a      	cmp	sl, r3
 8004614:	d1f8      	bne.n	8004608 <_dtoa_r+0x6c0>
 8004616:	9a04      	ldr	r2, [sp, #16]
 8004618:	3201      	adds	r2, #1
 800461a:	9204      	str	r2, [sp, #16]
 800461c:	2230      	movs	r2, #48	@ 0x30
 800461e:	f88a 2000 	strb.w	r2, [sl]
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	3201      	adds	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e7bd      	b.n	80045a6 <_dtoa_r+0x65e>
 800462a:	4b7b      	ldr	r3, [pc, #492]	@ (8004818 <_dtoa_r+0x8d0>)
 800462c:	2200      	movs	r2, #0
 800462e:	f7fc f803 	bl	8000638 <__aeabi_dmul>
 8004632:	2200      	movs	r2, #0
 8004634:	2300      	movs	r3, #0
 8004636:	4604      	mov	r4, r0
 8004638:	460d      	mov	r5, r1
 800463a:	f7fc fa65 	bl	8000b08 <__aeabi_dcmpeq>
 800463e:	2800      	cmp	r0, #0
 8004640:	f43f aebb 	beq.w	80043ba <_dtoa_r+0x472>
 8004644:	e6f0      	b.n	8004428 <_dtoa_r+0x4e0>
 8004646:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004648:	2a00      	cmp	r2, #0
 800464a:	f000 80db 	beq.w	8004804 <_dtoa_r+0x8bc>
 800464e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004650:	2a01      	cmp	r2, #1
 8004652:	f300 80bf 	bgt.w	80047d4 <_dtoa_r+0x88c>
 8004656:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004658:	2a00      	cmp	r2, #0
 800465a:	f000 80b7 	beq.w	80047cc <_dtoa_r+0x884>
 800465e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004662:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004664:	4646      	mov	r6, r8
 8004666:	9a08      	ldr	r2, [sp, #32]
 8004668:	2101      	movs	r1, #1
 800466a:	441a      	add	r2, r3
 800466c:	4658      	mov	r0, fp
 800466e:	4498      	add	r8, r3
 8004670:	9208      	str	r2, [sp, #32]
 8004672:	f000 fddb 	bl	800522c <__i2b>
 8004676:	4605      	mov	r5, r0
 8004678:	b15e      	cbz	r6, 8004692 <_dtoa_r+0x74a>
 800467a:	9b08      	ldr	r3, [sp, #32]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dd08      	ble.n	8004692 <_dtoa_r+0x74a>
 8004680:	42b3      	cmp	r3, r6
 8004682:	9a08      	ldr	r2, [sp, #32]
 8004684:	bfa8      	it	ge
 8004686:	4633      	movge	r3, r6
 8004688:	eba8 0803 	sub.w	r8, r8, r3
 800468c:	1af6      	subs	r6, r6, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	9308      	str	r3, [sp, #32]
 8004692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004694:	b1f3      	cbz	r3, 80046d4 <_dtoa_r+0x78c>
 8004696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80b7 	beq.w	800480c <_dtoa_r+0x8c4>
 800469e:	b18c      	cbz	r4, 80046c4 <_dtoa_r+0x77c>
 80046a0:	4629      	mov	r1, r5
 80046a2:	4622      	mov	r2, r4
 80046a4:	4658      	mov	r0, fp
 80046a6:	f000 fe81 	bl	80053ac <__pow5mult>
 80046aa:	464a      	mov	r2, r9
 80046ac:	4601      	mov	r1, r0
 80046ae:	4605      	mov	r5, r0
 80046b0:	4658      	mov	r0, fp
 80046b2:	f000 fdd1 	bl	8005258 <__multiply>
 80046b6:	4649      	mov	r1, r9
 80046b8:	9004      	str	r0, [sp, #16]
 80046ba:	4658      	mov	r0, fp
 80046bc:	f000 fd02 	bl	80050c4 <_Bfree>
 80046c0:	9b04      	ldr	r3, [sp, #16]
 80046c2:	4699      	mov	r9, r3
 80046c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046c6:	1b1a      	subs	r2, r3, r4
 80046c8:	d004      	beq.n	80046d4 <_dtoa_r+0x78c>
 80046ca:	4649      	mov	r1, r9
 80046cc:	4658      	mov	r0, fp
 80046ce:	f000 fe6d 	bl	80053ac <__pow5mult>
 80046d2:	4681      	mov	r9, r0
 80046d4:	2101      	movs	r1, #1
 80046d6:	4658      	mov	r0, fp
 80046d8:	f000 fda8 	bl	800522c <__i2b>
 80046dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046de:	4604      	mov	r4, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 81cf 	beq.w	8004a84 <_dtoa_r+0xb3c>
 80046e6:	461a      	mov	r2, r3
 80046e8:	4601      	mov	r1, r0
 80046ea:	4658      	mov	r0, fp
 80046ec:	f000 fe5e 	bl	80053ac <__pow5mult>
 80046f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	4604      	mov	r4, r0
 80046f6:	f300 8095 	bgt.w	8004824 <_dtoa_r+0x8dc>
 80046fa:	9b02      	ldr	r3, [sp, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 8087 	bne.w	8004810 <_dtoa_r+0x8c8>
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 8089 	bne.w	8004820 <_dtoa_r+0x8d8>
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004714:	0d1b      	lsrs	r3, r3, #20
 8004716:	051b      	lsls	r3, r3, #20
 8004718:	b12b      	cbz	r3, 8004726 <_dtoa_r+0x7de>
 800471a:	9b08      	ldr	r3, [sp, #32]
 800471c:	3301      	adds	r3, #1
 800471e:	9308      	str	r3, [sp, #32]
 8004720:	f108 0801 	add.w	r8, r8, #1
 8004724:	2301      	movs	r3, #1
 8004726:	930a      	str	r3, [sp, #40]	@ 0x28
 8004728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 81b0 	beq.w	8004a90 <_dtoa_r+0xb48>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004736:	6918      	ldr	r0, [r3, #16]
 8004738:	f000 fd2c 	bl	8005194 <__hi0bits>
 800473c:	f1c0 0020 	rsb	r0, r0, #32
 8004740:	9b08      	ldr	r3, [sp, #32]
 8004742:	4418      	add	r0, r3
 8004744:	f010 001f 	ands.w	r0, r0, #31
 8004748:	d077      	beq.n	800483a <_dtoa_r+0x8f2>
 800474a:	f1c0 0320 	rsb	r3, r0, #32
 800474e:	2b04      	cmp	r3, #4
 8004750:	dd6b      	ble.n	800482a <_dtoa_r+0x8e2>
 8004752:	9b08      	ldr	r3, [sp, #32]
 8004754:	f1c0 001c 	rsb	r0, r0, #28
 8004758:	4403      	add	r3, r0
 800475a:	4480      	add	r8, r0
 800475c:	4406      	add	r6, r0
 800475e:	9308      	str	r3, [sp, #32]
 8004760:	f1b8 0f00 	cmp.w	r8, #0
 8004764:	dd05      	ble.n	8004772 <_dtoa_r+0x82a>
 8004766:	4649      	mov	r1, r9
 8004768:	4642      	mov	r2, r8
 800476a:	4658      	mov	r0, fp
 800476c:	f000 fe78 	bl	8005460 <__lshift>
 8004770:	4681      	mov	r9, r0
 8004772:	9b08      	ldr	r3, [sp, #32]
 8004774:	2b00      	cmp	r3, #0
 8004776:	dd05      	ble.n	8004784 <_dtoa_r+0x83c>
 8004778:	4621      	mov	r1, r4
 800477a:	461a      	mov	r2, r3
 800477c:	4658      	mov	r0, fp
 800477e:	f000 fe6f 	bl	8005460 <__lshift>
 8004782:	4604      	mov	r4, r0
 8004784:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004786:	2b00      	cmp	r3, #0
 8004788:	d059      	beq.n	800483e <_dtoa_r+0x8f6>
 800478a:	4621      	mov	r1, r4
 800478c:	4648      	mov	r0, r9
 800478e:	f000 fed3 	bl	8005538 <__mcmp>
 8004792:	2800      	cmp	r0, #0
 8004794:	da53      	bge.n	800483e <_dtoa_r+0x8f6>
 8004796:	1e7b      	subs	r3, r7, #1
 8004798:	9304      	str	r3, [sp, #16]
 800479a:	4649      	mov	r1, r9
 800479c:	2300      	movs	r3, #0
 800479e:	220a      	movs	r2, #10
 80047a0:	4658      	mov	r0, fp
 80047a2:	f000 fcb1 	bl	8005108 <__multadd>
 80047a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047a8:	4681      	mov	r9, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8172 	beq.w	8004a94 <_dtoa_r+0xb4c>
 80047b0:	2300      	movs	r3, #0
 80047b2:	4629      	mov	r1, r5
 80047b4:	220a      	movs	r2, #10
 80047b6:	4658      	mov	r0, fp
 80047b8:	f000 fca6 	bl	8005108 <__multadd>
 80047bc:	9b00      	ldr	r3, [sp, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	4605      	mov	r5, r0
 80047c2:	dc67      	bgt.n	8004894 <_dtoa_r+0x94c>
 80047c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	dc41      	bgt.n	800484e <_dtoa_r+0x906>
 80047ca:	e063      	b.n	8004894 <_dtoa_r+0x94c>
 80047cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80047ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80047d2:	e746      	b.n	8004662 <_dtoa_r+0x71a>
 80047d4:	9b07      	ldr	r3, [sp, #28]
 80047d6:	1e5c      	subs	r4, r3, #1
 80047d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047da:	42a3      	cmp	r3, r4
 80047dc:	bfbf      	itttt	lt
 80047de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80047e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80047e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80047e4:	1ae3      	sublt	r3, r4, r3
 80047e6:	bfb4      	ite	lt
 80047e8:	18d2      	addlt	r2, r2, r3
 80047ea:	1b1c      	subge	r4, r3, r4
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	bfbc      	itt	lt
 80047f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80047f2:	2400      	movlt	r4, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfb5      	itete	lt
 80047f8:	eba8 0603 	sublt.w	r6, r8, r3
 80047fc:	9b07      	ldrge	r3, [sp, #28]
 80047fe:	2300      	movlt	r3, #0
 8004800:	4646      	movge	r6, r8
 8004802:	e730      	b.n	8004666 <_dtoa_r+0x71e>
 8004804:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004806:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004808:	4646      	mov	r6, r8
 800480a:	e735      	b.n	8004678 <_dtoa_r+0x730>
 800480c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800480e:	e75c      	b.n	80046ca <_dtoa_r+0x782>
 8004810:	2300      	movs	r3, #0
 8004812:	e788      	b.n	8004726 <_dtoa_r+0x7de>
 8004814:	3fe00000 	.word	0x3fe00000
 8004818:	40240000 	.word	0x40240000
 800481c:	40140000 	.word	0x40140000
 8004820:	9b02      	ldr	r3, [sp, #8]
 8004822:	e780      	b.n	8004726 <_dtoa_r+0x7de>
 8004824:	2300      	movs	r3, #0
 8004826:	930a      	str	r3, [sp, #40]	@ 0x28
 8004828:	e782      	b.n	8004730 <_dtoa_r+0x7e8>
 800482a:	d099      	beq.n	8004760 <_dtoa_r+0x818>
 800482c:	9a08      	ldr	r2, [sp, #32]
 800482e:	331c      	adds	r3, #28
 8004830:	441a      	add	r2, r3
 8004832:	4498      	add	r8, r3
 8004834:	441e      	add	r6, r3
 8004836:	9208      	str	r2, [sp, #32]
 8004838:	e792      	b.n	8004760 <_dtoa_r+0x818>
 800483a:	4603      	mov	r3, r0
 800483c:	e7f6      	b.n	800482c <_dtoa_r+0x8e4>
 800483e:	9b07      	ldr	r3, [sp, #28]
 8004840:	9704      	str	r7, [sp, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	dc20      	bgt.n	8004888 <_dtoa_r+0x940>
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800484a:	2b02      	cmp	r3, #2
 800484c:	dd1e      	ble.n	800488c <_dtoa_r+0x944>
 800484e:	9b00      	ldr	r3, [sp, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f aec0 	bne.w	80045d6 <_dtoa_r+0x68e>
 8004856:	4621      	mov	r1, r4
 8004858:	2205      	movs	r2, #5
 800485a:	4658      	mov	r0, fp
 800485c:	f000 fc54 	bl	8005108 <__multadd>
 8004860:	4601      	mov	r1, r0
 8004862:	4604      	mov	r4, r0
 8004864:	4648      	mov	r0, r9
 8004866:	f000 fe67 	bl	8005538 <__mcmp>
 800486a:	2800      	cmp	r0, #0
 800486c:	f77f aeb3 	ble.w	80045d6 <_dtoa_r+0x68e>
 8004870:	4656      	mov	r6, sl
 8004872:	2331      	movs	r3, #49	@ 0x31
 8004874:	f806 3b01 	strb.w	r3, [r6], #1
 8004878:	9b04      	ldr	r3, [sp, #16]
 800487a:	3301      	adds	r3, #1
 800487c:	9304      	str	r3, [sp, #16]
 800487e:	e6ae      	b.n	80045de <_dtoa_r+0x696>
 8004880:	9c07      	ldr	r4, [sp, #28]
 8004882:	9704      	str	r7, [sp, #16]
 8004884:	4625      	mov	r5, r4
 8004886:	e7f3      	b.n	8004870 <_dtoa_r+0x928>
 8004888:	9b07      	ldr	r3, [sp, #28]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8104 	beq.w	8004a9c <_dtoa_r+0xb54>
 8004894:	2e00      	cmp	r6, #0
 8004896:	dd05      	ble.n	80048a4 <_dtoa_r+0x95c>
 8004898:	4629      	mov	r1, r5
 800489a:	4632      	mov	r2, r6
 800489c:	4658      	mov	r0, fp
 800489e:	f000 fddf 	bl	8005460 <__lshift>
 80048a2:	4605      	mov	r5, r0
 80048a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d05a      	beq.n	8004960 <_dtoa_r+0xa18>
 80048aa:	6869      	ldr	r1, [r5, #4]
 80048ac:	4658      	mov	r0, fp
 80048ae:	f000 fbc9 	bl	8005044 <_Balloc>
 80048b2:	4606      	mov	r6, r0
 80048b4:	b928      	cbnz	r0, 80048c2 <_dtoa_r+0x97a>
 80048b6:	4b84      	ldr	r3, [pc, #528]	@ (8004ac8 <_dtoa_r+0xb80>)
 80048b8:	4602      	mov	r2, r0
 80048ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80048be:	f7ff bb5a 	b.w	8003f76 <_dtoa_r+0x2e>
 80048c2:	692a      	ldr	r2, [r5, #16]
 80048c4:	3202      	adds	r2, #2
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	f105 010c 	add.w	r1, r5, #12
 80048cc:	300c      	adds	r0, #12
 80048ce:	f001 f81d 	bl	800590c <memcpy>
 80048d2:	2201      	movs	r2, #1
 80048d4:	4631      	mov	r1, r6
 80048d6:	4658      	mov	r0, fp
 80048d8:	f000 fdc2 	bl	8005460 <__lshift>
 80048dc:	f10a 0301 	add.w	r3, sl, #1
 80048e0:	9307      	str	r3, [sp, #28]
 80048e2:	9b00      	ldr	r3, [sp, #0]
 80048e4:	4453      	add	r3, sl
 80048e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048e8:	9b02      	ldr	r3, [sp, #8]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	462f      	mov	r7, r5
 80048f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80048f2:	4605      	mov	r5, r0
 80048f4:	9b07      	ldr	r3, [sp, #28]
 80048f6:	4621      	mov	r1, r4
 80048f8:	3b01      	subs	r3, #1
 80048fa:	4648      	mov	r0, r9
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	f7ff fa98 	bl	8003e32 <quorem>
 8004902:	4639      	mov	r1, r7
 8004904:	9002      	str	r0, [sp, #8]
 8004906:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800490a:	4648      	mov	r0, r9
 800490c:	f000 fe14 	bl	8005538 <__mcmp>
 8004910:	462a      	mov	r2, r5
 8004912:	9008      	str	r0, [sp, #32]
 8004914:	4621      	mov	r1, r4
 8004916:	4658      	mov	r0, fp
 8004918:	f000 fe2a 	bl	8005570 <__mdiff>
 800491c:	68c2      	ldr	r2, [r0, #12]
 800491e:	4606      	mov	r6, r0
 8004920:	bb02      	cbnz	r2, 8004964 <_dtoa_r+0xa1c>
 8004922:	4601      	mov	r1, r0
 8004924:	4648      	mov	r0, r9
 8004926:	f000 fe07 	bl	8005538 <__mcmp>
 800492a:	4602      	mov	r2, r0
 800492c:	4631      	mov	r1, r6
 800492e:	4658      	mov	r0, fp
 8004930:	920e      	str	r2, [sp, #56]	@ 0x38
 8004932:	f000 fbc7 	bl	80050c4 <_Bfree>
 8004936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004938:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800493a:	9e07      	ldr	r6, [sp, #28]
 800493c:	ea43 0102 	orr.w	r1, r3, r2
 8004940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004942:	4319      	orrs	r1, r3
 8004944:	d110      	bne.n	8004968 <_dtoa_r+0xa20>
 8004946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800494a:	d029      	beq.n	80049a0 <_dtoa_r+0xa58>
 800494c:	9b08      	ldr	r3, [sp, #32]
 800494e:	2b00      	cmp	r3, #0
 8004950:	dd02      	ble.n	8004958 <_dtoa_r+0xa10>
 8004952:	9b02      	ldr	r3, [sp, #8]
 8004954:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004958:	9b00      	ldr	r3, [sp, #0]
 800495a:	f883 8000 	strb.w	r8, [r3]
 800495e:	e63f      	b.n	80045e0 <_dtoa_r+0x698>
 8004960:	4628      	mov	r0, r5
 8004962:	e7bb      	b.n	80048dc <_dtoa_r+0x994>
 8004964:	2201      	movs	r2, #1
 8004966:	e7e1      	b.n	800492c <_dtoa_r+0x9e4>
 8004968:	9b08      	ldr	r3, [sp, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	db04      	blt.n	8004978 <_dtoa_r+0xa30>
 800496e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004970:	430b      	orrs	r3, r1
 8004972:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004974:	430b      	orrs	r3, r1
 8004976:	d120      	bne.n	80049ba <_dtoa_r+0xa72>
 8004978:	2a00      	cmp	r2, #0
 800497a:	dded      	ble.n	8004958 <_dtoa_r+0xa10>
 800497c:	4649      	mov	r1, r9
 800497e:	2201      	movs	r2, #1
 8004980:	4658      	mov	r0, fp
 8004982:	f000 fd6d 	bl	8005460 <__lshift>
 8004986:	4621      	mov	r1, r4
 8004988:	4681      	mov	r9, r0
 800498a:	f000 fdd5 	bl	8005538 <__mcmp>
 800498e:	2800      	cmp	r0, #0
 8004990:	dc03      	bgt.n	800499a <_dtoa_r+0xa52>
 8004992:	d1e1      	bne.n	8004958 <_dtoa_r+0xa10>
 8004994:	f018 0f01 	tst.w	r8, #1
 8004998:	d0de      	beq.n	8004958 <_dtoa_r+0xa10>
 800499a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800499e:	d1d8      	bne.n	8004952 <_dtoa_r+0xa0a>
 80049a0:	9a00      	ldr	r2, [sp, #0]
 80049a2:	2339      	movs	r3, #57	@ 0x39
 80049a4:	7013      	strb	r3, [r2, #0]
 80049a6:	4633      	mov	r3, r6
 80049a8:	461e      	mov	r6, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80049b0:	2a39      	cmp	r2, #57	@ 0x39
 80049b2:	d052      	beq.n	8004a5a <_dtoa_r+0xb12>
 80049b4:	3201      	adds	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
 80049b8:	e612      	b.n	80045e0 <_dtoa_r+0x698>
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	dd07      	ble.n	80049ce <_dtoa_r+0xa86>
 80049be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80049c2:	d0ed      	beq.n	80049a0 <_dtoa_r+0xa58>
 80049c4:	9a00      	ldr	r2, [sp, #0]
 80049c6:	f108 0301 	add.w	r3, r8, #1
 80049ca:	7013      	strb	r3, [r2, #0]
 80049cc:	e608      	b.n	80045e0 <_dtoa_r+0x698>
 80049ce:	9b07      	ldr	r3, [sp, #28]
 80049d0:	9a07      	ldr	r2, [sp, #28]
 80049d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80049d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049d8:	4293      	cmp	r3, r2
 80049da:	d028      	beq.n	8004a2e <_dtoa_r+0xae6>
 80049dc:	4649      	mov	r1, r9
 80049de:	2300      	movs	r3, #0
 80049e0:	220a      	movs	r2, #10
 80049e2:	4658      	mov	r0, fp
 80049e4:	f000 fb90 	bl	8005108 <__multadd>
 80049e8:	42af      	cmp	r7, r5
 80049ea:	4681      	mov	r9, r0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	f04f 020a 	mov.w	r2, #10
 80049f4:	4639      	mov	r1, r7
 80049f6:	4658      	mov	r0, fp
 80049f8:	d107      	bne.n	8004a0a <_dtoa_r+0xac2>
 80049fa:	f000 fb85 	bl	8005108 <__multadd>
 80049fe:	4607      	mov	r7, r0
 8004a00:	4605      	mov	r5, r0
 8004a02:	9b07      	ldr	r3, [sp, #28]
 8004a04:	3301      	adds	r3, #1
 8004a06:	9307      	str	r3, [sp, #28]
 8004a08:	e774      	b.n	80048f4 <_dtoa_r+0x9ac>
 8004a0a:	f000 fb7d 	bl	8005108 <__multadd>
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4607      	mov	r7, r0
 8004a12:	2300      	movs	r3, #0
 8004a14:	220a      	movs	r2, #10
 8004a16:	4658      	mov	r0, fp
 8004a18:	f000 fb76 	bl	8005108 <__multadd>
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	e7f0      	b.n	8004a02 <_dtoa_r+0xaba>
 8004a20:	9b00      	ldr	r3, [sp, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfcc      	ite	gt
 8004a26:	461e      	movgt	r6, r3
 8004a28:	2601      	movle	r6, #1
 8004a2a:	4456      	add	r6, sl
 8004a2c:	2700      	movs	r7, #0
 8004a2e:	4649      	mov	r1, r9
 8004a30:	2201      	movs	r2, #1
 8004a32:	4658      	mov	r0, fp
 8004a34:	f000 fd14 	bl	8005460 <__lshift>
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4681      	mov	r9, r0
 8004a3c:	f000 fd7c 	bl	8005538 <__mcmp>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	dcb0      	bgt.n	80049a6 <_dtoa_r+0xa5e>
 8004a44:	d102      	bne.n	8004a4c <_dtoa_r+0xb04>
 8004a46:	f018 0f01 	tst.w	r8, #1
 8004a4a:	d1ac      	bne.n	80049a6 <_dtoa_r+0xa5e>
 8004a4c:	4633      	mov	r3, r6
 8004a4e:	461e      	mov	r6, r3
 8004a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a54:	2a30      	cmp	r2, #48	@ 0x30
 8004a56:	d0fa      	beq.n	8004a4e <_dtoa_r+0xb06>
 8004a58:	e5c2      	b.n	80045e0 <_dtoa_r+0x698>
 8004a5a:	459a      	cmp	sl, r3
 8004a5c:	d1a4      	bne.n	80049a8 <_dtoa_r+0xa60>
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	3301      	adds	r3, #1
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	2331      	movs	r3, #49	@ 0x31
 8004a66:	f88a 3000 	strb.w	r3, [sl]
 8004a6a:	e5b9      	b.n	80045e0 <_dtoa_r+0x698>
 8004a6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004acc <_dtoa_r+0xb84>
 8004a72:	b11b      	cbz	r3, 8004a7c <_dtoa_r+0xb34>
 8004a74:	f10a 0308 	add.w	r3, sl, #8
 8004a78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4650      	mov	r0, sl
 8004a7e:	b019      	add	sp, #100	@ 0x64
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	f77f ae37 	ble.w	80046fa <_dtoa_r+0x7b2>
 8004a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a90:	2001      	movs	r0, #1
 8004a92:	e655      	b.n	8004740 <_dtoa_r+0x7f8>
 8004a94:	9b00      	ldr	r3, [sp, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f77f aed6 	ble.w	8004848 <_dtoa_r+0x900>
 8004a9c:	4656      	mov	r6, sl
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4648      	mov	r0, r9
 8004aa2:	f7ff f9c6 	bl	8003e32 <quorem>
 8004aa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004aaa:	f806 8b01 	strb.w	r8, [r6], #1
 8004aae:	9b00      	ldr	r3, [sp, #0]
 8004ab0:	eba6 020a 	sub.w	r2, r6, sl
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	ddb3      	ble.n	8004a20 <_dtoa_r+0xad8>
 8004ab8:	4649      	mov	r1, r9
 8004aba:	2300      	movs	r3, #0
 8004abc:	220a      	movs	r2, #10
 8004abe:	4658      	mov	r0, fp
 8004ac0:	f000 fb22 	bl	8005108 <__multadd>
 8004ac4:	4681      	mov	r9, r0
 8004ac6:	e7ea      	b.n	8004a9e <_dtoa_r+0xb56>
 8004ac8:	08006110 	.word	0x08006110
 8004acc:	08006094 	.word	0x08006094

08004ad0 <__ssputs_r>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	688e      	ldr	r6, [r1, #8]
 8004ad6:	461f      	mov	r7, r3
 8004ad8:	42be      	cmp	r6, r7
 8004ada:	680b      	ldr	r3, [r1, #0]
 8004adc:	4682      	mov	sl, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	4690      	mov	r8, r2
 8004ae2:	d82d      	bhi.n	8004b40 <__ssputs_r+0x70>
 8004ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ae8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004aec:	d026      	beq.n	8004b3c <__ssputs_r+0x6c>
 8004aee:	6965      	ldr	r5, [r4, #20]
 8004af0:	6909      	ldr	r1, [r1, #16]
 8004af2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004af6:	eba3 0901 	sub.w	r9, r3, r1
 8004afa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004afe:	1c7b      	adds	r3, r7, #1
 8004b00:	444b      	add	r3, r9
 8004b02:	106d      	asrs	r5, r5, #1
 8004b04:	429d      	cmp	r5, r3
 8004b06:	bf38      	it	cc
 8004b08:	461d      	movcc	r5, r3
 8004b0a:	0553      	lsls	r3, r2, #21
 8004b0c:	d527      	bpl.n	8004b5e <__ssputs_r+0x8e>
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f000 f960 	bl	8004dd4 <_malloc_r>
 8004b14:	4606      	mov	r6, r0
 8004b16:	b360      	cbz	r0, 8004b72 <__ssputs_r+0xa2>
 8004b18:	6921      	ldr	r1, [r4, #16]
 8004b1a:	464a      	mov	r2, r9
 8004b1c:	f000 fef6 	bl	800590c <memcpy>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	6126      	str	r6, [r4, #16]
 8004b2e:	6165      	str	r5, [r4, #20]
 8004b30:	444e      	add	r6, r9
 8004b32:	eba5 0509 	sub.w	r5, r5, r9
 8004b36:	6026      	str	r6, [r4, #0]
 8004b38:	60a5      	str	r5, [r4, #8]
 8004b3a:	463e      	mov	r6, r7
 8004b3c:	42be      	cmp	r6, r7
 8004b3e:	d900      	bls.n	8004b42 <__ssputs_r+0x72>
 8004b40:	463e      	mov	r6, r7
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	4632      	mov	r2, r6
 8004b46:	4641      	mov	r1, r8
 8004b48:	f000 fe6f 	bl	800582a <memmove>
 8004b4c:	68a3      	ldr	r3, [r4, #8]
 8004b4e:	1b9b      	subs	r3, r3, r6
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	4433      	add	r3, r6
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5e:	462a      	mov	r2, r5
 8004b60:	f000 fe35 	bl	80057ce <_realloc_r>
 8004b64:	4606      	mov	r6, r0
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d1e0      	bne.n	8004b2c <__ssputs_r+0x5c>
 8004b6a:	6921      	ldr	r1, [r4, #16]
 8004b6c:	4650      	mov	r0, sl
 8004b6e:	f000 ff0d 	bl	800598c <_free_r>
 8004b72:	230c      	movs	r3, #12
 8004b74:	f8ca 3000 	str.w	r3, [sl]
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b84:	e7e9      	b.n	8004b5a <__ssputs_r+0x8a>
	...

08004b88 <_svfiprintf_r>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	4698      	mov	r8, r3
 8004b8e:	898b      	ldrh	r3, [r1, #12]
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	b09d      	sub	sp, #116	@ 0x74
 8004b94:	4607      	mov	r7, r0
 8004b96:	460d      	mov	r5, r1
 8004b98:	4614      	mov	r4, r2
 8004b9a:	d510      	bpl.n	8004bbe <_svfiprintf_r+0x36>
 8004b9c:	690b      	ldr	r3, [r1, #16]
 8004b9e:	b973      	cbnz	r3, 8004bbe <_svfiprintf_r+0x36>
 8004ba0:	2140      	movs	r1, #64	@ 0x40
 8004ba2:	f000 f917 	bl	8004dd4 <_malloc_r>
 8004ba6:	6028      	str	r0, [r5, #0]
 8004ba8:	6128      	str	r0, [r5, #16]
 8004baa:	b930      	cbnz	r0, 8004bba <_svfiprintf_r+0x32>
 8004bac:	230c      	movs	r3, #12
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bb4:	b01d      	add	sp, #116	@ 0x74
 8004bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bba:	2340      	movs	r3, #64	@ 0x40
 8004bbc:	616b      	str	r3, [r5, #20]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bc2:	2320      	movs	r3, #32
 8004bc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bcc:	2330      	movs	r3, #48	@ 0x30
 8004bce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d6c <_svfiprintf_r+0x1e4>
 8004bd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bd6:	f04f 0901 	mov.w	r9, #1
 8004bda:	4623      	mov	r3, r4
 8004bdc:	469a      	mov	sl, r3
 8004bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004be2:	b10a      	cbz	r2, 8004be8 <_svfiprintf_r+0x60>
 8004be4:	2a25      	cmp	r2, #37	@ 0x25
 8004be6:	d1f9      	bne.n	8004bdc <_svfiprintf_r+0x54>
 8004be8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bec:	d00b      	beq.n	8004c06 <_svfiprintf_r+0x7e>
 8004bee:	465b      	mov	r3, fp
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f7ff ff6b 	bl	8004ad0 <__ssputs_r>
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f000 80a7 	beq.w	8004d4e <_svfiprintf_r+0x1c6>
 8004c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c02:	445a      	add	r2, fp
 8004c04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c06:	f89a 3000 	ldrb.w	r3, [sl]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 809f 	beq.w	8004d4e <_svfiprintf_r+0x1c6>
 8004c10:	2300      	movs	r3, #0
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c1a:	f10a 0a01 	add.w	sl, sl, #1
 8004c1e:	9304      	str	r3, [sp, #16]
 8004c20:	9307      	str	r3, [sp, #28]
 8004c22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c26:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c28:	4654      	mov	r4, sl
 8004c2a:	2205      	movs	r2, #5
 8004c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c30:	484e      	ldr	r0, [pc, #312]	@ (8004d6c <_svfiprintf_r+0x1e4>)
 8004c32:	f7fb faed 	bl	8000210 <memchr>
 8004c36:	9a04      	ldr	r2, [sp, #16]
 8004c38:	b9d8      	cbnz	r0, 8004c72 <_svfiprintf_r+0xea>
 8004c3a:	06d0      	lsls	r0, r2, #27
 8004c3c:	bf44      	itt	mi
 8004c3e:	2320      	movmi	r3, #32
 8004c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c44:	0711      	lsls	r1, r2, #28
 8004c46:	bf44      	itt	mi
 8004c48:	232b      	movmi	r3, #43	@ 0x2b
 8004c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c54:	d015      	beq.n	8004c82 <_svfiprintf_r+0xfa>
 8004c56:	9a07      	ldr	r2, [sp, #28]
 8004c58:	4654      	mov	r4, sl
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f04f 0c0a 	mov.w	ip, #10
 8004c60:	4621      	mov	r1, r4
 8004c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c66:	3b30      	subs	r3, #48	@ 0x30
 8004c68:	2b09      	cmp	r3, #9
 8004c6a:	d94b      	bls.n	8004d04 <_svfiprintf_r+0x17c>
 8004c6c:	b1b0      	cbz	r0, 8004c9c <_svfiprintf_r+0x114>
 8004c6e:	9207      	str	r2, [sp, #28]
 8004c70:	e014      	b.n	8004c9c <_svfiprintf_r+0x114>
 8004c72:	eba0 0308 	sub.w	r3, r0, r8
 8004c76:	fa09 f303 	lsl.w	r3, r9, r3
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	46a2      	mov	sl, r4
 8004c80:	e7d2      	b.n	8004c28 <_svfiprintf_r+0xa0>
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	9103      	str	r1, [sp, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bfbb      	ittet	lt
 8004c8e:	425b      	neglt	r3, r3
 8004c90:	f042 0202 	orrlt.w	r2, r2, #2
 8004c94:	9307      	strge	r3, [sp, #28]
 8004c96:	9307      	strlt	r3, [sp, #28]
 8004c98:	bfb8      	it	lt
 8004c9a:	9204      	strlt	r2, [sp, #16]
 8004c9c:	7823      	ldrb	r3, [r4, #0]
 8004c9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ca0:	d10a      	bne.n	8004cb8 <_svfiprintf_r+0x130>
 8004ca2:	7863      	ldrb	r3, [r4, #1]
 8004ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ca6:	d132      	bne.n	8004d0e <_svfiprintf_r+0x186>
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	1d1a      	adds	r2, r3, #4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	9203      	str	r2, [sp, #12]
 8004cb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cb4:	3402      	adds	r4, #2
 8004cb6:	9305      	str	r3, [sp, #20]
 8004cb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d7c <_svfiprintf_r+0x1f4>
 8004cbc:	7821      	ldrb	r1, [r4, #0]
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	f7fb faa5 	bl	8000210 <memchr>
 8004cc6:	b138      	cbz	r0, 8004cd8 <_svfiprintf_r+0x150>
 8004cc8:	9b04      	ldr	r3, [sp, #16]
 8004cca:	eba0 000a 	sub.w	r0, r0, sl
 8004cce:	2240      	movs	r2, #64	@ 0x40
 8004cd0:	4082      	lsls	r2, r0
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	3401      	adds	r4, #1
 8004cd6:	9304      	str	r3, [sp, #16]
 8004cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cdc:	4824      	ldr	r0, [pc, #144]	@ (8004d70 <_svfiprintf_r+0x1e8>)
 8004cde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ce2:	2206      	movs	r2, #6
 8004ce4:	f7fb fa94 	bl	8000210 <memchr>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d036      	beq.n	8004d5a <_svfiprintf_r+0x1d2>
 8004cec:	4b21      	ldr	r3, [pc, #132]	@ (8004d74 <_svfiprintf_r+0x1ec>)
 8004cee:	bb1b      	cbnz	r3, 8004d38 <_svfiprintf_r+0x1b0>
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	3307      	adds	r3, #7
 8004cf4:	f023 0307 	bic.w	r3, r3, #7
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	9303      	str	r3, [sp, #12]
 8004cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cfe:	4433      	add	r3, r6
 8004d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d02:	e76a      	b.n	8004bda <_svfiprintf_r+0x52>
 8004d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d08:	460c      	mov	r4, r1
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e7a8      	b.n	8004c60 <_svfiprintf_r+0xd8>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	3401      	adds	r4, #1
 8004d12:	9305      	str	r3, [sp, #20]
 8004d14:	4619      	mov	r1, r3
 8004d16:	f04f 0c0a 	mov.w	ip, #10
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d20:	3a30      	subs	r2, #48	@ 0x30
 8004d22:	2a09      	cmp	r2, #9
 8004d24:	d903      	bls.n	8004d2e <_svfiprintf_r+0x1a6>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0c6      	beq.n	8004cb8 <_svfiprintf_r+0x130>
 8004d2a:	9105      	str	r1, [sp, #20]
 8004d2c:	e7c4      	b.n	8004cb8 <_svfiprintf_r+0x130>
 8004d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d32:	4604      	mov	r4, r0
 8004d34:	2301      	movs	r3, #1
 8004d36:	e7f0      	b.n	8004d1a <_svfiprintf_r+0x192>
 8004d38:	ab03      	add	r3, sp, #12
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <_svfiprintf_r+0x1f0>)
 8004d40:	a904      	add	r1, sp, #16
 8004d42:	4638      	mov	r0, r7
 8004d44:	f7fe fba2 	bl	800348c <_printf_float>
 8004d48:	1c42      	adds	r2, r0, #1
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	d1d6      	bne.n	8004cfc <_svfiprintf_r+0x174>
 8004d4e:	89ab      	ldrh	r3, [r5, #12]
 8004d50:	065b      	lsls	r3, r3, #25
 8004d52:	f53f af2d 	bmi.w	8004bb0 <_svfiprintf_r+0x28>
 8004d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d58:	e72c      	b.n	8004bb4 <_svfiprintf_r+0x2c>
 8004d5a:	ab03      	add	r3, sp, #12
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	462a      	mov	r2, r5
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <_svfiprintf_r+0x1f0>)
 8004d62:	a904      	add	r1, sp, #16
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7fe fe29 	bl	80039bc <_printf_i>
 8004d6a:	e7ed      	b.n	8004d48 <_svfiprintf_r+0x1c0>
 8004d6c:	08006121 	.word	0x08006121
 8004d70:	0800612b 	.word	0x0800612b
 8004d74:	0800348d 	.word	0x0800348d
 8004d78:	08004ad1 	.word	0x08004ad1
 8004d7c:	08006127 	.word	0x08006127

08004d80 <malloc>:
 8004d80:	4b02      	ldr	r3, [pc, #8]	@ (8004d8c <malloc+0xc>)
 8004d82:	4601      	mov	r1, r0
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f000 b825 	b.w	8004dd4 <_malloc_r>
 8004d8a:	bf00      	nop
 8004d8c:	20000018 	.word	0x20000018

08004d90 <sbrk_aligned>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4e0f      	ldr	r6, [pc, #60]	@ (8004dd0 <sbrk_aligned+0x40>)
 8004d94:	460c      	mov	r4, r1
 8004d96:	6831      	ldr	r1, [r6, #0]
 8004d98:	4605      	mov	r5, r0
 8004d9a:	b911      	cbnz	r1, 8004da2 <sbrk_aligned+0x12>
 8004d9c:	f000 fd94 	bl	80058c8 <_sbrk_r>
 8004da0:	6030      	str	r0, [r6, #0]
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 fd8f 	bl	80058c8 <_sbrk_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	d103      	bne.n	8004db6 <sbrk_aligned+0x26>
 8004dae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004db2:	4620      	mov	r0, r4
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	1cc4      	adds	r4, r0, #3
 8004db8:	f024 0403 	bic.w	r4, r4, #3
 8004dbc:	42a0      	cmp	r0, r4
 8004dbe:	d0f8      	beq.n	8004db2 <sbrk_aligned+0x22>
 8004dc0:	1a21      	subs	r1, r4, r0
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 fd80 	bl	80058c8 <_sbrk_r>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d1f2      	bne.n	8004db2 <sbrk_aligned+0x22>
 8004dcc:	e7ef      	b.n	8004dae <sbrk_aligned+0x1e>
 8004dce:	bf00      	nop
 8004dd0:	20000380 	.word	0x20000380

08004dd4 <_malloc_r>:
 8004dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	1ccd      	adds	r5, r1, #3
 8004dda:	f025 0503 	bic.w	r5, r5, #3
 8004dde:	3508      	adds	r5, #8
 8004de0:	2d0c      	cmp	r5, #12
 8004de2:	bf38      	it	cc
 8004de4:	250c      	movcc	r5, #12
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	4606      	mov	r6, r0
 8004dea:	db01      	blt.n	8004df0 <_malloc_r+0x1c>
 8004dec:	42a9      	cmp	r1, r5
 8004dee:	d904      	bls.n	8004dfa <_malloc_r+0x26>
 8004df0:	230c      	movs	r3, #12
 8004df2:	6033      	str	r3, [r6, #0]
 8004df4:	2000      	movs	r0, #0
 8004df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ed0 <_malloc_r+0xfc>
 8004dfe:	f000 f915 	bl	800502c <__malloc_lock>
 8004e02:	f8d8 3000 	ldr.w	r3, [r8]
 8004e06:	461c      	mov	r4, r3
 8004e08:	bb44      	cbnz	r4, 8004e5c <_malloc_r+0x88>
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f7ff ffbf 	bl	8004d90 <sbrk_aligned>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	4604      	mov	r4, r0
 8004e16:	d158      	bne.n	8004eca <_malloc_r+0xf6>
 8004e18:	f8d8 4000 	ldr.w	r4, [r8]
 8004e1c:	4627      	mov	r7, r4
 8004e1e:	2f00      	cmp	r7, #0
 8004e20:	d143      	bne.n	8004eaa <_malloc_r+0xd6>
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d04b      	beq.n	8004ebe <_malloc_r+0xea>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	4639      	mov	r1, r7
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	eb04 0903 	add.w	r9, r4, r3
 8004e30:	f000 fd4a 	bl	80058c8 <_sbrk_r>
 8004e34:	4581      	cmp	r9, r0
 8004e36:	d142      	bne.n	8004ebe <_malloc_r+0xea>
 8004e38:	6821      	ldr	r1, [r4, #0]
 8004e3a:	1a6d      	subs	r5, r5, r1
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff ffa6 	bl	8004d90 <sbrk_aligned>
 8004e44:	3001      	adds	r0, #1
 8004e46:	d03a      	beq.n	8004ebe <_malloc_r+0xea>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	442b      	add	r3, r5
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	bb62      	cbnz	r2, 8004eb0 <_malloc_r+0xdc>
 8004e56:	f8c8 7000 	str.w	r7, [r8]
 8004e5a:	e00f      	b.n	8004e7c <_malloc_r+0xa8>
 8004e5c:	6822      	ldr	r2, [r4, #0]
 8004e5e:	1b52      	subs	r2, r2, r5
 8004e60:	d420      	bmi.n	8004ea4 <_malloc_r+0xd0>
 8004e62:	2a0b      	cmp	r2, #11
 8004e64:	d917      	bls.n	8004e96 <_malloc_r+0xc2>
 8004e66:	1961      	adds	r1, r4, r5
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	6025      	str	r5, [r4, #0]
 8004e6c:	bf18      	it	ne
 8004e6e:	6059      	strne	r1, [r3, #4]
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	bf08      	it	eq
 8004e74:	f8c8 1000 	streq.w	r1, [r8]
 8004e78:	5162      	str	r2, [r4, r5]
 8004e7a:	604b      	str	r3, [r1, #4]
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 f8db 	bl	8005038 <__malloc_unlock>
 8004e82:	f104 000b 	add.w	r0, r4, #11
 8004e86:	1d23      	adds	r3, r4, #4
 8004e88:	f020 0007 	bic.w	r0, r0, #7
 8004e8c:	1ac2      	subs	r2, r0, r3
 8004e8e:	bf1c      	itt	ne
 8004e90:	1a1b      	subne	r3, r3, r0
 8004e92:	50a3      	strne	r3, [r4, r2]
 8004e94:	e7af      	b.n	8004df6 <_malloc_r+0x22>
 8004e96:	6862      	ldr	r2, [r4, #4]
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	bf0c      	ite	eq
 8004e9c:	f8c8 2000 	streq.w	r2, [r8]
 8004ea0:	605a      	strne	r2, [r3, #4]
 8004ea2:	e7eb      	b.n	8004e7c <_malloc_r+0xa8>
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	6864      	ldr	r4, [r4, #4]
 8004ea8:	e7ae      	b.n	8004e08 <_malloc_r+0x34>
 8004eaa:	463c      	mov	r4, r7
 8004eac:	687f      	ldr	r7, [r7, #4]
 8004eae:	e7b6      	b.n	8004e1e <_malloc_r+0x4a>
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d1fb      	bne.n	8004eb0 <_malloc_r+0xdc>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6053      	str	r3, [r2, #4]
 8004ebc:	e7de      	b.n	8004e7c <_malloc_r+0xa8>
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f000 f8b8 	bl	8005038 <__malloc_unlock>
 8004ec8:	e794      	b.n	8004df4 <_malloc_r+0x20>
 8004eca:	6005      	str	r5, [r0, #0]
 8004ecc:	e7d6      	b.n	8004e7c <_malloc_r+0xa8>
 8004ece:	bf00      	nop
 8004ed0:	20000384 	.word	0x20000384

08004ed4 <__sflush_r>:
 8004ed4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004edc:	0716      	lsls	r6, r2, #28
 8004ede:	4605      	mov	r5, r0
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	d454      	bmi.n	8004f8e <__sflush_r+0xba>
 8004ee4:	684b      	ldr	r3, [r1, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	dc02      	bgt.n	8004ef0 <__sflush_r+0x1c>
 8004eea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	dd48      	ble.n	8004f82 <__sflush_r+0xae>
 8004ef0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	d045      	beq.n	8004f82 <__sflush_r+0xae>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004efc:	682f      	ldr	r7, [r5, #0]
 8004efe:	6a21      	ldr	r1, [r4, #32]
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	d030      	beq.n	8004f66 <__sflush_r+0x92>
 8004f04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	0759      	lsls	r1, r3, #29
 8004f0a:	d505      	bpl.n	8004f18 <__sflush_r+0x44>
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f12:	b10b      	cbz	r3, 8004f18 <__sflush_r+0x44>
 8004f14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f1c:	6a21      	ldr	r1, [r4, #32]
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b0      	blx	r6
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	d106      	bne.n	8004f36 <__sflush_r+0x62>
 8004f28:	6829      	ldr	r1, [r5, #0]
 8004f2a:	291d      	cmp	r1, #29
 8004f2c:	d82b      	bhi.n	8004f86 <__sflush_r+0xb2>
 8004f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd8 <__sflush_r+0x104>)
 8004f30:	410a      	asrs	r2, r1
 8004f32:	07d6      	lsls	r6, r2, #31
 8004f34:	d427      	bmi.n	8004f86 <__sflush_r+0xb2>
 8004f36:	2200      	movs	r2, #0
 8004f38:	6062      	str	r2, [r4, #4]
 8004f3a:	04d9      	lsls	r1, r3, #19
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	6022      	str	r2, [r4, #0]
 8004f40:	d504      	bpl.n	8004f4c <__sflush_r+0x78>
 8004f42:	1c42      	adds	r2, r0, #1
 8004f44:	d101      	bne.n	8004f4a <__sflush_r+0x76>
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	b903      	cbnz	r3, 8004f4c <__sflush_r+0x78>
 8004f4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f4e:	602f      	str	r7, [r5, #0]
 8004f50:	b1b9      	cbz	r1, 8004f82 <__sflush_r+0xae>
 8004f52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f56:	4299      	cmp	r1, r3
 8004f58:	d002      	beq.n	8004f60 <__sflush_r+0x8c>
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 fd16 	bl	800598c <_free_r>
 8004f60:	2300      	movs	r3, #0
 8004f62:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f64:	e00d      	b.n	8004f82 <__sflush_r+0xae>
 8004f66:	2301      	movs	r3, #1
 8004f68:	4628      	mov	r0, r5
 8004f6a:	47b0      	blx	r6
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	1c50      	adds	r0, r2, #1
 8004f70:	d1c9      	bne.n	8004f06 <__sflush_r+0x32>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0c6      	beq.n	8004f06 <__sflush_r+0x32>
 8004f78:	2b1d      	cmp	r3, #29
 8004f7a:	d001      	beq.n	8004f80 <__sflush_r+0xac>
 8004f7c:	2b16      	cmp	r3, #22
 8004f7e:	d11e      	bne.n	8004fbe <__sflush_r+0xea>
 8004f80:	602f      	str	r7, [r5, #0]
 8004f82:	2000      	movs	r0, #0
 8004f84:	e022      	b.n	8004fcc <__sflush_r+0xf8>
 8004f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f8a:	b21b      	sxth	r3, r3
 8004f8c:	e01b      	b.n	8004fc6 <__sflush_r+0xf2>
 8004f8e:	690f      	ldr	r7, [r1, #16]
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	d0f6      	beq.n	8004f82 <__sflush_r+0xae>
 8004f94:	0793      	lsls	r3, r2, #30
 8004f96:	680e      	ldr	r6, [r1, #0]
 8004f98:	bf08      	it	eq
 8004f9a:	694b      	ldreq	r3, [r1, #20]
 8004f9c:	600f      	str	r7, [r1, #0]
 8004f9e:	bf18      	it	ne
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	eba6 0807 	sub.w	r8, r6, r7
 8004fa6:	608b      	str	r3, [r1, #8]
 8004fa8:	f1b8 0f00 	cmp.w	r8, #0
 8004fac:	dde9      	ble.n	8004f82 <__sflush_r+0xae>
 8004fae:	6a21      	ldr	r1, [r4, #32]
 8004fb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004fb2:	4643      	mov	r3, r8
 8004fb4:	463a      	mov	r2, r7
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	47b0      	blx	r6
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	dc08      	bgt.n	8004fd0 <__sflush_r+0xfc>
 8004fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd0:	4407      	add	r7, r0
 8004fd2:	eba8 0800 	sub.w	r8, r8, r0
 8004fd6:	e7e7      	b.n	8004fa8 <__sflush_r+0xd4>
 8004fd8:	dfbffffe 	.word	0xdfbffffe

08004fdc <_fflush_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	690b      	ldr	r3, [r1, #16]
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	b913      	cbnz	r3, 8004fec <_fflush_r+0x10>
 8004fe6:	2500      	movs	r5, #0
 8004fe8:	4628      	mov	r0, r5
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	b118      	cbz	r0, 8004ff6 <_fflush_r+0x1a>
 8004fee:	6a03      	ldr	r3, [r0, #32]
 8004ff0:	b90b      	cbnz	r3, 8004ff6 <_fflush_r+0x1a>
 8004ff2:	f7fe feaf 	bl	8003d54 <__sinit>
 8004ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f3      	beq.n	8004fe6 <_fflush_r+0xa>
 8004ffe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005000:	07d0      	lsls	r0, r2, #31
 8005002:	d404      	bmi.n	800500e <_fflush_r+0x32>
 8005004:	0599      	lsls	r1, r3, #22
 8005006:	d402      	bmi.n	800500e <_fflush_r+0x32>
 8005008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800500a:	f7fe ff10 	bl	8003e2e <__retarget_lock_acquire_recursive>
 800500e:	4628      	mov	r0, r5
 8005010:	4621      	mov	r1, r4
 8005012:	f7ff ff5f 	bl	8004ed4 <__sflush_r>
 8005016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005018:	07da      	lsls	r2, r3, #31
 800501a:	4605      	mov	r5, r0
 800501c:	d4e4      	bmi.n	8004fe8 <_fflush_r+0xc>
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	059b      	lsls	r3, r3, #22
 8005022:	d4e1      	bmi.n	8004fe8 <_fflush_r+0xc>
 8005024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005026:	f7fe ff03 	bl	8003e30 <__retarget_lock_release_recursive>
 800502a:	e7dd      	b.n	8004fe8 <_fflush_r+0xc>

0800502c <__malloc_lock>:
 800502c:	4801      	ldr	r0, [pc, #4]	@ (8005034 <__malloc_lock+0x8>)
 800502e:	f7fe befe 	b.w	8003e2e <__retarget_lock_acquire_recursive>
 8005032:	bf00      	nop
 8005034:	2000037c 	.word	0x2000037c

08005038 <__malloc_unlock>:
 8005038:	4801      	ldr	r0, [pc, #4]	@ (8005040 <__malloc_unlock+0x8>)
 800503a:	f7fe bef9 	b.w	8003e30 <__retarget_lock_release_recursive>
 800503e:	bf00      	nop
 8005040:	2000037c 	.word	0x2000037c

08005044 <_Balloc>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	69c6      	ldr	r6, [r0, #28]
 8005048:	4604      	mov	r4, r0
 800504a:	460d      	mov	r5, r1
 800504c:	b976      	cbnz	r6, 800506c <_Balloc+0x28>
 800504e:	2010      	movs	r0, #16
 8005050:	f7ff fe96 	bl	8004d80 <malloc>
 8005054:	4602      	mov	r2, r0
 8005056:	61e0      	str	r0, [r4, #28]
 8005058:	b920      	cbnz	r0, 8005064 <_Balloc+0x20>
 800505a:	4b18      	ldr	r3, [pc, #96]	@ (80050bc <_Balloc+0x78>)
 800505c:	4818      	ldr	r0, [pc, #96]	@ (80050c0 <_Balloc+0x7c>)
 800505e:	216b      	movs	r1, #107	@ 0x6b
 8005060:	f000 fc62 	bl	8005928 <__assert_func>
 8005064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005068:	6006      	str	r6, [r0, #0]
 800506a:	60c6      	str	r6, [r0, #12]
 800506c:	69e6      	ldr	r6, [r4, #28]
 800506e:	68f3      	ldr	r3, [r6, #12]
 8005070:	b183      	cbz	r3, 8005094 <_Balloc+0x50>
 8005072:	69e3      	ldr	r3, [r4, #28]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800507a:	b9b8      	cbnz	r0, 80050ac <_Balloc+0x68>
 800507c:	2101      	movs	r1, #1
 800507e:	fa01 f605 	lsl.w	r6, r1, r5
 8005082:	1d72      	adds	r2, r6, #5
 8005084:	0092      	lsls	r2, r2, #2
 8005086:	4620      	mov	r0, r4
 8005088:	f000 fc6c 	bl	8005964 <_calloc_r>
 800508c:	b160      	cbz	r0, 80050a8 <_Balloc+0x64>
 800508e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005092:	e00e      	b.n	80050b2 <_Balloc+0x6e>
 8005094:	2221      	movs	r2, #33	@ 0x21
 8005096:	2104      	movs	r1, #4
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fc63 	bl	8005964 <_calloc_r>
 800509e:	69e3      	ldr	r3, [r4, #28]
 80050a0:	60f0      	str	r0, [r6, #12]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e4      	bne.n	8005072 <_Balloc+0x2e>
 80050a8:	2000      	movs	r0, #0
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	6802      	ldr	r2, [r0, #0]
 80050ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050b2:	2300      	movs	r3, #0
 80050b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050b8:	e7f7      	b.n	80050aa <_Balloc+0x66>
 80050ba:	bf00      	nop
 80050bc:	080060a1 	.word	0x080060a1
 80050c0:	08006132 	.word	0x08006132

080050c4 <_Bfree>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	69c6      	ldr	r6, [r0, #28]
 80050c8:	4605      	mov	r5, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	b976      	cbnz	r6, 80050ec <_Bfree+0x28>
 80050ce:	2010      	movs	r0, #16
 80050d0:	f7ff fe56 	bl	8004d80 <malloc>
 80050d4:	4602      	mov	r2, r0
 80050d6:	61e8      	str	r0, [r5, #28]
 80050d8:	b920      	cbnz	r0, 80050e4 <_Bfree+0x20>
 80050da:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <_Bfree+0x3c>)
 80050dc:	4809      	ldr	r0, [pc, #36]	@ (8005104 <_Bfree+0x40>)
 80050de:	218f      	movs	r1, #143	@ 0x8f
 80050e0:	f000 fc22 	bl	8005928 <__assert_func>
 80050e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050e8:	6006      	str	r6, [r0, #0]
 80050ea:	60c6      	str	r6, [r0, #12]
 80050ec:	b13c      	cbz	r4, 80050fe <_Bfree+0x3a>
 80050ee:	69eb      	ldr	r3, [r5, #28]
 80050f0:	6862      	ldr	r2, [r4, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050f8:	6021      	str	r1, [r4, #0]
 80050fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	080060a1 	.word	0x080060a1
 8005104:	08006132 	.word	0x08006132

08005108 <__multadd>:
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	690d      	ldr	r5, [r1, #16]
 800510e:	4607      	mov	r7, r0
 8005110:	460c      	mov	r4, r1
 8005112:	461e      	mov	r6, r3
 8005114:	f101 0c14 	add.w	ip, r1, #20
 8005118:	2000      	movs	r0, #0
 800511a:	f8dc 3000 	ldr.w	r3, [ip]
 800511e:	b299      	uxth	r1, r3
 8005120:	fb02 6101 	mla	r1, r2, r1, r6
 8005124:	0c1e      	lsrs	r6, r3, #16
 8005126:	0c0b      	lsrs	r3, r1, #16
 8005128:	fb02 3306 	mla	r3, r2, r6, r3
 800512c:	b289      	uxth	r1, r1
 800512e:	3001      	adds	r0, #1
 8005130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005134:	4285      	cmp	r5, r0
 8005136:	f84c 1b04 	str.w	r1, [ip], #4
 800513a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800513e:	dcec      	bgt.n	800511a <__multadd+0x12>
 8005140:	b30e      	cbz	r6, 8005186 <__multadd+0x7e>
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	42ab      	cmp	r3, r5
 8005146:	dc19      	bgt.n	800517c <__multadd+0x74>
 8005148:	6861      	ldr	r1, [r4, #4]
 800514a:	4638      	mov	r0, r7
 800514c:	3101      	adds	r1, #1
 800514e:	f7ff ff79 	bl	8005044 <_Balloc>
 8005152:	4680      	mov	r8, r0
 8005154:	b928      	cbnz	r0, 8005162 <__multadd+0x5a>
 8005156:	4602      	mov	r2, r0
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <__multadd+0x84>)
 800515a:	480d      	ldr	r0, [pc, #52]	@ (8005190 <__multadd+0x88>)
 800515c:	21ba      	movs	r1, #186	@ 0xba
 800515e:	f000 fbe3 	bl	8005928 <__assert_func>
 8005162:	6922      	ldr	r2, [r4, #16]
 8005164:	3202      	adds	r2, #2
 8005166:	f104 010c 	add.w	r1, r4, #12
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	300c      	adds	r0, #12
 800516e:	f000 fbcd 	bl	800590c <memcpy>
 8005172:	4621      	mov	r1, r4
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff ffa5 	bl	80050c4 <_Bfree>
 800517a:	4644      	mov	r4, r8
 800517c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005180:	3501      	adds	r5, #1
 8005182:	615e      	str	r6, [r3, #20]
 8005184:	6125      	str	r5, [r4, #16]
 8005186:	4620      	mov	r0, r4
 8005188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518c:	08006110 	.word	0x08006110
 8005190:	08006132 	.word	0x08006132

08005194 <__hi0bits>:
 8005194:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005198:	4603      	mov	r3, r0
 800519a:	bf36      	itet	cc
 800519c:	0403      	lslcc	r3, r0, #16
 800519e:	2000      	movcs	r0, #0
 80051a0:	2010      	movcc	r0, #16
 80051a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051a6:	bf3c      	itt	cc
 80051a8:	021b      	lslcc	r3, r3, #8
 80051aa:	3008      	addcc	r0, #8
 80051ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b0:	bf3c      	itt	cc
 80051b2:	011b      	lslcc	r3, r3, #4
 80051b4:	3004      	addcc	r0, #4
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ba:	bf3c      	itt	cc
 80051bc:	009b      	lslcc	r3, r3, #2
 80051be:	3002      	addcc	r0, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db05      	blt.n	80051d0 <__hi0bits+0x3c>
 80051c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80051c8:	f100 0001 	add.w	r0, r0, #1
 80051cc:	bf08      	it	eq
 80051ce:	2020      	moveq	r0, #32
 80051d0:	4770      	bx	lr

080051d2 <__lo0bits>:
 80051d2:	6803      	ldr	r3, [r0, #0]
 80051d4:	4602      	mov	r2, r0
 80051d6:	f013 0007 	ands.w	r0, r3, #7
 80051da:	d00b      	beq.n	80051f4 <__lo0bits+0x22>
 80051dc:	07d9      	lsls	r1, r3, #31
 80051de:	d421      	bmi.n	8005224 <__lo0bits+0x52>
 80051e0:	0798      	lsls	r0, r3, #30
 80051e2:	bf49      	itett	mi
 80051e4:	085b      	lsrmi	r3, r3, #1
 80051e6:	089b      	lsrpl	r3, r3, #2
 80051e8:	2001      	movmi	r0, #1
 80051ea:	6013      	strmi	r3, [r2, #0]
 80051ec:	bf5c      	itt	pl
 80051ee:	6013      	strpl	r3, [r2, #0]
 80051f0:	2002      	movpl	r0, #2
 80051f2:	4770      	bx	lr
 80051f4:	b299      	uxth	r1, r3
 80051f6:	b909      	cbnz	r1, 80051fc <__lo0bits+0x2a>
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	2010      	movs	r0, #16
 80051fc:	b2d9      	uxtb	r1, r3
 80051fe:	b909      	cbnz	r1, 8005204 <__lo0bits+0x32>
 8005200:	3008      	adds	r0, #8
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	0719      	lsls	r1, r3, #28
 8005206:	bf04      	itt	eq
 8005208:	091b      	lsreq	r3, r3, #4
 800520a:	3004      	addeq	r0, #4
 800520c:	0799      	lsls	r1, r3, #30
 800520e:	bf04      	itt	eq
 8005210:	089b      	lsreq	r3, r3, #2
 8005212:	3002      	addeq	r0, #2
 8005214:	07d9      	lsls	r1, r3, #31
 8005216:	d403      	bmi.n	8005220 <__lo0bits+0x4e>
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	f100 0001 	add.w	r0, r0, #1
 800521e:	d003      	beq.n	8005228 <__lo0bits+0x56>
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	4770      	bx	lr
 8005224:	2000      	movs	r0, #0
 8005226:	4770      	bx	lr
 8005228:	2020      	movs	r0, #32
 800522a:	4770      	bx	lr

0800522c <__i2b>:
 800522c:	b510      	push	{r4, lr}
 800522e:	460c      	mov	r4, r1
 8005230:	2101      	movs	r1, #1
 8005232:	f7ff ff07 	bl	8005044 <_Balloc>
 8005236:	4602      	mov	r2, r0
 8005238:	b928      	cbnz	r0, 8005246 <__i2b+0x1a>
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <__i2b+0x24>)
 800523c:	4805      	ldr	r0, [pc, #20]	@ (8005254 <__i2b+0x28>)
 800523e:	f240 1145 	movw	r1, #325	@ 0x145
 8005242:	f000 fb71 	bl	8005928 <__assert_func>
 8005246:	2301      	movs	r3, #1
 8005248:	6144      	str	r4, [r0, #20]
 800524a:	6103      	str	r3, [r0, #16]
 800524c:	bd10      	pop	{r4, pc}
 800524e:	bf00      	nop
 8005250:	08006110 	.word	0x08006110
 8005254:	08006132 	.word	0x08006132

08005258 <__multiply>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	4614      	mov	r4, r2
 800525e:	690a      	ldr	r2, [r1, #16]
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	429a      	cmp	r2, r3
 8005264:	bfa8      	it	ge
 8005266:	4623      	movge	r3, r4
 8005268:	460f      	mov	r7, r1
 800526a:	bfa4      	itt	ge
 800526c:	460c      	movge	r4, r1
 800526e:	461f      	movge	r7, r3
 8005270:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005274:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	6861      	ldr	r1, [r4, #4]
 800527c:	eb0a 0609 	add.w	r6, sl, r9
 8005280:	42b3      	cmp	r3, r6
 8005282:	b085      	sub	sp, #20
 8005284:	bfb8      	it	lt
 8005286:	3101      	addlt	r1, #1
 8005288:	f7ff fedc 	bl	8005044 <_Balloc>
 800528c:	b930      	cbnz	r0, 800529c <__multiply+0x44>
 800528e:	4602      	mov	r2, r0
 8005290:	4b44      	ldr	r3, [pc, #272]	@ (80053a4 <__multiply+0x14c>)
 8005292:	4845      	ldr	r0, [pc, #276]	@ (80053a8 <__multiply+0x150>)
 8005294:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005298:	f000 fb46 	bl	8005928 <__assert_func>
 800529c:	f100 0514 	add.w	r5, r0, #20
 80052a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052a4:	462b      	mov	r3, r5
 80052a6:	2200      	movs	r2, #0
 80052a8:	4543      	cmp	r3, r8
 80052aa:	d321      	bcc.n	80052f0 <__multiply+0x98>
 80052ac:	f107 0114 	add.w	r1, r7, #20
 80052b0:	f104 0214 	add.w	r2, r4, #20
 80052b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80052b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80052bc:	9302      	str	r3, [sp, #8]
 80052be:	1b13      	subs	r3, r2, r4
 80052c0:	3b15      	subs	r3, #21
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	3304      	adds	r3, #4
 80052c8:	f104 0715 	add.w	r7, r4, #21
 80052cc:	42ba      	cmp	r2, r7
 80052ce:	bf38      	it	cc
 80052d0:	2304      	movcc	r3, #4
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	9b02      	ldr	r3, [sp, #8]
 80052d6:	9103      	str	r1, [sp, #12]
 80052d8:	428b      	cmp	r3, r1
 80052da:	d80c      	bhi.n	80052f6 <__multiply+0x9e>
 80052dc:	2e00      	cmp	r6, #0
 80052de:	dd03      	ble.n	80052e8 <__multiply+0x90>
 80052e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05b      	beq.n	80053a0 <__multiply+0x148>
 80052e8:	6106      	str	r6, [r0, #16]
 80052ea:	b005      	add	sp, #20
 80052ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f0:	f843 2b04 	str.w	r2, [r3], #4
 80052f4:	e7d8      	b.n	80052a8 <__multiply+0x50>
 80052f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80052fa:	f1ba 0f00 	cmp.w	sl, #0
 80052fe:	d024      	beq.n	800534a <__multiply+0xf2>
 8005300:	f104 0e14 	add.w	lr, r4, #20
 8005304:	46a9      	mov	r9, r5
 8005306:	f04f 0c00 	mov.w	ip, #0
 800530a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800530e:	f8d9 3000 	ldr.w	r3, [r9]
 8005312:	fa1f fb87 	uxth.w	fp, r7
 8005316:	b29b      	uxth	r3, r3
 8005318:	fb0a 330b 	mla	r3, sl, fp, r3
 800531c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005320:	f8d9 7000 	ldr.w	r7, [r9]
 8005324:	4463      	add	r3, ip
 8005326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800532a:	fb0a c70b 	mla	r7, sl, fp, ip
 800532e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005332:	b29b      	uxth	r3, r3
 8005334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005338:	4572      	cmp	r2, lr
 800533a:	f849 3b04 	str.w	r3, [r9], #4
 800533e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005342:	d8e2      	bhi.n	800530a <__multiply+0xb2>
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	f845 c003 	str.w	ip, [r5, r3]
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005350:	3104      	adds	r1, #4
 8005352:	f1b9 0f00 	cmp.w	r9, #0
 8005356:	d021      	beq.n	800539c <__multiply+0x144>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	f104 0c14 	add.w	ip, r4, #20
 800535e:	46ae      	mov	lr, r5
 8005360:	f04f 0a00 	mov.w	sl, #0
 8005364:	f8bc b000 	ldrh.w	fp, [ip]
 8005368:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800536c:	fb09 770b 	mla	r7, r9, fp, r7
 8005370:	4457      	add	r7, sl
 8005372:	b29b      	uxth	r3, r3
 8005374:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005378:	f84e 3b04 	str.w	r3, [lr], #4
 800537c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005384:	f8be 3000 	ldrh.w	r3, [lr]
 8005388:	fb09 330a 	mla	r3, r9, sl, r3
 800538c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005390:	4562      	cmp	r2, ip
 8005392:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005396:	d8e5      	bhi.n	8005364 <__multiply+0x10c>
 8005398:	9f01      	ldr	r7, [sp, #4]
 800539a:	51eb      	str	r3, [r5, r7]
 800539c:	3504      	adds	r5, #4
 800539e:	e799      	b.n	80052d4 <__multiply+0x7c>
 80053a0:	3e01      	subs	r6, #1
 80053a2:	e79b      	b.n	80052dc <__multiply+0x84>
 80053a4:	08006110 	.word	0x08006110
 80053a8:	08006132 	.word	0x08006132

080053ac <__pow5mult>:
 80053ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b0:	4615      	mov	r5, r2
 80053b2:	f012 0203 	ands.w	r2, r2, #3
 80053b6:	4607      	mov	r7, r0
 80053b8:	460e      	mov	r6, r1
 80053ba:	d007      	beq.n	80053cc <__pow5mult+0x20>
 80053bc:	4c25      	ldr	r4, [pc, #148]	@ (8005454 <__pow5mult+0xa8>)
 80053be:	3a01      	subs	r2, #1
 80053c0:	2300      	movs	r3, #0
 80053c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053c6:	f7ff fe9f 	bl	8005108 <__multadd>
 80053ca:	4606      	mov	r6, r0
 80053cc:	10ad      	asrs	r5, r5, #2
 80053ce:	d03d      	beq.n	800544c <__pow5mult+0xa0>
 80053d0:	69fc      	ldr	r4, [r7, #28]
 80053d2:	b97c      	cbnz	r4, 80053f4 <__pow5mult+0x48>
 80053d4:	2010      	movs	r0, #16
 80053d6:	f7ff fcd3 	bl	8004d80 <malloc>
 80053da:	4602      	mov	r2, r0
 80053dc:	61f8      	str	r0, [r7, #28]
 80053de:	b928      	cbnz	r0, 80053ec <__pow5mult+0x40>
 80053e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005458 <__pow5mult+0xac>)
 80053e2:	481e      	ldr	r0, [pc, #120]	@ (800545c <__pow5mult+0xb0>)
 80053e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80053e8:	f000 fa9e 	bl	8005928 <__assert_func>
 80053ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053f0:	6004      	str	r4, [r0, #0]
 80053f2:	60c4      	str	r4, [r0, #12]
 80053f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80053f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053fc:	b94c      	cbnz	r4, 8005412 <__pow5mult+0x66>
 80053fe:	f240 2171 	movw	r1, #625	@ 0x271
 8005402:	4638      	mov	r0, r7
 8005404:	f7ff ff12 	bl	800522c <__i2b>
 8005408:	2300      	movs	r3, #0
 800540a:	f8c8 0008 	str.w	r0, [r8, #8]
 800540e:	4604      	mov	r4, r0
 8005410:	6003      	str	r3, [r0, #0]
 8005412:	f04f 0900 	mov.w	r9, #0
 8005416:	07eb      	lsls	r3, r5, #31
 8005418:	d50a      	bpl.n	8005430 <__pow5mult+0x84>
 800541a:	4631      	mov	r1, r6
 800541c:	4622      	mov	r2, r4
 800541e:	4638      	mov	r0, r7
 8005420:	f7ff ff1a 	bl	8005258 <__multiply>
 8005424:	4631      	mov	r1, r6
 8005426:	4680      	mov	r8, r0
 8005428:	4638      	mov	r0, r7
 800542a:	f7ff fe4b 	bl	80050c4 <_Bfree>
 800542e:	4646      	mov	r6, r8
 8005430:	106d      	asrs	r5, r5, #1
 8005432:	d00b      	beq.n	800544c <__pow5mult+0xa0>
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	b938      	cbnz	r0, 8005448 <__pow5mult+0x9c>
 8005438:	4622      	mov	r2, r4
 800543a:	4621      	mov	r1, r4
 800543c:	4638      	mov	r0, r7
 800543e:	f7ff ff0b 	bl	8005258 <__multiply>
 8005442:	6020      	str	r0, [r4, #0]
 8005444:	f8c0 9000 	str.w	r9, [r0]
 8005448:	4604      	mov	r4, r0
 800544a:	e7e4      	b.n	8005416 <__pow5mult+0x6a>
 800544c:	4630      	mov	r0, r6
 800544e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005452:	bf00      	nop
 8005454:	0800618c 	.word	0x0800618c
 8005458:	080060a1 	.word	0x080060a1
 800545c:	08006132 	.word	0x08006132

08005460 <__lshift>:
 8005460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005464:	460c      	mov	r4, r1
 8005466:	6849      	ldr	r1, [r1, #4]
 8005468:	6923      	ldr	r3, [r4, #16]
 800546a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	4607      	mov	r7, r0
 8005472:	4691      	mov	r9, r2
 8005474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005478:	f108 0601 	add.w	r6, r8, #1
 800547c:	42b3      	cmp	r3, r6
 800547e:	db0b      	blt.n	8005498 <__lshift+0x38>
 8005480:	4638      	mov	r0, r7
 8005482:	f7ff fddf 	bl	8005044 <_Balloc>
 8005486:	4605      	mov	r5, r0
 8005488:	b948      	cbnz	r0, 800549e <__lshift+0x3e>
 800548a:	4602      	mov	r2, r0
 800548c:	4b28      	ldr	r3, [pc, #160]	@ (8005530 <__lshift+0xd0>)
 800548e:	4829      	ldr	r0, [pc, #164]	@ (8005534 <__lshift+0xd4>)
 8005490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005494:	f000 fa48 	bl	8005928 <__assert_func>
 8005498:	3101      	adds	r1, #1
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	e7ee      	b.n	800547c <__lshift+0x1c>
 800549e:	2300      	movs	r3, #0
 80054a0:	f100 0114 	add.w	r1, r0, #20
 80054a4:	f100 0210 	add.w	r2, r0, #16
 80054a8:	4618      	mov	r0, r3
 80054aa:	4553      	cmp	r3, sl
 80054ac:	db33      	blt.n	8005516 <__lshift+0xb6>
 80054ae:	6920      	ldr	r0, [r4, #16]
 80054b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054b4:	f104 0314 	add.w	r3, r4, #20
 80054b8:	f019 091f 	ands.w	r9, r9, #31
 80054bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054c4:	d02b      	beq.n	800551e <__lshift+0xbe>
 80054c6:	f1c9 0e20 	rsb	lr, r9, #32
 80054ca:	468a      	mov	sl, r1
 80054cc:	2200      	movs	r2, #0
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	fa00 f009 	lsl.w	r0, r0, r9
 80054d4:	4310      	orrs	r0, r2
 80054d6:	f84a 0b04 	str.w	r0, [sl], #4
 80054da:	f853 2b04 	ldr.w	r2, [r3], #4
 80054de:	459c      	cmp	ip, r3
 80054e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80054e4:	d8f3      	bhi.n	80054ce <__lshift+0x6e>
 80054e6:	ebac 0304 	sub.w	r3, ip, r4
 80054ea:	3b15      	subs	r3, #21
 80054ec:	f023 0303 	bic.w	r3, r3, #3
 80054f0:	3304      	adds	r3, #4
 80054f2:	f104 0015 	add.w	r0, r4, #21
 80054f6:	4584      	cmp	ip, r0
 80054f8:	bf38      	it	cc
 80054fa:	2304      	movcc	r3, #4
 80054fc:	50ca      	str	r2, [r1, r3]
 80054fe:	b10a      	cbz	r2, 8005504 <__lshift+0xa4>
 8005500:	f108 0602 	add.w	r6, r8, #2
 8005504:	3e01      	subs	r6, #1
 8005506:	4638      	mov	r0, r7
 8005508:	612e      	str	r6, [r5, #16]
 800550a:	4621      	mov	r1, r4
 800550c:	f7ff fdda 	bl	80050c4 <_Bfree>
 8005510:	4628      	mov	r0, r5
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	f842 0f04 	str.w	r0, [r2, #4]!
 800551a:	3301      	adds	r3, #1
 800551c:	e7c5      	b.n	80054aa <__lshift+0x4a>
 800551e:	3904      	subs	r1, #4
 8005520:	f853 2b04 	ldr.w	r2, [r3], #4
 8005524:	f841 2f04 	str.w	r2, [r1, #4]!
 8005528:	459c      	cmp	ip, r3
 800552a:	d8f9      	bhi.n	8005520 <__lshift+0xc0>
 800552c:	e7ea      	b.n	8005504 <__lshift+0xa4>
 800552e:	bf00      	nop
 8005530:	08006110 	.word	0x08006110
 8005534:	08006132 	.word	0x08006132

08005538 <__mcmp>:
 8005538:	690a      	ldr	r2, [r1, #16]
 800553a:	4603      	mov	r3, r0
 800553c:	6900      	ldr	r0, [r0, #16]
 800553e:	1a80      	subs	r0, r0, r2
 8005540:	b530      	push	{r4, r5, lr}
 8005542:	d10e      	bne.n	8005562 <__mcmp+0x2a>
 8005544:	3314      	adds	r3, #20
 8005546:	3114      	adds	r1, #20
 8005548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800554c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005558:	4295      	cmp	r5, r2
 800555a:	d003      	beq.n	8005564 <__mcmp+0x2c>
 800555c:	d205      	bcs.n	800556a <__mcmp+0x32>
 800555e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005562:	bd30      	pop	{r4, r5, pc}
 8005564:	42a3      	cmp	r3, r4
 8005566:	d3f3      	bcc.n	8005550 <__mcmp+0x18>
 8005568:	e7fb      	b.n	8005562 <__mcmp+0x2a>
 800556a:	2001      	movs	r0, #1
 800556c:	e7f9      	b.n	8005562 <__mcmp+0x2a>
	...

08005570 <__mdiff>:
 8005570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	4689      	mov	r9, r1
 8005576:	4606      	mov	r6, r0
 8005578:	4611      	mov	r1, r2
 800557a:	4648      	mov	r0, r9
 800557c:	4614      	mov	r4, r2
 800557e:	f7ff ffdb 	bl	8005538 <__mcmp>
 8005582:	1e05      	subs	r5, r0, #0
 8005584:	d112      	bne.n	80055ac <__mdiff+0x3c>
 8005586:	4629      	mov	r1, r5
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff fd5b 	bl	8005044 <_Balloc>
 800558e:	4602      	mov	r2, r0
 8005590:	b928      	cbnz	r0, 800559e <__mdiff+0x2e>
 8005592:	4b3f      	ldr	r3, [pc, #252]	@ (8005690 <__mdiff+0x120>)
 8005594:	f240 2137 	movw	r1, #567	@ 0x237
 8005598:	483e      	ldr	r0, [pc, #248]	@ (8005694 <__mdiff+0x124>)
 800559a:	f000 f9c5 	bl	8005928 <__assert_func>
 800559e:	2301      	movs	r3, #1
 80055a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055a4:	4610      	mov	r0, r2
 80055a6:	b003      	add	sp, #12
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	bfbc      	itt	lt
 80055ae:	464b      	movlt	r3, r9
 80055b0:	46a1      	movlt	r9, r4
 80055b2:	4630      	mov	r0, r6
 80055b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80055b8:	bfba      	itte	lt
 80055ba:	461c      	movlt	r4, r3
 80055bc:	2501      	movlt	r5, #1
 80055be:	2500      	movge	r5, #0
 80055c0:	f7ff fd40 	bl	8005044 <_Balloc>
 80055c4:	4602      	mov	r2, r0
 80055c6:	b918      	cbnz	r0, 80055d0 <__mdiff+0x60>
 80055c8:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <__mdiff+0x120>)
 80055ca:	f240 2145 	movw	r1, #581	@ 0x245
 80055ce:	e7e3      	b.n	8005598 <__mdiff+0x28>
 80055d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80055d4:	6926      	ldr	r6, [r4, #16]
 80055d6:	60c5      	str	r5, [r0, #12]
 80055d8:	f109 0310 	add.w	r3, r9, #16
 80055dc:	f109 0514 	add.w	r5, r9, #20
 80055e0:	f104 0e14 	add.w	lr, r4, #20
 80055e4:	f100 0b14 	add.w	fp, r0, #20
 80055e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80055ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	46d9      	mov	r9, fp
 80055f4:	f04f 0c00 	mov.w	ip, #0
 80055f8:	9b01      	ldr	r3, [sp, #4]
 80055fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80055fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	fa1f f38a 	uxth.w	r3, sl
 8005608:	4619      	mov	r1, r3
 800560a:	b283      	uxth	r3, r0
 800560c:	1acb      	subs	r3, r1, r3
 800560e:	0c00      	lsrs	r0, r0, #16
 8005610:	4463      	add	r3, ip
 8005612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005620:	4576      	cmp	r6, lr
 8005622:	f849 3b04 	str.w	r3, [r9], #4
 8005626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800562a:	d8e5      	bhi.n	80055f8 <__mdiff+0x88>
 800562c:	1b33      	subs	r3, r6, r4
 800562e:	3b15      	subs	r3, #21
 8005630:	f023 0303 	bic.w	r3, r3, #3
 8005634:	3415      	adds	r4, #21
 8005636:	3304      	adds	r3, #4
 8005638:	42a6      	cmp	r6, r4
 800563a:	bf38      	it	cc
 800563c:	2304      	movcc	r3, #4
 800563e:	441d      	add	r5, r3
 8005640:	445b      	add	r3, fp
 8005642:	461e      	mov	r6, r3
 8005644:	462c      	mov	r4, r5
 8005646:	4544      	cmp	r4, r8
 8005648:	d30e      	bcc.n	8005668 <__mdiff+0xf8>
 800564a:	f108 0103 	add.w	r1, r8, #3
 800564e:	1b49      	subs	r1, r1, r5
 8005650:	f021 0103 	bic.w	r1, r1, #3
 8005654:	3d03      	subs	r5, #3
 8005656:	45a8      	cmp	r8, r5
 8005658:	bf38      	it	cc
 800565a:	2100      	movcc	r1, #0
 800565c:	440b      	add	r3, r1
 800565e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005662:	b191      	cbz	r1, 800568a <__mdiff+0x11a>
 8005664:	6117      	str	r7, [r2, #16]
 8005666:	e79d      	b.n	80055a4 <__mdiff+0x34>
 8005668:	f854 1b04 	ldr.w	r1, [r4], #4
 800566c:	46e6      	mov	lr, ip
 800566e:	0c08      	lsrs	r0, r1, #16
 8005670:	fa1c fc81 	uxtah	ip, ip, r1
 8005674:	4471      	add	r1, lr
 8005676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800567a:	b289      	uxth	r1, r1
 800567c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005680:	f846 1b04 	str.w	r1, [r6], #4
 8005684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005688:	e7dd      	b.n	8005646 <__mdiff+0xd6>
 800568a:	3f01      	subs	r7, #1
 800568c:	e7e7      	b.n	800565e <__mdiff+0xee>
 800568e:	bf00      	nop
 8005690:	08006110 	.word	0x08006110
 8005694:	08006132 	.word	0x08006132

08005698 <__d2b>:
 8005698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800569c:	460f      	mov	r7, r1
 800569e:	2101      	movs	r1, #1
 80056a0:	ec59 8b10 	vmov	r8, r9, d0
 80056a4:	4616      	mov	r6, r2
 80056a6:	f7ff fccd 	bl	8005044 <_Balloc>
 80056aa:	4604      	mov	r4, r0
 80056ac:	b930      	cbnz	r0, 80056bc <__d2b+0x24>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b23      	ldr	r3, [pc, #140]	@ (8005740 <__d2b+0xa8>)
 80056b2:	4824      	ldr	r0, [pc, #144]	@ (8005744 <__d2b+0xac>)
 80056b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80056b8:	f000 f936 	bl	8005928 <__assert_func>
 80056bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056c4:	b10d      	cbz	r5, 80056ca <__d2b+0x32>
 80056c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	f1b8 0300 	subs.w	r3, r8, #0
 80056d0:	d023      	beq.n	800571a <__d2b+0x82>
 80056d2:	4668      	mov	r0, sp
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	f7ff fd7c 	bl	80051d2 <__lo0bits>
 80056da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80056de:	b1d0      	cbz	r0, 8005716 <__d2b+0x7e>
 80056e0:	f1c0 0320 	rsb	r3, r0, #32
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	430b      	orrs	r3, r1
 80056ea:	40c2      	lsrs	r2, r0
 80056ec:	6163      	str	r3, [r4, #20]
 80056ee:	9201      	str	r2, [sp, #4]
 80056f0:	9b01      	ldr	r3, [sp, #4]
 80056f2:	61a3      	str	r3, [r4, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2201      	moveq	r2, #1
 80056fa:	2202      	movne	r2, #2
 80056fc:	6122      	str	r2, [r4, #16]
 80056fe:	b1a5      	cbz	r5, 800572a <__d2b+0x92>
 8005700:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005704:	4405      	add	r5, r0
 8005706:	603d      	str	r5, [r7, #0]
 8005708:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800570c:	6030      	str	r0, [r6, #0]
 800570e:	4620      	mov	r0, r4
 8005710:	b003      	add	sp, #12
 8005712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005716:	6161      	str	r1, [r4, #20]
 8005718:	e7ea      	b.n	80056f0 <__d2b+0x58>
 800571a:	a801      	add	r0, sp, #4
 800571c:	f7ff fd59 	bl	80051d2 <__lo0bits>
 8005720:	9b01      	ldr	r3, [sp, #4]
 8005722:	6163      	str	r3, [r4, #20]
 8005724:	3020      	adds	r0, #32
 8005726:	2201      	movs	r2, #1
 8005728:	e7e8      	b.n	80056fc <__d2b+0x64>
 800572a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800572e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005732:	6038      	str	r0, [r7, #0]
 8005734:	6918      	ldr	r0, [r3, #16]
 8005736:	f7ff fd2d 	bl	8005194 <__hi0bits>
 800573a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800573e:	e7e5      	b.n	800570c <__d2b+0x74>
 8005740:	08006110 	.word	0x08006110
 8005744:	08006132 	.word	0x08006132

08005748 <__sread>:
 8005748:	b510      	push	{r4, lr}
 800574a:	460c      	mov	r4, r1
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	f000 f8a8 	bl	80058a4 <_read_r>
 8005754:	2800      	cmp	r0, #0
 8005756:	bfab      	itete	ge
 8005758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800575a:	89a3      	ldrhlt	r3, [r4, #12]
 800575c:	181b      	addge	r3, r3, r0
 800575e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005762:	bfac      	ite	ge
 8005764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005766:	81a3      	strhlt	r3, [r4, #12]
 8005768:	bd10      	pop	{r4, pc}

0800576a <__swrite>:
 800576a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	461f      	mov	r7, r3
 8005770:	898b      	ldrh	r3, [r1, #12]
 8005772:	05db      	lsls	r3, r3, #23
 8005774:	4605      	mov	r5, r0
 8005776:	460c      	mov	r4, r1
 8005778:	4616      	mov	r6, r2
 800577a:	d505      	bpl.n	8005788 <__swrite+0x1e>
 800577c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005780:	2302      	movs	r3, #2
 8005782:	2200      	movs	r2, #0
 8005784:	f000 f87c 	bl	8005880 <_lseek_r>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800578e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	4632      	mov	r2, r6
 8005796:	463b      	mov	r3, r7
 8005798:	4628      	mov	r0, r5
 800579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	f000 b8a3 	b.w	80058e8 <_write_r>

080057a2 <__sseek>:
 80057a2:	b510      	push	{r4, lr}
 80057a4:	460c      	mov	r4, r1
 80057a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057aa:	f000 f869 	bl	8005880 <_lseek_r>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	bf15      	itete	ne
 80057b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057be:	81a3      	strheq	r3, [r4, #12]
 80057c0:	bf18      	it	ne
 80057c2:	81a3      	strhne	r3, [r4, #12]
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <__sclose>:
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 b849 	b.w	8005860 <_close_r>

080057ce <_realloc_r>:
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	4680      	mov	r8, r0
 80057d4:	4615      	mov	r5, r2
 80057d6:	460c      	mov	r4, r1
 80057d8:	b921      	cbnz	r1, 80057e4 <_realloc_r+0x16>
 80057da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	4611      	mov	r1, r2
 80057e0:	f7ff baf8 	b.w	8004dd4 <_malloc_r>
 80057e4:	b92a      	cbnz	r2, 80057f2 <_realloc_r+0x24>
 80057e6:	f000 f8d1 	bl	800598c <_free_r>
 80057ea:	2400      	movs	r4, #0
 80057ec:	4620      	mov	r0, r4
 80057ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f2:	f000 f927 	bl	8005a44 <_malloc_usable_size_r>
 80057f6:	4285      	cmp	r5, r0
 80057f8:	4606      	mov	r6, r0
 80057fa:	d802      	bhi.n	8005802 <_realloc_r+0x34>
 80057fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005800:	d8f4      	bhi.n	80057ec <_realloc_r+0x1e>
 8005802:	4629      	mov	r1, r5
 8005804:	4640      	mov	r0, r8
 8005806:	f7ff fae5 	bl	8004dd4 <_malloc_r>
 800580a:	4607      	mov	r7, r0
 800580c:	2800      	cmp	r0, #0
 800580e:	d0ec      	beq.n	80057ea <_realloc_r+0x1c>
 8005810:	42b5      	cmp	r5, r6
 8005812:	462a      	mov	r2, r5
 8005814:	4621      	mov	r1, r4
 8005816:	bf28      	it	cs
 8005818:	4632      	movcs	r2, r6
 800581a:	f000 f877 	bl	800590c <memcpy>
 800581e:	4621      	mov	r1, r4
 8005820:	4640      	mov	r0, r8
 8005822:	f000 f8b3 	bl	800598c <_free_r>
 8005826:	463c      	mov	r4, r7
 8005828:	e7e0      	b.n	80057ec <_realloc_r+0x1e>

0800582a <memmove>:
 800582a:	4288      	cmp	r0, r1
 800582c:	b510      	push	{r4, lr}
 800582e:	eb01 0402 	add.w	r4, r1, r2
 8005832:	d902      	bls.n	800583a <memmove+0x10>
 8005834:	4284      	cmp	r4, r0
 8005836:	4623      	mov	r3, r4
 8005838:	d807      	bhi.n	800584a <memmove+0x20>
 800583a:	1e43      	subs	r3, r0, #1
 800583c:	42a1      	cmp	r1, r4
 800583e:	d008      	beq.n	8005852 <memmove+0x28>
 8005840:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005844:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005848:	e7f8      	b.n	800583c <memmove+0x12>
 800584a:	4402      	add	r2, r0
 800584c:	4601      	mov	r1, r0
 800584e:	428a      	cmp	r2, r1
 8005850:	d100      	bne.n	8005854 <memmove+0x2a>
 8005852:	bd10      	pop	{r4, pc}
 8005854:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005858:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800585c:	e7f7      	b.n	800584e <memmove+0x24>
	...

08005860 <_close_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	4d06      	ldr	r5, [pc, #24]	@ (800587c <_close_r+0x1c>)
 8005864:	2300      	movs	r3, #0
 8005866:	4604      	mov	r4, r0
 8005868:	4608      	mov	r0, r1
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	f7fb ff91 	bl	8001792 <_close>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_close_r+0x1a>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	b103      	cbz	r3, 800587a <_close_r+0x1a>
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	20000388 	.word	0x20000388

08005880 <_lseek_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d07      	ldr	r5, [pc, #28]	@ (80058a0 <_lseek_r+0x20>)
 8005884:	4604      	mov	r4, r0
 8005886:	4608      	mov	r0, r1
 8005888:	4611      	mov	r1, r2
 800588a:	2200      	movs	r2, #0
 800588c:	602a      	str	r2, [r5, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	f7fb ffa6 	bl	80017e0 <_lseek>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d102      	bne.n	800589e <_lseek_r+0x1e>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	b103      	cbz	r3, 800589e <_lseek_r+0x1e>
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	bd38      	pop	{r3, r4, r5, pc}
 80058a0:	20000388 	.word	0x20000388

080058a4 <_read_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	@ (80058c4 <_read_r+0x20>)
 80058a8:	4604      	mov	r4, r0
 80058aa:	4608      	mov	r0, r1
 80058ac:	4611      	mov	r1, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	602a      	str	r2, [r5, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fb ff34 	bl	8001720 <_read>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_read_r+0x1e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_read_r+0x1e>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000388 	.word	0x20000388

080058c8 <_sbrk_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d06      	ldr	r5, [pc, #24]	@ (80058e4 <_sbrk_r+0x1c>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fb ff92 	bl	80017fc <_sbrk>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_sbrk_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_sbrk_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000388 	.word	0x20000388

080058e8 <_write_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d07      	ldr	r5, [pc, #28]	@ (8005908 <_write_r+0x20>)
 80058ec:	4604      	mov	r4, r0
 80058ee:	4608      	mov	r0, r1
 80058f0:	4611      	mov	r1, r2
 80058f2:	2200      	movs	r2, #0
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f7fb ff2f 	bl	800175a <_write>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_write_r+0x1e>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_write_r+0x1e>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000388 	.word	0x20000388

0800590c <memcpy>:
 800590c:	440a      	add	r2, r1
 800590e:	4291      	cmp	r1, r2
 8005910:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005914:	d100      	bne.n	8005918 <memcpy+0xc>
 8005916:	4770      	bx	lr
 8005918:	b510      	push	{r4, lr}
 800591a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800591e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005922:	4291      	cmp	r1, r2
 8005924:	d1f9      	bne.n	800591a <memcpy+0xe>
 8005926:	bd10      	pop	{r4, pc}

08005928 <__assert_func>:
 8005928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800592a:	4614      	mov	r4, r2
 800592c:	461a      	mov	r2, r3
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <__assert_func+0x2c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4605      	mov	r5, r0
 8005934:	68d8      	ldr	r0, [r3, #12]
 8005936:	b954      	cbnz	r4, 800594e <__assert_func+0x26>
 8005938:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <__assert_func+0x30>)
 800593a:	461c      	mov	r4, r3
 800593c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005940:	9100      	str	r1, [sp, #0]
 8005942:	462b      	mov	r3, r5
 8005944:	4905      	ldr	r1, [pc, #20]	@ (800595c <__assert_func+0x34>)
 8005946:	f000 f885 	bl	8005a54 <fiprintf>
 800594a:	f000 f8a2 	bl	8005a92 <abort>
 800594e:	4b04      	ldr	r3, [pc, #16]	@ (8005960 <__assert_func+0x38>)
 8005950:	e7f4      	b.n	800593c <__assert_func+0x14>
 8005952:	bf00      	nop
 8005954:	20000018 	.word	0x20000018
 8005958:	080063ce 	.word	0x080063ce
 800595c:	080063a0 	.word	0x080063a0
 8005960:	08006393 	.word	0x08006393

08005964 <_calloc_r>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	fba1 5402 	umull	r5, r4, r1, r2
 800596a:	b93c      	cbnz	r4, 800597c <_calloc_r+0x18>
 800596c:	4629      	mov	r1, r5
 800596e:	f7ff fa31 	bl	8004dd4 <_malloc_r>
 8005972:	4606      	mov	r6, r0
 8005974:	b928      	cbnz	r0, 8005982 <_calloc_r+0x1e>
 8005976:	2600      	movs	r6, #0
 8005978:	4630      	mov	r0, r6
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	220c      	movs	r2, #12
 800597e:	6002      	str	r2, [r0, #0]
 8005980:	e7f9      	b.n	8005976 <_calloc_r+0x12>
 8005982:	462a      	mov	r2, r5
 8005984:	4621      	mov	r1, r4
 8005986:	f7fe fa1b 	bl	8003dc0 <memset>
 800598a:	e7f5      	b.n	8005978 <_calloc_r+0x14>

0800598c <_free_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4605      	mov	r5, r0
 8005990:	2900      	cmp	r1, #0
 8005992:	d041      	beq.n	8005a18 <_free_r+0x8c>
 8005994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005998:	1f0c      	subs	r4, r1, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfb8      	it	lt
 800599e:	18e4      	addlt	r4, r4, r3
 80059a0:	f7ff fb44 	bl	800502c <__malloc_lock>
 80059a4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a1c <_free_r+0x90>)
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	b933      	cbnz	r3, 80059b8 <_free_r+0x2c>
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	6014      	str	r4, [r2, #0]
 80059ae:	4628      	mov	r0, r5
 80059b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059b4:	f7ff bb40 	b.w	8005038 <__malloc_unlock>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d908      	bls.n	80059ce <_free_r+0x42>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	1821      	adds	r1, r4, r0
 80059c0:	428b      	cmp	r3, r1
 80059c2:	bf01      	itttt	eq
 80059c4:	6819      	ldreq	r1, [r3, #0]
 80059c6:	685b      	ldreq	r3, [r3, #4]
 80059c8:	1809      	addeq	r1, r1, r0
 80059ca:	6021      	streq	r1, [r4, #0]
 80059cc:	e7ed      	b.n	80059aa <_free_r+0x1e>
 80059ce:	461a      	mov	r2, r3
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	b10b      	cbz	r3, 80059d8 <_free_r+0x4c>
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	d9fa      	bls.n	80059ce <_free_r+0x42>
 80059d8:	6811      	ldr	r1, [r2, #0]
 80059da:	1850      	adds	r0, r2, r1
 80059dc:	42a0      	cmp	r0, r4
 80059de:	d10b      	bne.n	80059f8 <_free_r+0x6c>
 80059e0:	6820      	ldr	r0, [r4, #0]
 80059e2:	4401      	add	r1, r0
 80059e4:	1850      	adds	r0, r2, r1
 80059e6:	4283      	cmp	r3, r0
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	d1e0      	bne.n	80059ae <_free_r+0x22>
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	6053      	str	r3, [r2, #4]
 80059f2:	4408      	add	r0, r1
 80059f4:	6010      	str	r0, [r2, #0]
 80059f6:	e7da      	b.n	80059ae <_free_r+0x22>
 80059f8:	d902      	bls.n	8005a00 <_free_r+0x74>
 80059fa:	230c      	movs	r3, #12
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	e7d6      	b.n	80059ae <_free_r+0x22>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	1821      	adds	r1, r4, r0
 8005a04:	428b      	cmp	r3, r1
 8005a06:	bf04      	itt	eq
 8005a08:	6819      	ldreq	r1, [r3, #0]
 8005a0a:	685b      	ldreq	r3, [r3, #4]
 8005a0c:	6063      	str	r3, [r4, #4]
 8005a0e:	bf04      	itt	eq
 8005a10:	1809      	addeq	r1, r1, r0
 8005a12:	6021      	streq	r1, [r4, #0]
 8005a14:	6054      	str	r4, [r2, #4]
 8005a16:	e7ca      	b.n	80059ae <_free_r+0x22>
 8005a18:	bd38      	pop	{r3, r4, r5, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000384 	.word	0x20000384

08005a20 <__ascii_mbtowc>:
 8005a20:	b082      	sub	sp, #8
 8005a22:	b901      	cbnz	r1, 8005a26 <__ascii_mbtowc+0x6>
 8005a24:	a901      	add	r1, sp, #4
 8005a26:	b142      	cbz	r2, 8005a3a <__ascii_mbtowc+0x1a>
 8005a28:	b14b      	cbz	r3, 8005a3e <__ascii_mbtowc+0x1e>
 8005a2a:	7813      	ldrb	r3, [r2, #0]
 8005a2c:	600b      	str	r3, [r1, #0]
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	1e10      	subs	r0, r2, #0
 8005a32:	bf18      	it	ne
 8005a34:	2001      	movne	r0, #1
 8005a36:	b002      	add	sp, #8
 8005a38:	4770      	bx	lr
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	e7fb      	b.n	8005a36 <__ascii_mbtowc+0x16>
 8005a3e:	f06f 0001 	mvn.w	r0, #1
 8005a42:	e7f8      	b.n	8005a36 <__ascii_mbtowc+0x16>

08005a44 <_malloc_usable_size_r>:
 8005a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a48:	1f18      	subs	r0, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bfbc      	itt	lt
 8005a4e:	580b      	ldrlt	r3, [r1, r0]
 8005a50:	18c0      	addlt	r0, r0, r3
 8005a52:	4770      	bx	lr

08005a54 <fiprintf>:
 8005a54:	b40e      	push	{r1, r2, r3}
 8005a56:	b503      	push	{r0, r1, lr}
 8005a58:	4601      	mov	r1, r0
 8005a5a:	ab03      	add	r3, sp, #12
 8005a5c:	4805      	ldr	r0, [pc, #20]	@ (8005a74 <fiprintf+0x20>)
 8005a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a62:	6800      	ldr	r0, [r0, #0]
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	f000 f845 	bl	8005af4 <_vfiprintf_r>
 8005a6a:	b002      	add	sp, #8
 8005a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a70:	b003      	add	sp, #12
 8005a72:	4770      	bx	lr
 8005a74:	20000018 	.word	0x20000018

08005a78 <__ascii_wctomb>:
 8005a78:	4603      	mov	r3, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	b141      	cbz	r1, 8005a90 <__ascii_wctomb+0x18>
 8005a7e:	2aff      	cmp	r2, #255	@ 0xff
 8005a80:	d904      	bls.n	8005a8c <__ascii_wctomb+0x14>
 8005a82:	228a      	movs	r2, #138	@ 0x8a
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a8a:	4770      	bx	lr
 8005a8c:	700a      	strb	r2, [r1, #0]
 8005a8e:	2001      	movs	r0, #1
 8005a90:	4770      	bx	lr

08005a92 <abort>:
 8005a92:	b508      	push	{r3, lr}
 8005a94:	2006      	movs	r0, #6
 8005a96:	f000 fa85 	bl	8005fa4 <raise>
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	f7fb fe35 	bl	800170a <_exit>

08005aa0 <__sfputc_r>:
 8005aa0:	6893      	ldr	r3, [r2, #8]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	b410      	push	{r4}
 8005aa8:	6093      	str	r3, [r2, #8]
 8005aaa:	da08      	bge.n	8005abe <__sfputc_r+0x1e>
 8005aac:	6994      	ldr	r4, [r2, #24]
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	db01      	blt.n	8005ab6 <__sfputc_r+0x16>
 8005ab2:	290a      	cmp	r1, #10
 8005ab4:	d103      	bne.n	8005abe <__sfputc_r+0x1e>
 8005ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aba:	f000 b933 	b.w	8005d24 <__swbuf_r>
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	1c58      	adds	r0, r3, #1
 8005ac2:	6010      	str	r0, [r2, #0]
 8005ac4:	7019      	strb	r1, [r3, #0]
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <__sfputs_r>:
 8005ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	460f      	mov	r7, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	18d5      	adds	r5, r2, r3
 8005ad8:	42ac      	cmp	r4, r5
 8005ada:	d101      	bne.n	8005ae0 <__sfputs_r+0x12>
 8005adc:	2000      	movs	r0, #0
 8005ade:	e007      	b.n	8005af0 <__sfputs_r+0x22>
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	463a      	mov	r2, r7
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f7ff ffda 	bl	8005aa0 <__sfputc_r>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d1f3      	bne.n	8005ad8 <__sfputs_r+0xa>
 8005af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005af4 <_vfiprintf_r>:
 8005af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	460d      	mov	r5, r1
 8005afa:	b09d      	sub	sp, #116	@ 0x74
 8005afc:	4614      	mov	r4, r2
 8005afe:	4698      	mov	r8, r3
 8005b00:	4606      	mov	r6, r0
 8005b02:	b118      	cbz	r0, 8005b0c <_vfiprintf_r+0x18>
 8005b04:	6a03      	ldr	r3, [r0, #32]
 8005b06:	b90b      	cbnz	r3, 8005b0c <_vfiprintf_r+0x18>
 8005b08:	f7fe f924 	bl	8003d54 <__sinit>
 8005b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b0e:	07d9      	lsls	r1, r3, #31
 8005b10:	d405      	bmi.n	8005b1e <_vfiprintf_r+0x2a>
 8005b12:	89ab      	ldrh	r3, [r5, #12]
 8005b14:	059a      	lsls	r2, r3, #22
 8005b16:	d402      	bmi.n	8005b1e <_vfiprintf_r+0x2a>
 8005b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b1a:	f7fe f988 	bl	8003e2e <__retarget_lock_acquire_recursive>
 8005b1e:	89ab      	ldrh	r3, [r5, #12]
 8005b20:	071b      	lsls	r3, r3, #28
 8005b22:	d501      	bpl.n	8005b28 <_vfiprintf_r+0x34>
 8005b24:	692b      	ldr	r3, [r5, #16]
 8005b26:	b99b      	cbnz	r3, 8005b50 <_vfiprintf_r+0x5c>
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f000 f938 	bl	8005da0 <__swsetup_r>
 8005b30:	b170      	cbz	r0, 8005b50 <_vfiprintf_r+0x5c>
 8005b32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b34:	07dc      	lsls	r4, r3, #31
 8005b36:	d504      	bpl.n	8005b42 <_vfiprintf_r+0x4e>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b3c:	b01d      	add	sp, #116	@ 0x74
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	0598      	lsls	r0, r3, #22
 8005b46:	d4f7      	bmi.n	8005b38 <_vfiprintf_r+0x44>
 8005b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b4a:	f7fe f971 	bl	8003e30 <__retarget_lock_release_recursive>
 8005b4e:	e7f3      	b.n	8005b38 <_vfiprintf_r+0x44>
 8005b50:	2300      	movs	r3, #0
 8005b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b54:	2320      	movs	r3, #32
 8005b56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b5e:	2330      	movs	r3, #48	@ 0x30
 8005b60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d10 <_vfiprintf_r+0x21c>
 8005b64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b68:	f04f 0901 	mov.w	r9, #1
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	469a      	mov	sl, r3
 8005b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b74:	b10a      	cbz	r2, 8005b7a <_vfiprintf_r+0x86>
 8005b76:	2a25      	cmp	r2, #37	@ 0x25
 8005b78:	d1f9      	bne.n	8005b6e <_vfiprintf_r+0x7a>
 8005b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b7e:	d00b      	beq.n	8005b98 <_vfiprintf_r+0xa4>
 8005b80:	465b      	mov	r3, fp
 8005b82:	4622      	mov	r2, r4
 8005b84:	4629      	mov	r1, r5
 8005b86:	4630      	mov	r0, r6
 8005b88:	f7ff ffa1 	bl	8005ace <__sfputs_r>
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f000 80a7 	beq.w	8005ce0 <_vfiprintf_r+0x1ec>
 8005b92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b94:	445a      	add	r2, fp
 8005b96:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b98:	f89a 3000 	ldrb.w	r3, [sl]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 809f 	beq.w	8005ce0 <_vfiprintf_r+0x1ec>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bac:	f10a 0a01 	add.w	sl, sl, #1
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	9307      	str	r3, [sp, #28]
 8005bb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bba:	4654      	mov	r4, sl
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc2:	4853      	ldr	r0, [pc, #332]	@ (8005d10 <_vfiprintf_r+0x21c>)
 8005bc4:	f7fa fb24 	bl	8000210 <memchr>
 8005bc8:	9a04      	ldr	r2, [sp, #16]
 8005bca:	b9d8      	cbnz	r0, 8005c04 <_vfiprintf_r+0x110>
 8005bcc:	06d1      	lsls	r1, r2, #27
 8005bce:	bf44      	itt	mi
 8005bd0:	2320      	movmi	r3, #32
 8005bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd6:	0713      	lsls	r3, r2, #28
 8005bd8:	bf44      	itt	mi
 8005bda:	232b      	movmi	r3, #43	@ 0x2b
 8005bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be0:	f89a 3000 	ldrb.w	r3, [sl]
 8005be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be6:	d015      	beq.n	8005c14 <_vfiprintf_r+0x120>
 8005be8:	9a07      	ldr	r2, [sp, #28]
 8005bea:	4654      	mov	r4, sl
 8005bec:	2000      	movs	r0, #0
 8005bee:	f04f 0c0a 	mov.w	ip, #10
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bf8:	3b30      	subs	r3, #48	@ 0x30
 8005bfa:	2b09      	cmp	r3, #9
 8005bfc:	d94b      	bls.n	8005c96 <_vfiprintf_r+0x1a2>
 8005bfe:	b1b0      	cbz	r0, 8005c2e <_vfiprintf_r+0x13a>
 8005c00:	9207      	str	r2, [sp, #28]
 8005c02:	e014      	b.n	8005c2e <_vfiprintf_r+0x13a>
 8005c04:	eba0 0308 	sub.w	r3, r0, r8
 8005c08:	fa09 f303 	lsl.w	r3, r9, r3
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	9304      	str	r3, [sp, #16]
 8005c10:	46a2      	mov	sl, r4
 8005c12:	e7d2      	b.n	8005bba <_vfiprintf_r+0xc6>
 8005c14:	9b03      	ldr	r3, [sp, #12]
 8005c16:	1d19      	adds	r1, r3, #4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	9103      	str	r1, [sp, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfbb      	ittet	lt
 8005c20:	425b      	neglt	r3, r3
 8005c22:	f042 0202 	orrlt.w	r2, r2, #2
 8005c26:	9307      	strge	r3, [sp, #28]
 8005c28:	9307      	strlt	r3, [sp, #28]
 8005c2a:	bfb8      	it	lt
 8005c2c:	9204      	strlt	r2, [sp, #16]
 8005c2e:	7823      	ldrb	r3, [r4, #0]
 8005c30:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c32:	d10a      	bne.n	8005c4a <_vfiprintf_r+0x156>
 8005c34:	7863      	ldrb	r3, [r4, #1]
 8005c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c38:	d132      	bne.n	8005ca0 <_vfiprintf_r+0x1ac>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	1d1a      	adds	r2, r3, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	9203      	str	r2, [sp, #12]
 8005c42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c46:	3402      	adds	r4, #2
 8005c48:	9305      	str	r3, [sp, #20]
 8005c4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d20 <_vfiprintf_r+0x22c>
 8005c4e:	7821      	ldrb	r1, [r4, #0]
 8005c50:	2203      	movs	r2, #3
 8005c52:	4650      	mov	r0, sl
 8005c54:	f7fa fadc 	bl	8000210 <memchr>
 8005c58:	b138      	cbz	r0, 8005c6a <_vfiprintf_r+0x176>
 8005c5a:	9b04      	ldr	r3, [sp, #16]
 8005c5c:	eba0 000a 	sub.w	r0, r0, sl
 8005c60:	2240      	movs	r2, #64	@ 0x40
 8005c62:	4082      	lsls	r2, r0
 8005c64:	4313      	orrs	r3, r2
 8005c66:	3401      	adds	r4, #1
 8005c68:	9304      	str	r3, [sp, #16]
 8005c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6e:	4829      	ldr	r0, [pc, #164]	@ (8005d14 <_vfiprintf_r+0x220>)
 8005c70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c74:	2206      	movs	r2, #6
 8005c76:	f7fa facb 	bl	8000210 <memchr>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d03f      	beq.n	8005cfe <_vfiprintf_r+0x20a>
 8005c7e:	4b26      	ldr	r3, [pc, #152]	@ (8005d18 <_vfiprintf_r+0x224>)
 8005c80:	bb1b      	cbnz	r3, 8005cca <_vfiprintf_r+0x1d6>
 8005c82:	9b03      	ldr	r3, [sp, #12]
 8005c84:	3307      	adds	r3, #7
 8005c86:	f023 0307 	bic.w	r3, r3, #7
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	9303      	str	r3, [sp, #12]
 8005c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c90:	443b      	add	r3, r7
 8005c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c94:	e76a      	b.n	8005b6c <_vfiprintf_r+0x78>
 8005c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	e7a8      	b.n	8005bf2 <_vfiprintf_r+0xfe>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	3401      	adds	r4, #1
 8005ca4:	9305      	str	r3, [sp, #20]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f04f 0c0a 	mov.w	ip, #10
 8005cac:	4620      	mov	r0, r4
 8005cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cb2:	3a30      	subs	r2, #48	@ 0x30
 8005cb4:	2a09      	cmp	r2, #9
 8005cb6:	d903      	bls.n	8005cc0 <_vfiprintf_r+0x1cc>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0c6      	beq.n	8005c4a <_vfiprintf_r+0x156>
 8005cbc:	9105      	str	r1, [sp, #20]
 8005cbe:	e7c4      	b.n	8005c4a <_vfiprintf_r+0x156>
 8005cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e7f0      	b.n	8005cac <_vfiprintf_r+0x1b8>
 8005cca:	ab03      	add	r3, sp, #12
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	462a      	mov	r2, r5
 8005cd0:	4b12      	ldr	r3, [pc, #72]	@ (8005d1c <_vfiprintf_r+0x228>)
 8005cd2:	a904      	add	r1, sp, #16
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f7fd fbd9 	bl	800348c <_printf_float>
 8005cda:	4607      	mov	r7, r0
 8005cdc:	1c78      	adds	r0, r7, #1
 8005cde:	d1d6      	bne.n	8005c8e <_vfiprintf_r+0x19a>
 8005ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ce2:	07d9      	lsls	r1, r3, #31
 8005ce4:	d405      	bmi.n	8005cf2 <_vfiprintf_r+0x1fe>
 8005ce6:	89ab      	ldrh	r3, [r5, #12]
 8005ce8:	059a      	lsls	r2, r3, #22
 8005cea:	d402      	bmi.n	8005cf2 <_vfiprintf_r+0x1fe>
 8005cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cee:	f7fe f89f 	bl	8003e30 <__retarget_lock_release_recursive>
 8005cf2:	89ab      	ldrh	r3, [r5, #12]
 8005cf4:	065b      	lsls	r3, r3, #25
 8005cf6:	f53f af1f 	bmi.w	8005b38 <_vfiprintf_r+0x44>
 8005cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cfc:	e71e      	b.n	8005b3c <_vfiprintf_r+0x48>
 8005cfe:	ab03      	add	r3, sp, #12
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	462a      	mov	r2, r5
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <_vfiprintf_r+0x228>)
 8005d06:	a904      	add	r1, sp, #16
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f7fd fe57 	bl	80039bc <_printf_i>
 8005d0e:	e7e4      	b.n	8005cda <_vfiprintf_r+0x1e6>
 8005d10:	08006121 	.word	0x08006121
 8005d14:	0800612b 	.word	0x0800612b
 8005d18:	0800348d 	.word	0x0800348d
 8005d1c:	08005acf 	.word	0x08005acf
 8005d20:	08006127 	.word	0x08006127

08005d24 <__swbuf_r>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	460e      	mov	r6, r1
 8005d28:	4614      	mov	r4, r2
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	b118      	cbz	r0, 8005d36 <__swbuf_r+0x12>
 8005d2e:	6a03      	ldr	r3, [r0, #32]
 8005d30:	b90b      	cbnz	r3, 8005d36 <__swbuf_r+0x12>
 8005d32:	f7fe f80f 	bl	8003d54 <__sinit>
 8005d36:	69a3      	ldr	r3, [r4, #24]
 8005d38:	60a3      	str	r3, [r4, #8]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	071a      	lsls	r2, r3, #28
 8005d3e:	d501      	bpl.n	8005d44 <__swbuf_r+0x20>
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	b943      	cbnz	r3, 8005d56 <__swbuf_r+0x32>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f82a 	bl	8005da0 <__swsetup_r>
 8005d4c:	b118      	cbz	r0, 8005d56 <__swbuf_r+0x32>
 8005d4e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005d52:	4638      	mov	r0, r7
 8005d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	6922      	ldr	r2, [r4, #16]
 8005d5a:	1a98      	subs	r0, r3, r2
 8005d5c:	6963      	ldr	r3, [r4, #20]
 8005d5e:	b2f6      	uxtb	r6, r6
 8005d60:	4283      	cmp	r3, r0
 8005d62:	4637      	mov	r7, r6
 8005d64:	dc05      	bgt.n	8005d72 <__swbuf_r+0x4e>
 8005d66:	4621      	mov	r1, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7ff f937 	bl	8004fdc <_fflush_r>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d1ed      	bne.n	8005d4e <__swbuf_r+0x2a>
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	6022      	str	r2, [r4, #0]
 8005d7e:	701e      	strb	r6, [r3, #0]
 8005d80:	6962      	ldr	r2, [r4, #20]
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d004      	beq.n	8005d92 <__swbuf_r+0x6e>
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	07db      	lsls	r3, r3, #31
 8005d8c:	d5e1      	bpl.n	8005d52 <__swbuf_r+0x2e>
 8005d8e:	2e0a      	cmp	r6, #10
 8005d90:	d1df      	bne.n	8005d52 <__swbuf_r+0x2e>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f7ff f921 	bl	8004fdc <_fflush_r>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d0d9      	beq.n	8005d52 <__swbuf_r+0x2e>
 8005d9e:	e7d6      	b.n	8005d4e <__swbuf_r+0x2a>

08005da0 <__swsetup_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4b29      	ldr	r3, [pc, #164]	@ (8005e48 <__swsetup_r+0xa8>)
 8005da4:	4605      	mov	r5, r0
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	460c      	mov	r4, r1
 8005daa:	b118      	cbz	r0, 8005db4 <__swsetup_r+0x14>
 8005dac:	6a03      	ldr	r3, [r0, #32]
 8005dae:	b90b      	cbnz	r3, 8005db4 <__swsetup_r+0x14>
 8005db0:	f7fd ffd0 	bl	8003d54 <__sinit>
 8005db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db8:	0719      	lsls	r1, r3, #28
 8005dba:	d422      	bmi.n	8005e02 <__swsetup_r+0x62>
 8005dbc:	06da      	lsls	r2, r3, #27
 8005dbe:	d407      	bmi.n	8005dd0 <__swsetup_r+0x30>
 8005dc0:	2209      	movs	r2, #9
 8005dc2:	602a      	str	r2, [r5, #0]
 8005dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dce:	e033      	b.n	8005e38 <__swsetup_r+0x98>
 8005dd0:	0758      	lsls	r0, r3, #29
 8005dd2:	d512      	bpl.n	8005dfa <__swsetup_r+0x5a>
 8005dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dd6:	b141      	cbz	r1, 8005dea <__swsetup_r+0x4a>
 8005dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	d002      	beq.n	8005de6 <__swsetup_r+0x46>
 8005de0:	4628      	mov	r0, r5
 8005de2:	f7ff fdd3 	bl	800598c <_free_r>
 8005de6:	2300      	movs	r3, #0
 8005de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	2300      	movs	r3, #0
 8005df4:	6063      	str	r3, [r4, #4]
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	f043 0308 	orr.w	r3, r3, #8
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	b94b      	cbnz	r3, 8005e1a <__swsetup_r+0x7a>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e10:	d003      	beq.n	8005e1a <__swsetup_r+0x7a>
 8005e12:	4621      	mov	r1, r4
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 f83f 	bl	8005e98 <__smakebuf_r>
 8005e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1e:	f013 0201 	ands.w	r2, r3, #1
 8005e22:	d00a      	beq.n	8005e3a <__swsetup_r+0x9a>
 8005e24:	2200      	movs	r2, #0
 8005e26:	60a2      	str	r2, [r4, #8]
 8005e28:	6962      	ldr	r2, [r4, #20]
 8005e2a:	4252      	negs	r2, r2
 8005e2c:	61a2      	str	r2, [r4, #24]
 8005e2e:	6922      	ldr	r2, [r4, #16]
 8005e30:	b942      	cbnz	r2, 8005e44 <__swsetup_r+0xa4>
 8005e32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e36:	d1c5      	bne.n	8005dc4 <__swsetup_r+0x24>
 8005e38:	bd38      	pop	{r3, r4, r5, pc}
 8005e3a:	0799      	lsls	r1, r3, #30
 8005e3c:	bf58      	it	pl
 8005e3e:	6962      	ldrpl	r2, [r4, #20]
 8005e40:	60a2      	str	r2, [r4, #8]
 8005e42:	e7f4      	b.n	8005e2e <__swsetup_r+0x8e>
 8005e44:	2000      	movs	r0, #0
 8005e46:	e7f7      	b.n	8005e38 <__swsetup_r+0x98>
 8005e48:	20000018 	.word	0x20000018

08005e4c <__swhatbuf_r>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	460c      	mov	r4, r1
 8005e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e54:	2900      	cmp	r1, #0
 8005e56:	b096      	sub	sp, #88	@ 0x58
 8005e58:	4615      	mov	r5, r2
 8005e5a:	461e      	mov	r6, r3
 8005e5c:	da0d      	bge.n	8005e7a <__swhatbuf_r+0x2e>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e64:	f04f 0100 	mov.w	r1, #0
 8005e68:	bf14      	ite	ne
 8005e6a:	2340      	movne	r3, #64	@ 0x40
 8005e6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e70:	2000      	movs	r0, #0
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	b016      	add	sp, #88	@ 0x58
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
 8005e7a:	466a      	mov	r2, sp
 8005e7c:	f000 f848 	bl	8005f10 <_fstat_r>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	dbec      	blt.n	8005e5e <__swhatbuf_r+0x12>
 8005e84:	9901      	ldr	r1, [sp, #4]
 8005e86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e8e:	4259      	negs	r1, r3
 8005e90:	4159      	adcs	r1, r3
 8005e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e96:	e7eb      	b.n	8005e70 <__swhatbuf_r+0x24>

08005e98 <__smakebuf_r>:
 8005e98:	898b      	ldrh	r3, [r1, #12]
 8005e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e9c:	079d      	lsls	r5, r3, #30
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	d507      	bpl.n	8005eb4 <__smakebuf_r+0x1c>
 8005ea4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	6123      	str	r3, [r4, #16]
 8005eac:	2301      	movs	r3, #1
 8005eae:	6163      	str	r3, [r4, #20]
 8005eb0:	b003      	add	sp, #12
 8005eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb4:	ab01      	add	r3, sp, #4
 8005eb6:	466a      	mov	r2, sp
 8005eb8:	f7ff ffc8 	bl	8005e4c <__swhatbuf_r>
 8005ebc:	9f00      	ldr	r7, [sp, #0]
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7fe ff86 	bl	8004dd4 <_malloc_r>
 8005ec8:	b948      	cbnz	r0, 8005ede <__smakebuf_r+0x46>
 8005eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ece:	059a      	lsls	r2, r3, #22
 8005ed0:	d4ee      	bmi.n	8005eb0 <__smakebuf_r+0x18>
 8005ed2:	f023 0303 	bic.w	r3, r3, #3
 8005ed6:	f043 0302 	orr.w	r3, r3, #2
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	e7e2      	b.n	8005ea4 <__smakebuf_r+0xc>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	6020      	str	r0, [r4, #0]
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	9b01      	ldr	r3, [sp, #4]
 8005eea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eee:	b15b      	cbz	r3, 8005f08 <__smakebuf_r+0x70>
 8005ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f000 f81d 	bl	8005f34 <_isatty_r>
 8005efa:	b128      	cbz	r0, 8005f08 <__smakebuf_r+0x70>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	431d      	orrs	r5, r3
 8005f0c:	81a5      	strh	r5, [r4, #12]
 8005f0e:	e7cf      	b.n	8005eb0 <__smakebuf_r+0x18>

08005f10 <_fstat_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d07      	ldr	r5, [pc, #28]	@ (8005f30 <_fstat_r+0x20>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	f7fb fc44 	bl	80017aa <_fstat>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d102      	bne.n	8005f2c <_fstat_r+0x1c>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	b103      	cbz	r3, 8005f2c <_fstat_r+0x1c>
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000388 	.word	0x20000388

08005f34 <_isatty_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	@ (8005f50 <_isatty_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fb fc43 	bl	80017ca <_isatty>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_isatty_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_isatty_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000388 	.word	0x20000388

08005f54 <_raise_r>:
 8005f54:	291f      	cmp	r1, #31
 8005f56:	b538      	push	{r3, r4, r5, lr}
 8005f58:	4605      	mov	r5, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	d904      	bls.n	8005f68 <_raise_r+0x14>
 8005f5e:	2316      	movs	r3, #22
 8005f60:	6003      	str	r3, [r0, #0]
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005f6a:	b112      	cbz	r2, 8005f72 <_raise_r+0x1e>
 8005f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f70:	b94b      	cbnz	r3, 8005f86 <_raise_r+0x32>
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 f830 	bl	8005fd8 <_getpid_r>
 8005f78:	4622      	mov	r2, r4
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f82:	f000 b817 	b.w	8005fb4 <_kill_r>
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d00a      	beq.n	8005fa0 <_raise_r+0x4c>
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	d103      	bne.n	8005f96 <_raise_r+0x42>
 8005f8e:	2316      	movs	r3, #22
 8005f90:	6003      	str	r3, [r0, #0]
 8005f92:	2001      	movs	r0, #1
 8005f94:	e7e7      	b.n	8005f66 <_raise_r+0x12>
 8005f96:	2100      	movs	r1, #0
 8005f98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4798      	blx	r3
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e7e0      	b.n	8005f66 <_raise_r+0x12>

08005fa4 <raise>:
 8005fa4:	4b02      	ldr	r3, [pc, #8]	@ (8005fb0 <raise+0xc>)
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	f7ff bfd3 	b.w	8005f54 <_raise_r>
 8005fae:	bf00      	nop
 8005fb0:	20000018 	.word	0x20000018

08005fb4 <_kill_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d07      	ldr	r5, [pc, #28]	@ (8005fd4 <_kill_r+0x20>)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	f7fb fb92 	bl	80016ea <_kill>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	d102      	bne.n	8005fd0 <_kill_r+0x1c>
 8005fca:	682b      	ldr	r3, [r5, #0]
 8005fcc:	b103      	cbz	r3, 8005fd0 <_kill_r+0x1c>
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	bd38      	pop	{r3, r4, r5, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000388 	.word	0x20000388

08005fd8 <_getpid_r>:
 8005fd8:	f7fb bb7f 	b.w	80016da <_getpid>

08005fdc <_init>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr

08005fe8 <_fini>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr
